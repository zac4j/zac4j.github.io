<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dynamic proxy on Zac&#39;s blog</title>
    <link>https://zacash.cn/tags/dynamic-proxy/</link>
    <description>Recent content in dynamic proxy on Zac&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Zac &amp;copy; 2022
</copyright>
    <lastBuildDate>Sun, 15 May 2022 21:51:47 +0800</lastBuildDate><atom:link href="https://zacash.cn/tags/dynamic-proxy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Dynamic Proxy</title>
      <link>https://zacash.cn/posts/java-basic-dynamic-proxy/</link>
      <pubDate>Sun, 15 May 2022 21:51:47 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-basic-dynamic-proxy/</guid>
      <description>动态代理是一种代理机制，我们知道，代理可以看作是对调用目标的一个包装，这样我们对目标代码调用不是直接发生的，而是通过代理完成。很多动态代理场景，也可以看作是装饰器（Decorator）模式的应用。
JDK Proxy 通过代理可以让调用者（Caller）和实现者（Implementation）之间解耦。比如进行 RPC 调用，框架内的寻址、序列化、反序列化等，对于调用者往往没有太大意义内容，通过代理，可以提供更加友善的接口。
可以看一个简单的例子，在生产环境中，我们可以轻松扩展类似逻辑进行诊断、限流等。
public class DynamicProxySample {  public static void main(String[] args) {  Bonjor bonjor = new Bonjor();  SimpleInvocationHandler handler = SimpleInvocationHandler(bonjor);  // 构造代码实例  Hello proxyHello = (Hello)Proxy.newProxyInstance(Bonjor.class.getClassLoader(), Bonjor.class.getInterfaces(), handler);  // 调用代理方法  proxyHello.sayHi();  } }  interface Hello {  void sayHi(); }  class Bonjor implements Hello {  @Override  public void sayHi() {  System.out.println(&amp;#34;Bonjor!&amp;#34;);  } }  class SimpleInvocationHandler implements InvocationHandler {  private Object target;  public SimpleInvocationHandler(Object target) {  this.</description>
    </item>
    
  </channel>
</rss>
