<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gradle on Zac&#39;s Blog</title>
    <link>https://zacash.cn/tags/gradle/</link>
    <description>Recent content in gradle on Zac&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2020, Copyright Zac</copyright>
    <lastBuildDate>Fri, 05 Jun 2020 14:49:15 +0800</lastBuildDate>
    
	<atom:link href="https://zacash.cn/tags/gradle/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Intro to Build System</title>
      <link>https://zacash.cn/post/intro-to-build-system/</link>
      <pubDate>Fri, 05 Jun 2020 14:49:15 +0800</pubDate>
      
      <guid>https://zacash.cn/post/intro-to-build-system/</guid>
      <description>构建流程（Build process） 简单来说构建流程就是涉及一系列工具和步骤将项目转换成 Android Application Package(APK)。典型的流程如下图所示：
图中所示有4个步骤：
 编译器将源码转换为 DEX 文件(Dalvik 可执行文件，包括运行在 Android 设备的字节码)，并将其他所有内容转换成编译后的资源文件。 APK Packager 将 DEX 文件和编译后的资源文件合并到一个 APK 里。 APK Packager 使用 keystore 为 APK 签名。 在生成最终的 APK 文件之前，Packager 会使用 zipalign 工具  自定义构建配置 Gradle 和 Android 插件可以帮助我们修改 build.gradle 中的这些配置：
构建类型 Build Types 构建类型定义 Gradle 在构建(building)和打包(packaging) App 时使用的某些属性，通常针对开发周期的不同阶段(different stages of development)进行配置。比如：
 debug 构建类型支持 debug 选项，并使用 debug key 为 APK 签名。 release 构建类型则会压缩(shrink)和混淆(obfuscate) APK，并使用 release key 为 APK 签名。  构建 App 时必须指定一个构建类型。可以参考 BuildType DSL，了解配置构建类型属性。</description>
    </item>
    
  </channel>
</rss>