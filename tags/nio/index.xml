<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nio on Zac&#39;s blog</title>
    <link>https://zacash.cn/tags/nio/</link>
    <description>Recent content in nio on Zac&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Zac &amp;copy; 2022
</copyright>
    <lastBuildDate>Thu, 26 May 2022 08:59:56 +0800</lastBuildDate><atom:link href="https://zacash.cn/tags/nio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java IO</title>
      <link>https://zacash.cn/posts/java-io/</link>
      <pubDate>Thu, 26 May 2022 08:59:56 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-io/</guid>
      <description>Java IO 方式有很多种，基于不同的 IO 抽象模型和交互方式，可以进行简单区分。
  Blocking IO，主要实现是在 java.io 包，基于流模型实现，提供了我们熟知的如 File、InputStream、OutputStream 等抽象。交互方式是同步、阻塞的方式，也就是说，在读取 InputStream 或者写入 OutputStream 时，在读写操作完成前，线程会一直阻塞，它们之间的调用是可靠的线性顺序。
java.io 包的好处是代码比较简单、直观，缺点是 IO 效率和扩展性存在局限性，容易成为应用性能的瓶颈。很多时候，人们也把 java.net 下面提供的部分网络 API，如 Socket、HttpURLConnection 也归类到同步阻塞 IO 类库，因为网络通信同样是 IO 行为。
  Non-blocking IO，主要实现在 java.nio 包，于 Java 1.4 引入，通常称 NIO 框架，提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层的高性能数据操作方式。
NIO 在 Java7 中有了进一步的改进，也就是 NIO2，引入了异步非阻塞 IO 方式，又称为 AIO（Asynchronous IO）。异步 IO 操作基于事件和回调机制，可以简单理解为，应用操作直接返回，而不是阻塞在那里，当后台处理完成，操作系统会通知线程进行后续工作。
  一些基本概念  同步（synchronous）简单来说，同步是一种可靠的有序运行机制，当我们进行同步操作时，后续的任务时等待当前调用返回，才会进行下一步。 异步（asynchronous）与同步相反，其他任务不需要等待当前调用翻译，通常依靠事件、回调等机制来实现任务间次序关系。 阻塞（blocking） 在进行阻塞操作时，当前线程会处于阻塞状态，无法从事其他任务，只有当条件就绪才能继续，如 Socket 新连接建立完毕，或数据读取、写入操作完成。 非阻塞（non-blocking）非阻塞不管 IO 操作是否结束，直接返回，相应操作在后台继续处理。  Java IO 简介 Java IO 简单的类图如下：</description>
    </item>
    
  </channel>
</rss>
