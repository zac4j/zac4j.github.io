<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interview on Zac&#39;s blog</title>
    <link>https://zacash.cn/tags/interview/</link>
    <description>Recent content in interview on Zac&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Zac &amp;copy; 2022
</copyright>
    <lastBuildDate>Wed, 04 May 2022 20:44:38 +0800</lastBuildDate><atom:link href="https://zacash.cn/tags/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Prepare Job Interview</title>
      <link>https://zacash.cn/posts/how-to-prepare-job-interview/</link>
      <pubDate>Wed, 04 May 2022 20:44:38 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/how-to-prepare-job-interview/</guid>
      <description>作者：Windson Yang 链接：https://zhuanlan.zhihu.com/p/38432342 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
 概述 工作了几年，当我有了面试官的经验之后，我发现认真准备简历和面试是非常重要的，因为毫无准备就来面试的求职者真的太多了。这篇文章我把这几年作为面试者和面试官身份的的经验給大家，希望大家可以从中学到一些面试的技巧，找到心仪的工作。大家也可以使用 求职课程 进行简历 Review 和模拟面试，这样既能节省请假面试的时间，也能根据我们的反馈改善自己面试的表现。在真实面试的时候就会更有把握。
分析阶段 不同的公司乃至部门，面试的流程和着重点都有颇大的差别。国内以腾讯为例，微信部门与深圳总部的面试流程和着重点就不一样。微信一面的时候需要五十分钟内手写 4 道偏简单的算法题，但是在深圳总部面试的时候一面却是没有算法题，两小时的考卷。更多的是与面试官聊技术与项目经验。国外的话，甲骨文五轮的面试可能四轮是系统设计，一轮是算法。亚马逊虽然注重算法，但是非技术问题在面试中占比非常高。你首先需要知道面试中考察什么内容之后才去开始准备，国内可以通过我们整理的高频题库，牛客网，看准网着手复习。国外可以通过一亩三分地，Blind，Leetcode discuss 等网站找到这些信息。
准备阶段 设定限期 面试准备不能无休止地进行下去，因为计算机知识永远都学习不完。可以给自己设立一个时间点，在时间点之后就开始投简历进行面试。例如你可以设立一个月的面试准备时间，然后再根据求职的岗位以及自己的实际情况去分配时间，把时间主要分给面试主要考察的地方。
技术准备 基础知识主要包括：编程语言基础，第三方工具基础（框架，中间件等），算法与数据结构，计算机网络，操作系统，数据库。我在程序员面试推荐书籍这篇文章中列出了面试常见的问题以及对应的解答书籍供大家参考，这里我列举一些面试常见的问题：
1.编程语言基础
 数据结构的实现细节以及比较：数组，链表，哈希表是如何实现的，底层内存分配是怎样的？插入与查找的时间复杂度是多少，分别有什么优缺点。 编程语言特性： Java 的字符串池是怎么实现的，垃圾回收的流程以及原理。 关键字特性：包括 Java 中的 static，final，Python 中的 init 关键字的含义以及使用场景。 面向对象的细节：类的封装，函数与变量继承，抽象类和接口有什么区别等。 多线程与多进程：线程如何同步，进程如何同步，wait() 函数使用场景以及常用的并发编程模式。  2.第三方工具
整体架构：这个工具整体的架构是怎样的？主要由哪几个部分组成，它们之间是如何通信以及合作的。 实现原理：核心功能是如何实现的？对比另外一款工具做了哪些优化以及改进。
3.算法基础
算法题：链表操作，二分查找，动态规划，DFS，BFS 等（可以使用 Leetcode 来进行学习）。 算法复杂度的分析：时间复杂度，空间复杂度，平均时间复杂度。 数据结构的实现：实现二叉查找树，Trie 树。
这里说一点题外话，可能有的同学有疑问，觉得这些平常工作都用不到，为什么还要花那么多时间在上面。其实不是的，第一，平常工作都能用到，无论从二分查找到复杂一点的前缀树。开发的过程中如果你知道这些算法／数据结构，就能根据自己的业务来选择最适合的算法／数据结构，减少整个项目的复杂度。 第二，数据结构和算法锻炼的是思维，就像 NBA 球员除了训练投篮和战术之外，还需要训练敏捷度，体力，耐力等其他方面。刷算法题的时候，可以从优秀的前辈中学习到一些有趣的，巧妙的方法。它们能扩展你的编程时思考的范围。即使你不准备换工作，我也建议每天都刷一道算法题，日积月累，一年下来你的算法基础一定能比同龄人高出不少。而且当你真正理解算法题的知识之后，写程序 debug 和花在 Stackoverflow 的时间就会大大减少，往往知道哪里可能有问题并且能大幅地增加工作效率。
4.计算机网络
 协议的基础组成与用途：HTTP 协议中不同头部，方法，状态码的含义。 协议的使用场景：DNS 协议，ARP 协议，SSH 命令的使用场景以及原理。 不同协议的区别：TCP 与 UDP 的区别，HTTP 与 HTTPS 的区别。 协议具体功能实现：TCP 三次握手原理，TCP 慢启动以及滑动窗口的原理与实现方式。  5.</description>
    </item>
    
  </channel>
</rss>
