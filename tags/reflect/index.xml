<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reflect on Zac&#39;s blog</title>
    <link>https://zacash.cn/tags/reflect/</link>
    <description>Recent content in reflect on Zac&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Zac &amp;copy; 2022
</copyright>
    <lastBuildDate>Sun, 15 May 2022 16:26:15 +0800</lastBuildDate><atom:link href="https://zacash.cn/tags/reflect/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Reflection</title>
      <link>https://zacash.cn/posts/java-basic-reflection/</link>
      <pubDate>Sun, 15 May 2022 16:26:15 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-basic-reflection/</guid>
      <description>反射机制是 Java 语言提供的一种基础功能，赋予程序在运行时自省（introspect，官方用语）的能力。通过反射我们可以直接操作类或者对象，比如获取某个对象的类定义，获取类声明的属性和方法，调用方法或者构造对象，甚至可以运行时修改类定义。
Reflection Essential 创建对象的两种途径 常规方式：
import 包类名称 -&amp;gt; 通过 new 实例化 -&amp;gt; 取得实例化对象
反射方式：
通过包类名称获取 Class 对象 -&amp;gt; 通过 Class 对象创建新的实例
看看反射利用创建 Date 对象：
public Date createDate() {  Class clazz = Class.forName(&amp;#34;java.util.Date&amp;#34;);  return (Date)class.newInstance(); } 理解 Class 类 public Date createDate() {  return new Date(); } </description>
    </item>
    
  </channel>
</rss>
