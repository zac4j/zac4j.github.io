<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrent on Zac&#39;s blog</title>
    <link>https://zacash.cn/categories/concurrent/</link>
    <description>Recent content in concurrent on Zac&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Zac &amp;copy; 2022
</copyright>
    <lastBuildDate>Wed, 29 Jun 2022 21:10:50 +0800</lastBuildDate><atom:link href="https://zacash.cn/categories/concurrent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java CAS and AQS</title>
      <link>https://zacash.cn/posts/java-cas-aqs/</link>
      <pubDate>Wed, 29 Jun 2022 21:10:50 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-cas-aqs/</guid>
      <description>AtomicInteger 的底层原理 AtomicInteger 是对 int 类型的一种封装，提供原子性的访问和更新操作，其原子性操作的实现是基于 CAS（compare-and-swap）技术。
所谓 CAS，表现的是一系列操作的集合，获取当前数值，进行一系列运算，利用 CAS 指令试图进行更新。如果当前数值未变，代表没有其他线程进行并发修改，则更新成功。如果当前数值变了，可能出现不同的选择，要么进行重试，要么就返回一个成功或失败的结果。
从 AtomicInteger 的内部属性来看，它依赖于 Unsafe 提供的一些底层能力，进行底层操作；以 volatile 的 value 字段，记录数值，以保证可见性。
private static final jdk.internal.misc.Unsafe U = jdk.internal.misc.Unsafe.getUnsafe(); private static final long VALUE = U.objectFieldOffset(AtomicInteger.class, &amp;#34;value&amp;#34;); private volatile int value; 具体的原子操作细节，可以参考任意一个原子更新方法，比如下面的 getAndIncrement.
Unsafe 会利用 value 字段的内存地址偏移，直接完成操作。
public final int getAndIncrement() {  return U.getAndInt(this, VALUE, 1); } 因为 getAndIncrement 需要返回数值，所以需要添加失败重试逻辑。
 public final int getAndAddInt(Object o, long offset, int delta) {  int v;  do {  v = getIntVolatile(o, offset);  } while (!</description>
    </item>
    
    <item>
      <title>Java Blocking Queue</title>
      <link>https://zacash.cn/posts/java-blocking-queue/</link>
      <pubDate>Sun, 19 Jun 2022 20:38:57 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-blocking-queue/</guid>
      <description>ConcurrentLinkedQueue 和 LinkedBlockingQueue 有什么区别
 Concurrent 类型基于 lock-free，在常见的多线程访问场景，一般可以提供较高吞吐量。 LinkedBlockingQueue 内部则是基于锁，并提供了 BlockingQueue 的等待性方法。  线程安全队列一览 常见的集合中 LinkedList 是个 Deque，只不过不是线程安全的。
下图展示了 Java 并发类库提供的各种线程安全队列实现：
Deque Deque 侧重点是支持队列头尾都进行插入和删除，所以提供了特定的方法，如：
 尾部插入时需要的 addLast(e)、offerLast(e). 尾部删除所需要的 removeLast()、pollLast().  JUC 包中绝大部分 Queue 都实现了 BlockingQueue 接口。在常规队列操作基础上，Blocking 意味着其提供了特定的等待性操作，获取时（take）等待元素进队，或者插入时（put）等待队列出现空位。
/** * 获取并移除队列头结点 */ E take() throws InterruptedException;  /** * 插入元素，如果队列已满，则等待直到队列出现空闲空间 */ void put(E e) throws InterruptedException; 另一个 BlockingQueue 经常被考察的点，就是是否有界（Bounded、Unbounded），这一点也往往会影响我们在应用开发中的选择。
 ArrayBlockingQueue 是最典型的有界队列，其内部以 final 的数组保存数据，数组的大小就决定了队列的边界，所以我们在创建 ArrayBlockingQueue 时，都要指定容量，如：  public ArrayBlockingQueue(int capacity, boolean fair)  LinkedBlockingQueue 基于有界的逻辑实现，不过其默认初始容量为 Integer.MAX_VALUE，成为无界队列。 SynchronousQueue 每个删除操作都要等待插入操作，反之每个插入操作也都要等待删除操纵。那么这个队列的容量时多少呢？0.</description>
    </item>
    
    <item>
      <title>Intro to Java Juc</title>
      <link>https://zacash.cn/posts/java-juc/</link>
      <pubDate>Tue, 14 Jun 2022 15:24:53 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-juc/</guid>
      <description>Juc 通常指 java.util.concurrent 并发包，这个包集中了 Java 并发的各种基础工具类，具体包括几个方面：
 提供了比 synchronized 更高级的各种同步结构，包括 CountDownLatch、CyclicBarrier、Semaphore 等，可以实现更加丰富的多线程操作，比如利用 Semaphore 作为资源控制器，限制同时急性工作的线程数量。 各种线程安全的容器，如 ConcurrentHashMap、有序的 ConcurrentSkipListMap，或者类似快照机制，实现线程安全的动态数组 CopyOnWriteArrayList 等。 各种并发队列的实现，如各种 BlockingQueue 实现，比较典型的 ArrayBlockingQueue、SynchronousQueue 或针对特定场景的 PriorityBlockingQueue 等。 Executor 框架，可以创建各种不同类型的线程池，调度任务运行等，绝大部分情况下，不再需要自己从头实现线程池和任务调度器。  我们进行多线程编程，无非是达到几个目的：
 利用多线程提高程序的扩展能力，以达到业务对吞吐量的要求。 协调线程间调度、交互，以完成业务逻辑 线程间传递数据和状态，这同样是实现业务逻辑的需要。  Semaphore Semaphore 提供了 Java 版本的信号量实现，它通过控制一定数量的允许（permit）的方式，来达到限制通用资源访问的目的。可以想象一种场景，我们在机场等出租车排队时，当很多空闲出租车就位时，为防止过度拥挤，调度员指挥排队等待上车的人群一次进来5人上车，等这5人坐车出发，再放进来下一批，这和 Semaphore 的工作原理类似。
import java.util.concurrent.Semaphore;  public class SemaphoreSample {  public static void main(String[] args) {  Semaphore semaphore = new Semaphore(0);  for (int i = 0; i &amp;lt; 10; i++) {  Thread t = new Thread(new AbnormalSemaphoreWorker(semaphore));  t.</description>
    </item>
    
    <item>
      <title>Intro to ConcurrentHashMap</title>
      <link>https://zacash.cn/posts/intro-to-concurrenthashmap/</link>
      <pubDate>Mon, 23 May 2022 15:11:27 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-concurrenthashmap/</guid>
      <description>&lt;p&gt;Java 提供了不同层面的线程安全支持。在传统集合框架内部，除了 Hashtable 等容器，还提供了同步包装器（Synchronized Wrapper），我们可以通过 Collections 工具类提供的包装方法来获取同步包装器，如 Collections.synchronizedMap，但是它们利用的都是粗粒度的同步方式，在高并发情况下，性能比较底下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Process, Threads and Locks</title>
      <link>https://zacash.cn/posts/threads-and-locks/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/threads-and-locks/</guid>
      <description>&lt;p&gt;Threads are created and managed by the classes Thread and ThreadGroup. Creating a Thread object creates a thread, and that is the only way to create a thread. When the thread is created, it is not yet active; it begins to run when its start method is called.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Coroutines Introduction</title>
      <link>https://zacash.cn/posts/coroutines-introduction/</link>
      <pubDate>Sat, 25 Apr 2020 11:40:03 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/coroutines-introduction/</guid>
      <description>协程用来解决什么问题 Kotlin 的协程提供了一种全新的并发处理方式，我们可以使用它来简化安卓异步执行的代码。
在 Android 平台上协程主要用来解决两个问题：
 处理耗时任务(Long running tasks) 保证主线程安全(Main-safety)  处理耗时任务 我们常规处理耗时任务是通过异步回调的方式，比如：
fun fetchDoc() {  get(&amp;#34;https://doc.qq.com&amp;#34;) { result -&amp;gt;  show(result)  } } 通过协程的方式是这样：
// 主线程执行 suspend fun fetchDoc() {  // 直接返回结果  val result = get(&amp;#34;https://doc.qq.com&amp;#34;)  show(result) }  // 主线程执行 suspend fun get(url: String) = withContext(Dispatchers.IO) {  /*IO 线程池执行*/ } 可以看到通过协程可以直接返回请求结果，而不用管理请求延迟和线程阻塞，这是如何实现的呢？
协程在常规的函数操作 —— invoke 和 return 之外，还新增了2项：
 suspend —— 称为挂起或暂停，用于暂停执行当前协程，并保存所有局部变量 resume —— 让暂停的协程继续执行  那么 suspend 是如何实现的呢？</description>
    </item>
    
  </channel>
</rss>
