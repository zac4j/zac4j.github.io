<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrent on Zac&#39;s blog</title>
    <link>https://zacash.cn/categories/concurrent/</link>
    <description>Recent content in concurrent on Zac&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Zac &amp;copy; 2022
</copyright>
    <lastBuildDate>Mon, 23 May 2022 15:11:27 +0800</lastBuildDate><atom:link href="https://zacash.cn/categories/concurrent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Intro to ConcurrentHashMap</title>
      <link>https://zacash.cn/posts/intro-to-concurrenthashmap/</link>
      <pubDate>Mon, 23 May 2022 15:11:27 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-concurrenthashmap/</guid>
      <description>&lt;p&gt;Java 提供了不同层面的线程安全支持。在传统集合框架内部，除了 Hashtable 等容器，还提供了同步包装器（Synchronized Wrapper），我们可以通过 Collections 工具类提供的包装方法来获取同步包装器，如 Collections.synchronizedMap，但是它们利用的都是粗粒度的同步方式，在高并发情况下，性能比较底下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Process, Threads and Locks</title>
      <link>https://zacash.cn/posts/threads-and-locks/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/threads-and-locks/</guid>
      <description>&lt;p&gt;Threads are created and managed by the classes Thread and ThreadGroup. Creating a Thread object creates a thread, and that is the only way to create a thread. When the thread is created, it is not yet active; it begins to run when its start method is called.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Coroutines Introduction</title>
      <link>https://zacash.cn/posts/coroutines-introduction/</link>
      <pubDate>Sat, 25 Apr 2020 11:40:03 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/coroutines-introduction/</guid>
      <description>协程用来解决什么问题 Kotlin 的协程提供了一种全新的并发处理方式，我们可以使用它来简化安卓异步执行的代码。
在 Android 平台上协程主要用来解决两个问题：
 处理耗时任务(Long running tasks) 保证主线程安全(Main-safety)  处理耗时任务 我们常规处理耗时任务是通过异步回调的方式，比如：
fun fetchDoc() {  get(&amp;#34;https://doc.qq.com&amp;#34;) { result -&amp;gt;  show(result)  } } 通过协程的方式是这样：
// 主线程执行 suspend fun fetchDoc() {  // 直接返回结果  val result = get(&amp;#34;https://doc.qq.com&amp;#34;)  show(result) }  // 主线程执行 suspend fun get(url: String) = withContext(Dispatchers.IO) {  /*IO 线程池执行*/ } 可以看到通过协程可以直接返回请求结果，而不用管理请求延迟和线程阻塞，这是如何实现的呢？
协程在常规的函数操作 —— invoke 和 return 之外，还新增了2项：
 suspend —— 称为挂起或暂停，用于暂停执行当前协程，并保存所有局部变量 resume —— 让暂停的协程继续执行  那么 suspend 是如何实现的呢？</description>
    </item>
    
  </channel>
</rss>
