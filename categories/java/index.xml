<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Zac&#39;s blog</title>
    <link>https://zacash.cn/categories/java/</link>
    <description>Recent content in java on Zac&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Zac &amp;copy; 2022
</copyright>
    <lastBuildDate>Sun, 19 Jun 2022 20:38:57 +0800</lastBuildDate><atom:link href="https://zacash.cn/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Blocking Queue</title>
      <link>https://zacash.cn/posts/java-blocking-queue/</link>
      <pubDate>Sun, 19 Jun 2022 20:38:57 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-blocking-queue/</guid>
      <description>ConcurrentLinkedQueue 和 LinkedBlockingQueue 有什么区别
 Concurrent 类型基于 lock-free，在常见的多线程访问场景，一般可以提供较高吞吐量。 LinkedBlockingQueue 内部则是基于锁，并提供了 BlockingQueue 的等待性方法。  线程安全队列一览 常见的集合中 LinkedList 是个 Deque，只不过不是线程安全的。
下图展示了 Java 并发类库提供的各种线程安全队列实现：
Deque Deque 侧重点是支持队列头尾都进行插入和删除，所以提供了特定的方法，如：
 尾部插入时需要的 addLast(e)、offerLast(e). 尾部删除所需要的 removeLast()、pollLast().  juc 包中绝大部分 Queue 都实现了 BlockingQueue 接口。在常规队列操作基础上，Blocking 意味着其提供了特定的等待性操作，获取时（take）等待元素进队，或者插入时（put）等待队列出现空位。
/** * 获取并移除队列头结点 */ E take() throws InterruptedException;  /** * 插入元素，如果队列已满，则等待直到队列出现空闲空间 */ void put(E e) throws InterruptedException; 另一个 BlockingQueue 经常被考察的点，就是是否有界（Bounded、Unbounded），这一点也往往会影响我们在应用开发中的选择。
 ArrayBlockingQueue 是最典型的有界队列，其内部以 final 的数组保存数据，数组的大小就决定了队列的边界，所以我们在创建 ArrayBlockingQueue 时，都要指定容量，如：  public ArrayBlockingQueue(int capacity, boolean fair)  LinkedBlockingQueue 基于有界的逻辑实现，不过其默认初始容量为 Integer.MAX_VALUE，成为无界队列。 SynchronousQueue 每个删除操作都要等待插入操作，反之每个插入操作也都要等待删除操纵。那么这个队列的容量时多少呢？0.</description>
    </item>
    
    <item>
      <title>Intro to Java Juc</title>
      <link>https://zacash.cn/posts/java-juc/</link>
      <pubDate>Tue, 14 Jun 2022 15:24:53 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-juc/</guid>
      <description>juc 通常指 java.util.concurrent 并发包，这个包集中了 Java 并发的各种基础工具类，具体包括几个方面：
 提供了比 synchronized 更高级的各种同步结构，包括 CountDownLatch、CyclicBarrier、Semaphore 等，可以实现更加丰富的多线程操作，比如利用 Semaphore 作为资源控制器，限制同时急性工作的线程数量。 各种线程安全的容器，如 ConcurrentHashMap、有序的 ConcurrentSkipListMap，或者类似快照机制，实现线程安全的动态数组 CopyOnWriteArrayList 等。 各种并发队列的实现，如各种 BlockingQueue 实现，比较典型的 ArrayBlockingQueue、SynchronousQueue 或针对特定场景的 PriorityBlockingQueue 等。 Executor 框架，可以创建各种不同类型的线程池，调度任务运行等，绝大部分情况下，不再需要自己从头实现线程池和任务调度器。  我们进行多线程编程，无非是达到几个目的：
 利用多线程提高程序的扩展能力，以达到业务对吞吐量的要求。 协调线程间调度、交互，以完成业务逻辑 线程间传递数据和状态，这同样是实现业务逻辑的需要。  Semaphore Semaphore 提供了 Java 版本的信号量实现，它通过控制一定数量的允许（permit）的方式，来达到限制通用资源访问的目的。可以想象一种场景，我们在机场等出租车排队时，当很多空闲出租车就位时，为防止过度拥挤，调度员指挥排队等待上车的人群一次进来5人上车，等这5人坐车出发，再放进来下一批，这和 Semaphore 的工作原理类似。
import java.util.concurrent.Semaphore;  public class SemaphoreSample {  public static void main(String[] args) {  Semaphore semaphore = new Semaphore(0);  for (int i = 0; i &amp;lt; 10; i++) {  Thread t = new Thread(new AbnormalSemaphoreWorker(semaphore));  t.</description>
    </item>
    
    <item>
      <title>Java File</title>
      <link>https://zacash.cn/posts/java-file/</link>
      <pubDate>Tue, 31 May 2022 21:37:14 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-file/</guid>
      <description>我们先来比较 IO 和 NIO 两种写入文件的实现：
 使用 IO 实现：  public void copyFile(File source, File dest) throws IOException {  try(InputStream in = new FileInputStream(source);  OutputStream out = new FileOutputStream(dest);) {  byte[] buffer = new byte[1024];  int length;  while((length = is.read(buffer)) &amp;gt;0) {  os.write(buffer, 0, length);  }  } }  利用 NIO 实现：  public void copyFile(File source, File dest) throws IOException {  try(FileChannel inChannel = new FileInputStream(source).</description>
    </item>
    
    <item>
      <title>Java IO</title>
      <link>https://zacash.cn/posts/java-io/</link>
      <pubDate>Thu, 26 May 2022 08:59:56 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-io/</guid>
      <description>Java IO 方式有很多种，基于不同的 IO 抽象模型和交互方式，可以进行简单区分。
  Blocking IO，主要实现是在 java.io 包，基于流模型实现，提供了我们熟知的如 File、InputStream、OutputStream 等抽象。交互方式是同步、阻塞的方式，也就是说，在读取 InputStream 或者写入 OutputStream 时，在读写操作完成前，线程会一直阻塞，它们之间的调用是可靠的线性顺序。
java.io 包的好处是代码比较简单、直观，缺点是 IO 效率和扩展性存在局限性，容易成为应用性能的瓶颈。很多时候，人们也把 java.net 下面提供的部分网络 API，如 Socket、HttpURLConnection 也归类到同步阻塞 IO 类库，因为网络通信同样是 IO 行为。
  Non-blocking IO，主要实现在 java.nio 包，于 Java 1.4 引入，通常称 NIO 框架，提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层的高性能数据操作方式。
NIO 在 Java7 中有了进一步的改进，也就是 NIO2，引入了异步非阻塞 IO 方式，又称为 AIO（Asynchronous IO）。异步 IO 操作基于事件和回调机制，可以简单理解为，应用操作直接返回，而不是阻塞在那里，当后台处理完成，操作系统会通知线程进行后续工作。
  一些基本概念  同步（synchronous）简单来说，同步是一种可靠的有序运行机制，当我们进行同步操作时，后续的任务时等待当前调用返回，才会进行下一步。 异步（asynchronous）与同步相反，其他任务不需要等待当前调用返回，通常依靠事件、回调等机制来实现任务间次序关系。 阻塞（blocking） 在进行阻塞操作时，当前线程会处于阻塞状态，无法从事其他任务，只有当条件就绪才能继续，如 Socket 新连接建立完毕，或数据读取、写入操作完成。 非阻塞（non-blocking）非阻塞不管 IO 操作是否结束，直接返回，相应操作在后台继续处理。  Java IO 简介 Java IO 简单的类图如下：</description>
    </item>
    
    <item>
      <title>JVM Basic - Rumtime Data Area</title>
      <link>https://zacash.cn/posts/jvm-basic-rt-data-area/</link>
      <pubDate>Thu, 24 Mar 2022 08:44:28 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/jvm-basic-rt-data-area/</guid>
      <description>前面说了类加载器，我们接下来看看运行时数据区(Run-Time Data Areas)
Run-Time Data Areas The pc Register JVM 可以支持多个线程同时运行，每个线程都有自己的 pc 寄存器(program counter register)。在任意时间点，任一线程在执行某个方法的代码，即该线程的当前方法(current method)。
 如果该方法是 native 的，pc 寄存器的值是 undefined。 如果该方法不是 native 的，pc 寄存器包含当前正在执行指令的地址。  JVM 的 pc 寄存器容量足够在特定平台上保存 returnAddress (returnAddress 保存着指向JVM操作码指令的指针) 或 native 指针。
JVM 栈 (Stacks) 每个线程都有一个私有的 JVM 栈，与线程同时创建。JVM 栈存储 栈帧(frames) 对于栈帧仅有两种操作：push 和 pop。JVM 栈的内存不必是连续的。
线程执行的每个 method calls 都存储在对应的栈中，包括入参、局部变量、中间计算和其他数据。方法完成后，JVM 将从栈中删除对应的条目，完成所有的方法调用后，栈将变为空，并且在终止线程前，销毁该栈。
存储在栈中的数据仅适用于对应线程，对别的线程不适用。因此，可以说局部数据是线程安全的。
 第一版的 Java 虚拟机规范 The Java® Virtual Machine Specification, JVM 栈 被称为 Java 栈 (Java stack)
 JVM 规范允许Java虚拟机栈具有固定大小，或者根据计算要求动态伸缩。 如果Java虚拟机栈的大小固定，则在创建每个Java虚拟机栈时可以独立选择它们的大小。</description>
    </item>
    
    <item>
      <title>JVM Basic - ClassLoader</title>
      <link>https://zacash.cn/posts/jvm-basic-classloader/</link>
      <pubDate>Wed, 23 Mar 2022 08:44:28 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/jvm-basic-classloader/</guid>
      <description>类加载顾名思义就是把类加载到 JVM 中，而输入一段二进制流到内存，之后经过一番解析、处理转化成可用的 class 类，这就是类加载要做的事情。
二进制流可以来源于 class 文件，或者通过字节码工具生成的字节码或者来自于网络都行，只要符合格式的二进制流，JVM 来者不拒。
类加载流程分为加载、连接、初始化三个阶段，连接还能拆分为：验证、准备、解析三个阶段。
类加载器（ClassLoader） 什么是类加载器 类加载器是 JRE 的一部分，负责在运行时将 Java 类动态加载到 JVM，有了类加载器，JVM 无需了解底层文件或文件系统即可运行Java程序。
类加载器不会一次将全部类加载到内存里，而是在程序需要时加载。
JVM 内置的类加载器类型   Bootstrap class loader
每个 JVM 实现必须有一个 bootstrap 类加载器。它负责 JDK 内部类，通常是 rt.jar 和位于 JAVA_HOME/jre/lib 目录下的其他核心类，该路径通常被称为引导路径(bootstrap path)。该类加载器由 C/C++ 语言实现。
  Extension class loader
Bootstrap 的子类加载器，它加载扩展目录 JAVA_HOME/jre/lib/ext 或 java.ext.dirs 指定路径下的类。它在 sun.misc.Launcher$ExtClassLoader 类中由 Java 语言实现。
  System/Application class loader
Extension 的子类加载器。它负责加载 App 层级的类，它加载在 classpath 环境变量、-classpath、-cp 命令行选项中找到的文件。它在 sun.misc.Launcher$AppClassLoader 类中由 Java 语言实现。
  自定义的类加载器 在需要从本地或网络加载类的场景，我们可能需要使用自定义类加载器。</description>
    </item>
    
    <item>
      <title>Process, Threads and Locks</title>
      <link>https://zacash.cn/posts/threads-and-locks/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/threads-and-locks/</guid>
      <description>&lt;p&gt;Threads are created and managed by the classes Thread and ThreadGroup. Creating a Thread object creates a thread, and that is the only way to create a thread. When the thread is created, it is not yet active; it begins to run when its start method is called.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM Basic - Compiler</title>
      <link>https://zacash.cn/posts/jvm-basic-compiler/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/jvm-basic-compiler/</guid>
      <description>&lt;p&gt;Class 文件的结构&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java Basic</title>
      <link>https://zacash.cn/posts/java-basic/</link>
      <pubDate>Fri, 03 Jul 2020 09:28:31 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-basic/</guid>
      <description>🌟答案的组织策略：知道是什么，知道为什么，知道怎么用
0.JDK 和 JRE 有什么区别？  JDK 包含 JRE，同时还包含编译 Java 源码的编译器 javac，还包含了很多 Java 程序调试和分析的工具。 加分项：除了 javac 还了解哪些命令行工具，它们的用途是什么？  jcmd：综合工具 jps：虚拟机进程状况工具 jinfo：虚拟机配置信息工具 jstat：虚拟机统计信息监视工具 jmap：Java 内存映像工具 jhat：虚拟机堆转储快照分析工具 jstack：Java 堆栈追踪工具   加分项jstat 用过吗，有哪些参数？  -class：监视类装载、卸载数量、总空间和类装载所耗费的时间 -gc：监视 Java 堆的状况，包括 Eden 区，两个 survior 区，老年代、永久代等的容量，已用空间、GC 时间合计等统计    1.equals 和 == 的差别？ 两者都是判断等价性，区别要从入参类型来看：
  对于基本类型，他们是比较值是否相等
  对于引用类型，他们是判断引用的是否为同一对象
  考察点：equals 的概念
  🌟实际要求：平时对源码的深挖意识即技术钻研和批判性思维
  考察目的：
 基础知识的扎实程度 候选人对技术的热情    2. String、StringBuffer、StringBuilder 有什么区别？ 经典回答  String 是典型的 Immutable 类，被声明为 final class，所有属性也都是 final 的，因此类似拼接、裁剪字符串的操作都会产生新的 String 对象，过多的进行这种操作对应用性能有影响。 StringBuffer 为了解决 String 拼接产生对象而提供的类，我们可以用 append 或 add 方法，进行字符串的拼接，StringBuffer 本质是线程安全的序列，它保证了线程安全，也随之带来额外的性能开销，所以除非有线程安全的需要，不然推荐使用 StringBuilder。 StringBuilder 是 Java 1.</description>
    </item>
    
  </channel>
</rss>
