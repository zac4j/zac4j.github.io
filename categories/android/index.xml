<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on Zac&#39;s blog</title>
    <link>https://zacash.cn/categories/android/</link>
    <description>Recent content in android on Zac&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Zac &amp;copy; 2022
</copyright>
    <lastBuildDate>Sun, 06 Sep 2020 11:11:13 +0800</lastBuildDate><atom:link href="https://zacash.cn/categories/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to Custom View</title>
      <link>https://zacash.cn/posts/custom-view-introduction/</link>
      <pubDate>Sun, 06 Sep 2020 11:11:13 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/custom-view-introduction/</guid>
      <description>&lt;p&gt;To create a custom view we can either extend an existing &lt;code&gt;View&lt;/code&gt; subclass(like EditText), or create our own subclass of View. By extending View directly, we can create an interactive UI element of any size and shape by overriding the &lt;code&gt;onDraw()&lt;/code&gt; method for the View to draw it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to Navigation</title>
      <link>https://zacash.cn/posts/intro-to-navigation/</link>
      <pubDate>Sun, 23 Aug 2020 11:11:13 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-navigation/</guid>
      <description>The Jetpack&amp;rsquo;s Navigation component helps us implement navigation feature in a single MainActivity, it contains 3 core parts: Navigation graph, NavHost, NavController.
NavHostFragment NavHostFragment acts as a host for the fragments in the navigation graph.
As the user moves between destination defined in the navigation graph, the NavHostFragment swaps the fragments in and out and manages the Fragment back stack.
In the activity_main.xml layout file, the NavHostFragment is represented by a fragment element with the name android:name=&amp;quot;androidx.</description>
    </item>
    
    <item>
      <title>Data Binding in Android</title>
      <link>https://zacash.cn/posts/databinding-in-android/</link>
      <pubDate>Sun, 23 Aug 2020 08:37:45 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/databinding-in-android/</guid>
      <description>&lt;p&gt;每次在 view 发生创建或重建，我们使用 &lt;code&gt;findViewById()&lt;/code&gt; 来获取 view 的引用时，Android 系统在运行时会遍历整个视图层级结构（view hierarchy）来查找它。在我们 app 的视图结构比较简单时没有问题，但是生产上的 app 一个 layout 可能有几十个 views，即使是最佳设计，也会存在嵌套的 views.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Are Touch Events Delivered</title>
      <link>https://zacash.cn/posts/how-are-touch-events-delivered/</link>
      <pubDate>Sat, 11 Jul 2020 08:37:45 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/how-are-touch-events-delivered/</guid>
      <description>根据例子来理解 Android 的事件传递
页面的布局结构
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;layout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;  xmlns:app=&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&amp;gt;   &amp;lt;data&amp;gt;  &amp;lt;variable  name=&amp;#34;viewModel&amp;#34;  type=&amp;#34;com.zac4j.system.data.TouchViewModel&amp;#34; /&amp;gt;  &amp;lt;/data&amp;gt;   &amp;lt;com.zac4j.system.ui.widget.CustomLayout  android:id=&amp;#34;@id/touch_sample_container&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt;   &amp;lt;Button  android:id=&amp;#34;@id/touch_sample_btn&amp;#34;  style=&amp;#34;@style/Widget.AppCompat.Button.Colored&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;wrap_content&amp;#34;  android:text=&amp;#34;Touch Me&amp;#34;  app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34;  app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34;  app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; /&amp;gt;   &amp;lt;/com.zac4j.system.ui.widget.CustomLayout&amp;gt; &amp;lt;/layout&amp;gt; TouchEvent 的传递 我们通常对 Button 创建点击事件:
touchSampleBtn.setOnClickListener {  Logger.i(TAG, &amp;#34;setOnClickListener&amp;#34;, &amp;#34;sampleBtn clicked&amp;#34;) } 可以先看下 View.dispatchTouchEvent() 的实现:
public boolean dispatchTouchEvent(MotionEvent event) {  .</description>
    </item>
    
    <item>
      <title>Intro to Hybrid App</title>
      <link>https://zacash.cn/posts/intro-to-hybrid-app/</link>
      <pubDate>Sat, 04 Jul 2020 15:45:14 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-hybrid-app/</guid>
      <description>Hybrid App 的几种方案   PhoneGap/Cordova
WebView 作为用户界面，以 Javascript 作为基本逻辑，以及和中间件通信，再由中间件访问底层 API 的方式，进行 App 开发。
  React Native/Weex
使用前端技术开发，通过 JSBridge 将 Javascript 代码解析的 Virtual DOM 传递到 Native 并使用原生进行渲染。
  Native/H5 混合开发
在原生的架构基础上，嵌入 WebView 业务逻辑，一般有 Native 和 Web 前端开发人员组成。Native 写好基本的架构以及 API 让 Web 开发人员开发页面以及大部分渲染。
  PhoneGap/Cordova PhoneGap 由 Apache 接管后改名为 Cordova，实际上是一个项目。Cordova 其实不应该称为 Hybrid 方案。因为，它的目标是全面使用前端技术开发移动应用，而不是前端和原生混合使用。不过，这些框架和 React Native 的目标是一致的：使用前端技术开发移动应用，提高工程效率。
Cordova 让前端技术尽可能多的完成开发工作，只有在前端无法直接调用的原生系统功能方面提供了前端可用的接口。主流的 Cordova 项目都将业务逻辑实现在一个 WebView 中，目标是让开发者使用前端技术就能完成一个应用开发。这种做法需要一个前提——前端技术可以解决移动开发的所有需求。
Cordova 架构图  Web App 是开发人员编写代码的地方，应用以网页的形式呈现，在一个 index.html 的本地页面文件中引用所需要的各种 Web 资源，如 CSS、Javascript、图片和影音文件等。App 的配置保存在 config.</description>
    </item>
    
    <item>
      <title>Intro to Service</title>
      <link>https://zacash.cn/posts/intro-to-service/</link>
      <pubDate>Sat, 04 Jul 2020 11:08:11 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-service/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Essential Design Pattern in Android</title>
      <link>https://zacash.cn/posts/design-pattern-in-android/</link>
      <pubDate>Sat, 20 Jun 2020 20:22:10 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/design-pattern-in-android/</guid>
      <description>什么是设计模式 设计模式的经典解释：软件工程中，设计模式是针对软件设计中给定上下文的常见问题的通用、可复用的解决方案。设计模式并非可以直接转换为源码或机器码的最终设计。相反，它是可以在不同场景下使用的解决问题的描述或模版。设计模式是程序员在设计 App 或系统时解决常见问题的最佳实践。
面向对象的设计模式通常展示了类和对象之间的关系和交互，而不是指定 App 的类或对象。
设计模式可以看作是一种编程的结构化方法，介于编程范式和具体算法之间。
设计模式根据其解决的问题分为三个类别：
 创造型模式（Creational Patterns）：提供创建类，对象的方法（Singleton, Dependency Inject, Builder等）。 结构型模式（Structural Patterns）：提供对象和类之间组合的方法（Composite, Bridge, Adapter 等）。 行为型模式（Bahavioral Patterns）：提供对象和类之间相互交流的方法（Command, Observer, Strategy 等）。  创造型模式 当我们用最基本的形式创建创建对象可能导致设计问题，或增加设计的复杂性。创造型设计模式通过控制对象的创建方式来解决这种问题。
Android 常用的创造型模式：
Builder Builder 模式主要解决创建复杂对象过程中遇到的问题：
 类如何创建复杂对象不同的表现形式(different presentations) 如何简化包含创建复杂对象的类  Builder 模式在 Android 中常见的应用是 AlertDialog 的创建过程：
AlertDialog.Builder(context)  .setTitle(&amp;#34;Builder Sample&amp;#34;)  .setMessage(&amp;#34;Builder Nessage&amp;#34;)  .setNegativeButton(&amp;#34;Cancel&amp;#34;, {_,_ -&amp;gt; })  .setPositiveButton(&amp;#34;OK&amp;#34;, {_, _ -&amp;gt; })  .show() Builder 模式通过这种方式解决问题：
 将复杂对象的各个部分的创建(creating)和组装(assembling)封装在一个独立的 Builder 对象中。 类将对象的创建委托给 Builder 对象，而不是直接创建。  Dependency injection 依赖注入（Dependency injection, 简称 Di）通常表示某个对象接收(receives)它依赖的对象(objects)的技术，这些依赖的对象称为依赖项(dependencies)。在典型的使用关系中，接收者被称为客户端（client），传递的对象被称为服务（service）。将服务传递给客户端的代码可能有很多种，被称为注入器（injector）, 注入器提供给客户端需要使用哪些服务。注入(injection)是指将依赖项（服务）传递给使用依赖项的对象（客户端）。</description>
    </item>
    
    <item>
      <title>Intro to Build System</title>
      <link>https://zacash.cn/posts/intro-to-build-system/</link>
      <pubDate>Fri, 05 Jun 2020 14:49:15 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-build-system/</guid>
      <description>构建流程（Build process） 简单来说构建流程就是涉及一系列工具和步骤将项目转换成 Android Application Package(APK)。典型的流程如下图所示：
图中所示有4个步骤：
 编译器将源码转换为 DEX 文件(Dalvik 可执行文件，包括运行在 Android 设备的字节码)，并将其他所有内容转换成编译后的资源文件。 APK Packager 将 DEX 文件和编译后的资源文件合并到一个 APK 里。 APK Packager 使用 keystore 为 APK 签名。 在生成最终的 APK 文件之前，Packager 会使用 zipalign 工具  自定义构建配置 Gradle 和 Android 插件可以帮助我们修改 build.gradle 中的这些配置：
构建类型 Build Types 构建类型定义 Gradle 在构建(building)和打包(packaging) App 时使用的某些属性，通常针对开发周期的不同阶段(different stages of development)进行配置。比如：
 debug 构建类型支持 debug 选项，并使用 debug key 为 APK 签名。 release 构建类型则会压缩(shrink)和混淆(obfuscate) APK，并使用 release key 为 APK 签名。  构建 App 时必须指定一个构建类型。可以参考 BuildType DSL，了解配置构建类型属性。</description>
    </item>
    
    <item>
      <title>Fragment in ViewPager</title>
      <link>https://zacash.cn/posts/fragment-in-viewpager/</link>
      <pubDate>Mon, 25 May 2020 20:55:31 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/fragment-in-viewpager/</guid>
      <description>使用 ViewPager 通常我们使用 ViewPager + TabLayout 主要有这些步骤：
 页面的布局结构:  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;  xmlns:app=&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;  xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;match_parent&amp;#34;  tools:context=&amp;#34;.MainActivity&amp;#34;  &amp;gt;   &amp;lt;com.google.android.material.appbar.AppBarLayout  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;wrap_content&amp;#34;  android:theme=&amp;#34;@style/AppTheme.AppBarOverlay&amp;#34;  &amp;gt;   ...   &amp;lt;com.google.android.material.tabs.TabLayout  android:id=&amp;#34;@+id/tabs&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;wrap_content&amp;#34;  android:background=&amp;#34;?attr/colorPrimary&amp;#34;  /&amp;gt;   &amp;lt;androidx.viewpager.widget.ViewPager  android:id=&amp;#34;@+id/view_pager&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;match_parent&amp;#34;  app:layout_behavior=&amp;#34;@string/appbar_scrolling_view_behavior&amp;#34;  /&amp;gt;  &amp;lt;/com.google.android.material.appbar.AppBarLayout&amp;gt; &amp;lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&amp;gt;  在 PagerAdapter 中会指定我们使用的 Fragment:  class SectionsPagerAdapter(private val context: Context,  fm: FragmentManager ) : FragmentPagerAdapter(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {   override fun getItem(position: Int): Fragment {  return SampleFragment.</description>
    </item>
    
    <item>
      <title>Intro to Fragments</title>
      <link>https://zacash.cn/posts/fragments/</link>
      <pubDate>Thu, 07 May 2020 20:30:50 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/fragments/</guid>
      <description>Activity 和 Fragment 生命周期的关联    Activity 状态 Fragment 生命周期方法回调 Fragment 状态     Created onAttach(), onCreate(), onCreateView(), onActivityCreated() Fragment 添加到 Activity 且视图已初始化   Started onStart() Fragment 活跃并可见   Resumed onResume() Fragment 活跃并获取焦点   Paused onPause() Fragment 暂停   Stopped onStop() Fragment 停止并不再可见   Destroyed onDestroyView(), onDestroy(), onDetach() Fragment 销毁    Fragment 重要的生命周期方法的使用  onAttach(): Fragment 在被 attach 到宿主 Activity 时回调，可以在该方法里检查宿主 Activity 是否实现了某个接口。 onCreateView(): Fragment 的 XML 布局在这个回调方法里初始化，系统调用这个方法来绘制 Fragment 的 UI。 onPause(): 可以在 Fragment 销毁前在该回调方法保存必要数据或状态。 onActivityCreated(): 在宿主 Activity 的 onCreate() 方法调用后回调该方法。可以在该方法做最终的初始化，如检索 View getView().</description>
    </item>
    
    <item>
      <title>Activity Start</title>
      <link>https://zacash.cn/posts/activity-launch/</link>
      <pubDate>Wed, 22 Apr 2020 08:10:27 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/activity-launch/</guid>
      <description>Task and Back Stack Task 就是执行某项任务时开启的一系列 Activity 的集合，这些 Activity 会按照打开的顺序排列在回退栈 (Back Stack) 中。
Activity 的四种启动模式 (launchMode) 如通过 startActivity(Intent) 启动 Activity A
 standard 模式：标准模式，创建 Activity A 实例并 push 到当前任务栈中 singleTop 模式：栈顶复用模式，如果当前栈顶是 Activity A ，直接复用并调用 onNewIntent(Intent)方法，不会创建新的实例 singleTask 模式：栈内复用模式，如果当前栈内含有 Activity A ，直接复用并调用 onNewIntent(Intent)方法，并清除栈内 Activity A 上方的所有 Activity 实例 singleInstance 模式：在新的任务栈开启 Activity A，如果新的任务栈和 Activity A 已创建，继续开启 Activity A 会调用其 onNewIntent(Intent)方法。  三种 Intent 标记 startActivity(Intent) 方法可以添加 3 种 Intent 标记：
  FLAG_ACTIVITY_NEW_TASK
在新的任务栈中启动 Activity A，如果当前运行的任务栈中已含有 Activity A，则将任务栈内的 Activity A 恢复到前台并调用 onNewInstent(Intent) 方法，此 flag 的功能同 singleTask 启动模式相同。</description>
    </item>
    
    <item>
      <title>Handler in Action</title>
      <link>https://zacash.cn/posts/handler-in-action/</link>
      <pubDate>Tue, 14 Apr 2020 21:53:54 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/handler-in-action/</guid>
      <description>Handler 在使用时常见的问题
1.Memory Leaks 1.1 背景 Handler 在使用下面这种实现方式处理消息时:
class MainActivity: Activity() {   private val mLeakedHandler = object: Handler() {  override fun handleMessage(msg: Message) {  super.handleMessage(msg)  }  } Android Lint 会发出这样的警告: This Handler class should be static or leaks might occur(anonymous android.os.Handler)
我们在 Handler 构造方法里可以看到：
public Handler(@Nullable Callback callback, boolean async) {  if (FIND_POTENTIAL_LEAKS) {  final Class&amp;lt;? extends Handler&amp;gt; klass = getClass();  if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.</description>
    </item>
    
    <item>
      <title>Handler in Details</title>
      <link>https://zacash.cn/posts/handler-in-code/</link>
      <pubDate>Sun, 12 Apr 2020 20:36:33 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/handler-in-code/</guid>
      <description>Handler 的创建  在主线程(UI Thread)中：  class MainActivity: Activity {  private val mLeakedHandler = object: Handler(Looper.getMainLooper()) {  override fun handleMessage(msg: Message) {  super.handleMessage(msg)  }  } }  在子线程中：  val thread = object: Thread() {  override fun run() {  val looper = Looper.prepare()  val handler = object: Handler(Looper.myLooper()) {  override fun handleMessage(msg: Message) {  super.handleMessage(msg)  }  }  Looper.loop()  } } 为什么在子线程创建 Handler 需要准备 Looper，而主线程却不用 因为 ActivityThread 中的 main() 方法已经为我们初始化了 Looper</description>
    </item>
    
    <item>
      <title>Check State Loss</title>
      <link>https://zacash.cn/posts/check-state-loss/</link>
      <pubDate>Tue, 11 Feb 2020 16:30:26 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/check-state-loss/</guid>
      <description>背景 最近做的一个 DialogFragment 在少数设备上会偶发闪退，Fabric 上的 Stacktrace 信息如下：
Fatal Exception: java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState  at android.support.v4.app.FragmentManagerImpl.checkStateLoss(SourceFile)  at android.support.v4.app.FragmentManagerImpl.enqueueAction(SourceFile)  at android.support.v4.app.BackStackRecord.commitInternal(SourceFile)  at android.support.v4.app.BackStackRecord.commit(SourceFile)  at android.support.v4.app.DialogFragment.show(SourceFile） 看起来是弹窗在 show 的时候，发生了 state loss，粗略 copy 了下 StackOverflow 上的回答，做了如下修改：
fun show(manager: FragmentManager?) {  try {  val ft = manager?.beginTransaction()  ft?.add(this, &amp;#34;tag of dialog&amp;#34;)  ft?.commitAllowingStateLoss()  } catch (e: Exception) {   } } 重写了 show 方法，允许 state loss，并加了异常捕捉，后续观察 Fabric， show 的时候的确没再出现异常情况，但 dismiss 的时候还是有闪退出现，异常信息如下：</description>
    </item>
    
  </channel>
</rss>
