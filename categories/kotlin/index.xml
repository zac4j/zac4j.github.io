<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin on Zac&#39;s blog</title>
    <link>https://zacash.cn/categories/kotlin/</link>
    <description>Recent content in kotlin on Zac&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Zac &amp;copy; 2022
</copyright>
    <lastBuildDate>Fri, 14 Aug 2020 07:27:09 +0800</lastBuildDate><atom:link href="https://zacash.cn/categories/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generics in Kotlin</title>
      <link>https://zacash.cn/posts/generics-in-kotlin/</link>
      <pubDate>Fri, 14 Aug 2020 07:27:09 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/generics-in-kotlin/</guid>
      <description>&lt;p&gt;val 和 var 与 variables 的 VALUES 相关，val 保护变量的值不变。in 和 out 与 variables 的 TYPES 相关，in 和 out 保证在范型的使用中，只有安全的类型才能传入或传出函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lambdas and High-order Functions</title>
      <link>https://zacash.cn/posts/lambdas-and-high-order-functions/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/lambdas-and-high-order-functions/</guid>
      <description>&lt;p&gt;除了传统命名的函数外，Kotlin 还支持 &lt;a href=&#34;https://kotlinlang.org/docs/reference/lambdas.html&#34;&gt;lambdas&lt;/a&gt;. &lt;em&gt;lambda&lt;/em&gt; 是组成函数的表达式，一个没有名称的函数。lambda 表达式可以作为数据传递。在其他语言中，lambda 被称为 &lt;em&gt;匿名函数（anonymous function）&lt;/em&gt;，&lt;em&gt;函数字面量（function literals）&lt;/em&gt; 或类似名称。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Top 10 Kotlin Questions in StackOverflow</title>
      <link>https://zacash.cn/posts/top-10-kotlin-questions/</link>
      <pubDate>Fri, 19 Jun 2020 22:03:29 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/top-10-kotlin-questions/</guid>
      <description>IntArray vs. Array&amp;lt;Int&amp;gt;   In java code
 IntArray: int[] Array&amp;lt;Int&amp;gt;: Integer[]    Create method:
 IntArray:  val intArray : IntArray = intArrayOf(1, 2, 3, 4, 5)  Array&amp;lt;Int&amp;gt;:  val arrayOfInts : Array&amp;lt;Int&amp;gt; = arrayOf(1, 2, 3, 4, 5)   Iterable vs. Sequence   Usage
 Iterable:  getPeople() .filter { it.age &amp;gt;= 18 } .map { it.name } .take(5)  Sequence: start with asSequence() and end with toList() or toSet()&amp;hellip;  getPeople().</description>
    </item>
    
    <item>
      <title>Coroutines Introduction</title>
      <link>https://zacash.cn/posts/coroutines-introduction/</link>
      <pubDate>Sat, 25 Apr 2020 11:40:03 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/coroutines-introduction/</guid>
      <description>协程用来解决什么问题 Kotlin 的协程提供了一种全新的并发处理方式，我们可以使用它来简化安卓异步执行的代码。
在 Android 平台上协程主要用来解决两个问题：
 处理耗时任务(Long running tasks) 保证主线程安全(Main-safety)  处理耗时任务 我们常规处理耗时任务是通过异步回调的方式，比如：
fun fetchDoc() {  get(&amp;#34;https://doc.qq.com&amp;#34;) { result -&amp;gt;  show(result)  } } 通过协程的方式是这样：
// 主线程执行 suspend fun fetchDoc() {  // 直接返回结果  val result = get(&amp;#34;https://doc.qq.com&amp;#34;)  show(result) }  // 主线程执行 suspend fun get(url: String) = withContext(Dispatchers.IO) {  /*IO 线程池执行*/ } 可以看到通过协程可以直接返回请求结果，而不用管理请求延迟和线程阻塞，这是如何实现的呢？
协程在常规的函数操作 —— invoke 和 return 之外，还新增了2项：
 suspend —— 称为挂起或暂停，用于暂停执行当前协程，并保存所有局部变量 resume —— 让暂停的协程继续执行  那么 suspend 是如何实现的呢？</description>
    </item>
    
  </channel>
</rss>
