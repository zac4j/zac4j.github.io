<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zac&#39;s Blog</title>
    <link>https://zacash.cn/</link>
    <description>Recent content on Zac&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2020, Copyright Zac</copyright>
    <lastBuildDate>Mon, 10 Aug 2020 09:00:00 -0400</lastBuildDate>
    
        <atom:link href="https://zacash.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introducing Indigo</title>
      <link>https://zacash.cn/post/introducing-indigo/</link>
      <pubDate>Mon, 10 Aug 2020 09:00:00 -0400</pubDate>
      
      <guid>https://zacash.cn/post/introducing-indigo/</guid>
      <description>&lt;p&gt;Indigo is a lightweight theme for &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; with &lt;a href=&#34;https://indieweb.org&#34;&gt;IndieWeb&lt;/a&gt; features baked in. It&amp;rsquo;s great for longer-form blogging, placing its focus on distraction-free reading and beautiful typefaces.&lt;/p&gt;
&lt;h2 id=&#34;indieweb-features&#34;&gt;IndieWeb features&lt;/h2&gt;
&lt;p&gt;A key feature of this theme is its support for IndieWeb features, including microformats and web sign-in.&lt;/p&gt;
&lt;h3 id=&#34;web-sign-in&#34;&gt;Web sign-in&lt;/h3&gt;
&lt;p&gt;Indigo handles web sign-in by setting the &lt;code&gt;authorization_endpoint&lt;/code&gt; to &lt;a href=&#34;https://indieauth.com&#34;&gt;IndieAuth.com&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IndieAuth.com is part of the &lt;a href=&#34;https://indieweb.org/why&#34;&gt;IndieWeb movement&lt;/a&gt; to take back control of your online identity. Instead of logging in to websites as &amp;ldquo;you on Twitter&amp;rdquo; or &amp;ldquo;you on Facebook&amp;rdquo;, &lt;strong&gt;you should be able to log in as just &amp;ldquo;you&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This allows you to sign in to certain services simply by providing your site&amp;rsquo;s domain name.&lt;/p&gt;
&lt;h3 id=&#34;microformats&#34;&gt;microformats&lt;/h3&gt;
&lt;p&gt;Indigo marks up content with appropriate &lt;a href=&#34;http://microformats.org&#34;&gt;microformats&lt;/a&gt;, which provides semantic definitions of your content to other software. Posts are marked up with &lt;code&gt;h-entry&lt;/code&gt; classes, like &lt;code&gt;p-name&lt;/code&gt;, &lt;code&gt;p-author&lt;/code&gt;, and &lt;code&gt;e-content&lt;/code&gt;, while the author bio is marked up with &lt;code&gt;h-card&lt;/code&gt; classes, including &lt;code&gt;u-photo&lt;/code&gt;, &lt;code&gt;u-url&lt;/code&gt;, &lt;code&gt;p-locality&lt;/code&gt;/&lt;code&gt;p-country-name&lt;/code&gt;, and &lt;code&gt;p-note&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;open-typefaces&#34;&gt;Open typefaces&lt;/h2&gt;
&lt;p&gt;Indigo uses a combination of three beautiful typefaces to render your words.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bboxtype.com/typefaces/FiraSans/#!layout=specimen&#34;&gt;Fira Sans&lt;/a&gt; for heading text&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://practicaltypography.com/charter.html&#34;&gt;Charter&lt;/a&gt; for body text&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; for monospaced text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Licenses are included in the theme’s &lt;code&gt;static/fonts&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Have a look at a couple of paragraphs of placeholder text using the wonderfully readable Charter:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer eleifend nulla ac elit venenatis posuere. Sed id aliquam arcu, et malesuada lectus. &lt;strong&gt;Donec et dignissim massa. Pellentesque in laoreet nibh. Pellentesque sagittis, libero quis vestibulum aliquam, ante risus imperdiet magna, at ornare dolor libero quis nunc.&lt;/strong&gt; Donec quis tempus purus. Cras ornare magna ac facilisis tristique. Nulla aliquet purus quis massa rutrum interdum ac at magna. Cras fermentum magna id orci viverra facilisis. Ut vitae lobortis nisl.&lt;/p&gt;
&lt;p&gt;Sed interdum tincidunt venenatis. Sed hendrerit dictum nisi, at dignissim orci consectetur quis. Aenean sed nisl et nisl placerat euismod. Proin hendrerit nulla at rhoncus molestie. Cras eu gravida erat, vestibulum ornare diam. &lt;em&gt;Praesent nunc arcu, ultrices et risus sed, dictum mattis dui. Maecenas vitae nisl at massa porta pellentesque&lt;/em&gt;. Donec eget urna eget nisl imperdiet scelerisque eget a mauris. Nam fringilla sem id vehicula rhoncus. Curabitur tincidunt massa mauris, facilisis placerat odio eleifend sit amet. Etiam nec vehicula sapien, at dignissim risus. Sed elit erat, lacinia eu vulputate at, semper eu nulla. Quisque a urna sed nulla viverra egestas nec quis nunc. Curabitur iaculis elit in orci sollicitudin suscipit.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;And code snippets look great with Fira Code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;article&amp;gt;
    &amp;lt;header&amp;gt;
    {{ if .Title }}
    &amp;lt;h2 class=&amp;quot;list-title&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
    &amp;lt;p class=&amp;quot;list-post-date&amp;quot;&amp;gt;
        &amp;lt;time datetime=&amp;quot;{{ .Date.Format &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot; | safeHTML }}&amp;quot;&amp;gt;
        {{ .PublishDate.Format &amp;quot;2 January, 2006 at 15:04 MST&amp;quot; }}
        &amp;lt;/time&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;div&amp;gt;
    {{ .Summary | plainify | safeHTML }}
    &amp;lt;/div&amp;gt;
    {{ if .Truncated }}
    &amp;lt;p&amp;gt;&amp;lt;a class=&amp;quot;read-more&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;Read more &amp;amp;rarr;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
    {{ end }}
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;contributions-welcome&#34;&gt;Contributions welcome&lt;/h2&gt;
&lt;p&gt;Indigo is distributed under the &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/blob/master/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;, so feel free to fork the repository and make it your own! If you&amp;rsquo;ve got ideas on how to improve the theme, let me know by &lt;a href=&#34;issue&#34;&gt;opening an issue in GitHub&lt;/a&gt; — but please be sure to review the documentation on &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/blob/master/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lambdas and High-order Functions</title>
      <link>https://zacash.cn/post/lambdas-and-high-order-functions/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/post/lambdas-and-high-order-functions/</guid>
      <description>&lt;p&gt;除了传统命名的函数外，Kotlin 还支持 &lt;a href=&#34;https://kotlinlang.org/docs/reference/lambdas.html&#34;&gt;lambdas&lt;/a&gt;. &lt;em&gt;lambda&lt;/em&gt; 是组成函数的表达式，一个没有名称的函数。lambda 表达式可以作为数据传递。在其他语言中，lambda 被称为 &lt;em&gt;匿名函数（anonymous function）&lt;/em&gt;，&lt;em&gt;函数字面量（function literals）&lt;/em&gt; 或类似名称。&lt;/p&gt;
&lt;h3 id=&#34;high-order-functions&#34;&gt;High-order functions&lt;/h3&gt;
&lt;p&gt;我们可以通过传递 lambda 到另一个函数，来创建 &lt;em&gt;高阶函数（high-order function）&lt;/em&gt;。&lt;code&gt;map&lt;/code&gt; 是一个高阶函数，你传入的 lambda 表达式是需要 &lt;em&gt;应用的转换（transformation to apply）&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&#34;create-lambdas&#34;&gt;Create lambdas&lt;/h3&gt;
&lt;p&gt;与命名函数一样，lambda 也可以有入参。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; waterFilter = { dirty: Int -&amp;gt; dirty / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;位于 &lt;code&gt;-&amp;gt;&lt;/code&gt; 左侧的为入参及入参类型，&lt;code&gt;-&amp;gt;&lt;/code&gt; 右侧即为需要执行的代码。将 lambda 表达式赋值给变量后，我们就可以像函数一样调用它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(waterFilter(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;// print =&amp;gt; 10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin 的函数语法与 lambdas 语法紧密相关，我们可以使用这种语法明确声明一个包含函数的变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; waterFilter: (Int) -&amp;gt; Int = {dirty -&amp;gt; dirty / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-high-order-function&#34;&gt;Create high-order function&lt;/h3&gt;
&lt;p&gt;我们可以使用 lambdas 来创建高阶函数，即函数的入参是另一个函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateDirty&lt;/span&gt;(dirty: Int, operation: (Int) -&amp;gt; Int): Int {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; operation(dirty)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们创建了一个 &lt;code&gt;updateDirty&lt;/code&gt; 函数，这个函数的第二个参数是另一个函数 &lt;code&gt;operation&lt;/code&gt;，&lt;code&gt;operation&lt;/code&gt; 函数接收一个 &lt;code&gt;Int&lt;/code&gt; 类型的入参并返回 &lt;code&gt;Int&lt;/code&gt;类型的值。函数体将第一个参数作为入参，调用了传入的函数。&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;updateDirty&lt;/code&gt; 函数的使用，我们可以 a).创建一个 lambda 传入，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; waterFilter: (Int) -&amp;gt; Int = {dirty -&amp;gt; dirty / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}
println(updateDirty(&lt;span style=&#34;color:#ae81ff&#34;&gt;20.&lt;/span&gt; waterFilter))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了创建 lambda 外，我们还可以 b).传入常规的命名函数，只是与直接 lambda 变量不同，我们需要使用 &lt;code&gt;::&lt;/code&gt; 操作符来传入命名函数的引用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;waterFilter&lt;/span&gt;(dirty: Int): Int = dirty / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
println(updateDirty(&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;waterFilter))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;last-parameter-call-syntax&#34;&gt;Last parameter call syntax&lt;/h3&gt;
&lt;p&gt;Kotlin 倾向于将带有函数的任意参数作为最后一个入参。在使用高阶函数时，Kotlin 有一种特殊的语法，称为 &lt;a href=&#34;https://kotlinlang.org/docs/reference/lambdas.html#passing-a-lambda-to-the-last-parameter&#34;&gt;last parameter call syntax&lt;/a&gt; 可以使代码更加简洁。这种情况下，我们可以传入一个 lambda 而无需放入括号内：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; dirty = &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
dirty = updateDirty(dirty) { dirty -&amp;gt; dirty / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; }
println(dirty)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Intro to Hybrid App</title>
      <link>https://zacash.cn/post/intro-to-hybrid-app/</link>
      <pubDate>Sat, 04 Jul 2020 15:45:14 +0800</pubDate>
      
      <guid>https://zacash.cn/post/intro-to-hybrid-app/</guid>
      <description>&lt;h2 id=&#34;hybrid-app-的几种方案&#34;&gt;Hybrid App 的几种方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PhoneGap/Cordova&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WebView 作为用户界面，以 Javascript 作为基本逻辑，以及和中间件通信，再由中间件访问底层 API 的方式，进行 App 开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;React Native/Weex&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用前端技术开发，通过 JSBridge 将 Javascript 代码解析的 Virtual DOM 传递到 Native 并使用原生进行渲染。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Native/H5 混合开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在原生的架构基础上，嵌入 WebView 业务逻辑，一般有 Native 和 Web 前端开发人员组成。Native 写好基本的架构以及 API 让 Web 开发人员开发页面以及大部分渲染。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;phonegapcordova&#34;&gt;PhoneGap/Cordova&lt;/h2&gt;
&lt;p&gt;PhoneGap 由 Apache 接管后改名为 Cordova，实际上是一个项目。Cordova 其实不应该称为 Hybrid 方案。因为，它的目标是全面使用前端技术开发移动应用，而不是前端和原生混合使用。不过，这些框架和 React Native 的目标是一致的：使用前端技术开发移动应用，提高工程效率。&lt;/p&gt;
&lt;p&gt;Cordova 让前端技术尽可能多的完成开发工作，只有在前端无法直接调用的原生系统功能方面提供了前端可用的接口。主流的 Cordova 项目都将业务逻辑实现在一个 WebView 中，目标是让开发者使用前端技术就能完成一个应用开发。这种做法需要一个前提——前端技术可以解决移动开发的所有需求。&lt;/p&gt;
&lt;h3 id=&#34;cordova-架构图&#34;&gt;Cordova 架构图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2018/7/23/164c7814e247d497?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;cordova arch&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web App 是开发人员编写代码的地方，应用以网页的形式呈现，在一个 index.html 的本地页面文件中引用所需要的各种 Web 资源，如 CSS、Javascript、图片和影音文件等。App 的配置保存在 config.xml 文件中。&lt;/li&gt;
&lt;li&gt;WebView 层用来呈现 UI。&lt;/li&gt;
&lt;li&gt;Plugin 主要用于在 Javascript 代码中调用各平台的 native 功能。Cordova 项目已包含一些核心的插件，如电池、摄像头、通讯录等。开发人员也可以自定义插件，其原理就是 Native 获取 Javascript 环境上下文，并直接在上面挂在对象或者方法，&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cordova-的优缺点&#34;&gt;Cordova 的优缺点&lt;/h3&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;快速构建UI，全 Web 开发一定程度上有利于 Web 前端人员快速开发。&lt;/li&gt;
&lt;li&gt;样式统一，在不同平台可以获得相同的交互和展示。&lt;/li&gt;
&lt;li&gt;便于调试，可以在浏览器上进行调试，工具丰富。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;兼容性，部分前端框架或语法在低版本 Android 手机上无法执行。&lt;/li&gt;
&lt;li&gt;功能有局限性，只适用于富UI场景，与底层交互需要做复杂的处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nativeh5-混合开发&#34;&gt;Native/H5 混合开发&lt;/h2&gt;
&lt;h3 id=&#34;原生基础架构-infra&#34;&gt;原生基础架构 Infra&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hybrid-Navigator，使用 URL 来标识每个页面，在 App 中指明 URL 跳转到此页面。所以需要一个路由表，根据 URL 找到。&lt;/li&gt;
&lt;li&gt;Hybrid-Router，可以传递复杂对象，CRUD 功能。&lt;/li&gt;
&lt;li&gt;Hybrid-Scheme，使用 Scheme 标识 web 调用原生的功能，比如修改 WebView 标题栏和状态栏颜色，获取 user_code 等。&lt;/li&gt;
&lt;li&gt;Hybrid-Container，js 代码运行容器。它其实是一个内嵌浏览器（WebView），Container 需要提供一些必要的原生支持，比如 Cookie，OAuth 授权，图片缓存等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nativeh5-技术原理jsbridge&#34;&gt;Native/H5 技术原理——JsBridge&lt;/h3&gt;
&lt;h4 id=&#34;h5-如何调原生方法&#34;&gt;H5 如何调原生方法&lt;/h4&gt;
&lt;p&gt;基于 WebView 的机制和开发的 API，主要有三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 注入，原理就是 Native 获取 Javascript 环境的上下文，并在上面挂载对象或者方法，使 js 可以直接调用。&lt;/li&gt;
&lt;li&gt;WebView 响应 js prompt/console/alert 方法，对应 WebChromeClient 中的 &lt;code&gt;onJsPrompt()&lt;/code&gt;/&lt;code&gt;onJsConsole()&lt;/code&gt;/&lt;code&gt;onJsAlert()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;li&gt;WebView 拦截 URL Scheme，对应 WebViewClient 中的 &lt;code&gt;shouldOverrideUrlLoading()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;native-如何调-h5-函数&#34;&gt;Native 如何调 H5 函数&lt;/h4&gt;
&lt;p&gt;原生 WebView 可以直接执行 js 代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;iOS:stringByEvaluatingJavaScriptFromString&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webview.stringByEvaluatingJavaScriptFromString(&amp;quot;alert(&#39;NativeCall&#39;)&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Android 4.4 以下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mWebView.loadUrl(&amp;quot;javascript:JSBridge.trigger(&#39;NativeCall&#39;)&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Android 4.4+&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;mWebView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;evaluateJavascript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JSBridge.trigger(&amp;#39;NativeCall&amp;#39;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ValueCallback&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onReceiveValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// js callback
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;定义拦截规则&#34;&gt;定义拦截规则&lt;/h4&gt;
&lt;p&gt;我们根据公司业务会制定一套 URL scheme 规则，比较类似常用的 &lt;code&gt;https://&lt;/code&gt; 或 &lt;code&gt;file:///&lt;/code&gt;，不过我们自定义的 scheme 可以是任意样式，比如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zapp://action?param1=xxx&amp;amp;param2=xxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样定义好的 scheme，h5 通过创建 iframe 方式发送请求。&lt;/p&gt;
&lt;h4 id=&#34;scheme-的拦截&#34;&gt;Scheme 的拦截&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;iOS 上：shouldStartLoadWithRequest&lt;/li&gt;
&lt;li&gt;Android: &lt;code&gt;WebViewClient.shouldOverrideUrlLoading()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;scheme-的回调&#34;&gt;Scheme 的回调&lt;/h4&gt;
&lt;p&gt;一般 Native 拦截 scheme ，处理完成后，调用 Bridge 的 callback 方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;mWebView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;evaluateJavascript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JSBridge.trigger(&amp;#39;NativeCall&amp;#39;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ValueCallback&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onReceiveValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// js callback
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;react-native-实现原理&#34;&gt;React Native 实现原理&lt;/h2&gt;
&lt;p&gt;React Native 并没有运行在浏览器引擎（WebView/V8）中。不像大部分前端框架是简化 DOM 树的处理，React Native 和 DOM 没有关系。React Native 重写了大部分系统 UI 组件，并在框架内处理好了 Javascript 和原生组件之间的调用和通信。开发者可以通过 React 风格的 Javascript 代码使用这些 React Native UI 组件来构建应用的UI。可以认为 React Native 实现了一个渲染引擎，使用 React 作为渲染引擎的编程语言。&lt;/p&gt;
&lt;h2 id=&#34;页面调用方案&#34;&gt;页面调用方案&lt;/h2&gt;
&lt;p&gt;简单的页面跳转，从 MainScreen 跳转到 SecondaryScreen&lt;/p&gt;
&lt;p&gt;Android 中的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;startActivity(Intent(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, SecondaryScreen.&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;iOS 中的实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-oc&#34; data-lang=&#34;oc&#34;&gt;SecondaryViewController *secondaryViewController = [[SecondaryViewController alloc] init];
[self.navigationController pushViewController:secondViewController animated:YES];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;随着项目逐渐增大，我们需要做一些模块化的工作。模块化基本的要求是解除模块间的依赖，我们需要一个间接的调用目标页面的方案。&lt;/p&gt;
&lt;h3 id=&#34;openurl-方案&#34;&gt;openURL 方案&lt;/h3&gt;
&lt;p&gt;在这些间接方案中，有很多是基于 iOS 提供的 UIApplicationDelegate 中的用于响应 URL 调用的钩子方法。&lt;/p&gt;
&lt;p&gt;在 iOS 8 中，该方法为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-oc&#34; data-lang=&#34;oc&#34;&gt;application:openURL:sourceApplication:annotation:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;iOS 9 中该方法被标记为 Deprecated，并提供了一个替代方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-oc&#34; data-lang=&#34;oc&#34;&gt;application:openURL:options:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们将这两个方法称为 &lt;code&gt;openURL&lt;/code&gt; 钩子方法。&lt;/p&gt;
&lt;p&gt;如果应用注册了一个 URL scheme。任何第三方应用，以及应用自身对该 URL 的调用，都会调起以上 &lt;code&gt;openURL&lt;/code&gt; 钩子方法。这就提供了一个在应用间通信的方法。同时这也是目前为止，iOS 系统中，应用间通信的唯一方式。&lt;/p&gt;
&lt;h2 id=&#34;react-native&#34;&gt;React Native&lt;/h2&gt;
&lt;p&gt;React Native 需要的技术栈比较特别，比较适合 Web 经验特别丰富，前端工程师特别优秀，但又缺乏优秀的客户端工程师的情况，React Native 是一个快速切入移动应用市场的技术选择。&lt;/p&gt;
&lt;h2 id=&#34;常见问题&#34;&gt;常见问题&lt;/h2&gt;
&lt;h3 id=&#34;内存管理&#34;&gt;内存管理&lt;/h3&gt;
&lt;p&gt;根据 adb shell 查看 app 占用内存信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看 app 基本信息&lt;/span&gt;
Zac:Sample Zac$ adb shell ps | grep com.guotai.dazhihui
u0_a674       &lt;span style=&#34;color:#ae81ff&#34;&gt;9858&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2205104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;268448&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.guotai.dazhihui
u0_a674      &lt;span style=&#34;color:#ae81ff&#34;&gt;10039&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1973628&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101852&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.guotai.dazhihui:remote
u0_a674      &lt;span style=&#34;color:#ae81ff&#34;&gt;10129&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1988412&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113528&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.guotai.dazhihui:pushservice

&lt;span style=&#34;color:#75715e&#34;&gt;# 未开启 WebView 时的内存占用信息&lt;/span&gt;
Zac:Sample Zac$ adb shell dumpsys meminfo com.guotai.dazhihui
Applications Memory Usage &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;in Kilobytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
...
App Summary
                       Pss&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                        ------
           Java Heap:    &lt;span style=&#34;color:#ae81ff&#34;&gt;21264&lt;/span&gt;
         Native Heap:    &lt;span style=&#34;color:#ae81ff&#34;&gt;35988&lt;/span&gt;
                Code:    &lt;span style=&#34;color:#ae81ff&#34;&gt;15648&lt;/span&gt;
               Stack:       &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;
            Graphics:    &lt;span style=&#34;color:#ae81ff&#34;&gt;72324&lt;/span&gt;
       Private Other:     &lt;span style=&#34;color:#ae81ff&#34;&gt;4528&lt;/span&gt;
              System:    &lt;span style=&#34;color:#ae81ff&#34;&gt;18578&lt;/span&gt;

               TOTAL:   &lt;span style=&#34;color:#ae81ff&#34;&gt;168382&lt;/span&gt;       TOTAL SWAP PSS:      &lt;span style=&#34;color:#ae81ff&#34;&gt;420&lt;/span&gt;
...

&lt;span style=&#34;color:#75715e&#34;&gt;# 开启 WebView 之后的内存占用&lt;/span&gt;
...
App Summary
                       Pss&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                        ------
           Java Heap:    &lt;span style=&#34;color:#ae81ff&#34;&gt;25136&lt;/span&gt;
         Native Heap:    &lt;span style=&#34;color:#ae81ff&#34;&gt;55420&lt;/span&gt;
                Code:    &lt;span style=&#34;color:#ae81ff&#34;&gt;51480&lt;/span&gt;
               Stack:       &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;
            Graphics:    &lt;span style=&#34;color:#ae81ff&#34;&gt;74704&lt;/span&gt;
       Private Other:     &lt;span style=&#34;color:#ae81ff&#34;&gt;6244&lt;/span&gt;
              System:    &lt;span style=&#34;color:#ae81ff&#34;&gt;29544&lt;/span&gt;

               TOTAL:   &lt;span style=&#34;color:#ae81ff&#34;&gt;242580&lt;/span&gt;       TOTAL SWAP PSS:      &lt;span style=&#34;color:#ae81ff&#34;&gt;376&lt;/span&gt;

内存
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Intro to Service</title>
      <link>https://zacash.cn/post/intro-to-service/</link>
      <pubDate>Sat, 04 Jul 2020 11:08:11 +0800</pubDate>
      
      <guid>https://zacash.cn/post/intro-to-service/</guid>
      <description>&lt;h2 id=&#34;查看进程基本信息&#34;&gt;查看进程基本信息&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;adb shell ps|grep com.tencent.mobileqq&lt;/code&gt; 可以查看 QQ 应用进程相关的基本信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Zac:tivi Zac$ adb shell ps | grep com.tencent.mobileqq
&lt;span style=&#34;color:#75715e&#34;&gt;# curr_user   pid                                                 process name&lt;/span&gt;
u0_a163       &lt;span style=&#34;color:#ae81ff&#34;&gt;6779&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1638852&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27152&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.tencent.mobileqq:MSF
u0_a163      &lt;span style=&#34;color:#ae81ff&#34;&gt;22001&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1915536&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;224004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.tencent.mobileqq
u0_a163      &lt;span style=&#34;color:#ae81ff&#34;&gt;27829&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1670960&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;236668&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.tencent.mobileqq:qzone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;进程的划分&#34;&gt;进程的划分&lt;/h2&gt;
&lt;p&gt;为了确定在内存不足时 kill 哪些进程，Android 会依据进程中运行的组件（Activity/Service/BroadcastReceiver）和这些组件的状态，划分每个进程的重要层次结构（importance hierarchy）。这些进程按重要性排序:&lt;/p&gt;
&lt;h3 id=&#34;前台进程foreground-process&#34;&gt;前台进程（foreground process）&lt;/h3&gt;
&lt;p&gt;前台进程是用户当前正在执行的操作所必须的进程，应用进程内的组件可能以不同形式让其处于前台：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity 处于用户正在交互状态（onResume() 方法已调用）&lt;/li&gt;
&lt;li&gt;BroadcastReceiver 正在运行（BroadcastReceiver.onReceive() 方法正在执行）&lt;/li&gt;
&lt;li&gt;Service 的回调正在执行代码（Service.onCreate(), Service.onStart(), Service.onDestroy()）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android 系统中只有少数这样的进程，而且只有在内存太低且无法运行这些进程时，才会 kill 这些进程。&lt;/p&gt;
&lt;h3 id=&#34;可见进程visible-process&#34;&gt;可见进程（visible process）&lt;/h3&gt;
&lt;p&gt;可见进程正在执行用户意识到的工作，因此 kill 这种进程可能对用户体验产生负面影响。这种进程的组件可以有如下形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity 可见但并不处于前台（onPause() 方法已调用），常见的例子比如在当前 Activity 展示一个弹窗。&lt;/li&gt;
&lt;li&gt;使用 &lt;em&gt;Service.startForeground()&lt;/em&gt; 方法启动的前台服务。&lt;/li&gt;
&lt;li&gt;特定功能的服务，如动态壁纸，输入法服务等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;服务进程service-process&#34;&gt;服务进程（service process）&lt;/h3&gt;
&lt;p&gt;服务进程是持有由 &lt;em&gt;Service.startService()&lt;/em&gt; 方法启动的 Service 进程。尽管这些进程用户并不是直接可见，但它做的通常是用户关心的事情，如后台上传/下载网络数据。&lt;/p&gt;
&lt;p&gt;长时间(&amp;gt; 30min)运行的服务可能会被降级，即下面介绍的缓存列表，这有助于避免长时间服务占用过多系统资源（如内存泄漏）。&lt;/p&gt;
&lt;h3 id=&#34;缓存进程cached-process&#34;&gt;缓存进程（cached process）&lt;/h3&gt;
&lt;p&gt;缓存进程是当前不需要的进程，当别的地方需要使用内存时，系统会优先 kill 掉这种进程。在一个运行良好的系统通常会有多个可用的缓存进程，并根据需要定期删除最老的进程。&lt;/p&gt;
&lt;p&gt;这些进程通常包含一个或多个当前用户不可见的 Activity 实例（已调用 onStop() 方法），只要 App 正确的实现 Activity 对应的生命周期方法，当系统终止此类进程时，它不会影响用户返回该 App 时的体验（在新进程中重新创建关联 Activity 时，它可以恢复之前保存的状态）。&lt;/p&gt;
&lt;p&gt;这些进程会被记录在缓存列表中，该列表的进程终止策略依赖平台的具体实现，原则上优先保留重要进程。其他的策略包括限制最大进程数量，以及限制进程运行时间等。&lt;/p&gt;
&lt;h2 id=&#34;终止进程low-memory-killer-daemon-lmkd&#34;&gt;终止进程（Low Memory Killer Daemon, lmkd）&lt;/h2&gt;
&lt;p&gt;Android lmkd 进程监控正在运行的系统内存状态，并通过杀死最不重要进程（least essential processes）来应对高内存压力，以使系统运行在可接收的水平。&lt;/p&gt;
&lt;h3 id=&#34;查看手机的内存阀值&#34;&gt;查看手机的内存阀值&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# root permission need&lt;/span&gt;
adb shell cat /sys/module/lowmemorykiller/parameters/minfree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;adj&#34;&gt;ADJ&lt;/h3&gt;
&lt;p&gt;Adj 定义在 &lt;a href=&#34;https://android.googlesource.com/platform/frameworks/base/+/be4e6aa/services/java/com/android/server/am/ProcessList.java&#34;&gt;frameworks/&amp;hellip;/services/java/com/android/server/am/ProcessList.java&lt;/a&gt; 中，&lt;code&gt;oom_adj&lt;/code&gt; 表示进程的 adj 值，一般在 -17～16 间取值，adj 值越大，优先级越低，&lt;code&gt;adj &amp;lt; 0&lt;/code&gt;的进程都是系统进程。&lt;code&gt;adj = 0&lt;/code&gt; 表示进程处于前台。&lt;/p&gt;
&lt;p&gt;通过命令查看 &lt;code&gt;pid = 4061&lt;/code&gt; 进程的 adj 值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# App 处于前台时&lt;/span&gt;
adb shell cat /proc/4061/oom_adj
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# App 处于后台时&lt;/span&gt;
Zac:tivi Zac$ adb shell cat /proc/4061/oom_adj
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;进程终止策略&#34;&gt;进程终止策略&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ProcessList&lt;/code&gt; 中定义的 &lt;code&gt;oomAdj&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// These are the various interesting memory levels that we will give to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// the OOM killer.  Note that the OOM killer only supports 6 slots, so we
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// can&amp;#39;t give it a different value for every possible kind of process.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; mOomAdj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    FOREGROUND_APP_ADJ&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; VISIBLE_APP_ADJ&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; PERCEPTIBLE_APP_ADJ&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
    BACKUP_APP_ADJ&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; CACHED_APP_MIN_ADJ&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; CACHED_APP_MAX_ADJ
&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在系统内存不足时，依次从 &lt;code&gt;CACHED_APP_MAX_ADJ -&amp;gt; .. -&amp;gt;  FOREGROUND_APP_ADJ&lt;/code&gt; 终止进程。&lt;/p&gt;
&lt;p&gt;看完进程我们再看看服务&lt;/p&gt;
&lt;h2 id=&#34;service-的生命周期&#34;&gt;Service 的生命周期&lt;/h2&gt;
&lt;p&gt;Service 的生命周期比 Activity 的要简单很多。但关注其如何创建销毁反而更加重要，因为服务可以在用户没有意识到的情况下在后台运行。&lt;/p&gt;
&lt;p&gt;Service 的生命周期可以遵循两条不同的途径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动服务
该服务在其他组件中调用 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; 时创建，然后无限运行，必须通过 &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#stopSelf()&#34;&gt;stopSelf()&lt;/a&gt; 来自行停止运行。此外，其他组件也可以通过调用 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#stopService(android.content.Intent)&#34;&gt;stopService()&lt;/a&gt; 来停止服务。服务停止后，系统会将其销毁。&lt;/li&gt;
&lt;li&gt;绑定服务
该服务在另一个组件（客户端）调用 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; 时创建。然后客户端通过 &lt;a href=&#34;https://developer.android.com/reference/android/os/IBinder.html&#34;&gt;IBinder&lt;/a&gt; 接口与 Service 进行进行通信。客户端可以通过调用 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#unbindService(android.content.ServiceConnection)&#34;&gt;unbindService()&lt;/a&gt; 来关闭连接。多个客户端可以绑定到相同服务，而且当所有绑定全部取消后，系统会销毁该服务。（不必调用 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#stopService(android.content.Intent)&#34;&gt;stopService()&lt;/a&gt; 来停止服务)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种状态并非完全独立，实际上是 &lt;strong&gt;可以共存&lt;/strong&gt; 的。例如可以使用 Intent 调用 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; 启动后台音乐服务。随后，可能用户需要加入控制播放器获取有关播放歌曲信息时，Activity 可以通过调用 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; 绑定到该服务。这种情况下，除非所有客户端都取消绑定，否则 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#stopService(android.content.Intent)&#34;&gt;stopService()&lt;/a&gt; 或 &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#stopSelf()&#34;&gt;stopSelf()&lt;/a&gt; 不会停止该服务。&lt;/p&gt;
&lt;h2 id=&#34;实现-service-生命周期回调&#34;&gt;实现 Service 生命周期回调&lt;/h2&gt;
&lt;p&gt;与 Activity 类似，Service 也拥有生命周期回调方法，可以通过实现这些方法来监控Service 状态的变化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.app.Service&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.content.Intent&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.os.IBinder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.support.annotation.Nullable&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Created by Zac on 2017/5/23.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SampleService&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Service &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; CHANNEL_NAME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 表示服务被 kill 之后的行为
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mStartMode&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 表示绑定该服务的 client
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; IBinder mBinder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 表示是否允许重新绑定
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; mAllowReind&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 服务被创建
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    startForeground&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * 创建定义的通知
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Notification&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getNotification&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String title&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String body&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Notification&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;appContext&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; CHANNEL_NAME&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setContentTitle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;title&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setContentText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;body&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setSmallIcon&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;smallIcon&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAutoCancel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IBinder &lt;span style=&#34;color:#a6e22e&#34;&gt;onBind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Intent intent&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 客户端通过 bindService() 方法绑定服务
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mBinder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onStartCommand&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Intent intent&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; startId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 组件调用 startService() 方法启动服务
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mStartMode&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onUnbind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Intent intent&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 所有绑定的客户端都已调用 unbindService() 方法解绑
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mAllowReind&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onRebind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Intent intent&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 客户端在onUnbind() 方法回调之后，调用 bindService() 方法绑定服务
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onRebind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;intent&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onDestroy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 服务不再被使用并被销毁
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDestroy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1256396-2b2f6bb1c5e9f4c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;service_lifecycle.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务的生命周期，左边显示了使用 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; 所创建的服务的生命周期，右边显示了 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; 所创建的服务的生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过这些方法，我们可以监控 Service 生命周期的两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Service 的 &lt;strong&gt;整个生命周期&lt;/strong&gt; 从调用 onCreate() 开始，到 onDestroy() 返回时结束。与 Activity 类似，Service 也在 onCreate() 中完成初始设置，并在 onDestroy() 中释放所有剩余资源。例如，音乐播放器可以在 onCreate() 中创建播放音乐的线程，然后在 onDestroy() 中停止该线程。无论 Service 是通过 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; 还是 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; 方法创建，都会调用 onCreate() 和 onDestroy() 方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service 的 &lt;strong&gt;有效生命周期&lt;/strong&gt; 从调用 &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#onStartCommand(android.content.Intent,int,int)&#34;&gt;onStartCommand()&lt;/a&gt; 或 &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#onBind(android.content.Intent)&#34;&gt;onBind()&lt;/a&gt; 方法开始。每种方法均有 Intent 对象，该对象分别来自 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; 和 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; 。对于启动服务，有效生命周期和整个生命周期同时结束。对于绑定服务，有效生命周期在 &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#onUnbind(android.content.Intent)&#34;&gt;onUnbind()&lt;/a&gt; 返回时结束。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管启动服务是通过 &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#stopSelf()&#34;&gt;stopSelf()&lt;/a&gt; 或 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#stopService(android.content.Intent)&#34;&gt;stopService()&lt;/a&gt; 来停止，但该服务没有相应的回调（没有 onStop() 回调）。因此，除非是绑定服务，否则在服务停止时，系统会将其在 onDestroy() 中销毁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上图说明了服务的典型回调方法。尽管该图分开介绍通过 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; 创建的服务和通过 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; 创建的服务，但是不管启动方式如何，任何服务均有可能允许客户端与其绑定。因此，最初使用 &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#onStartCommand(android.content.Intent,int,int)&#34;&gt;onStartCommand()&lt;/a&gt;（客户端调用 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; ）启动的服务仍有可能接收 &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#onBind(android.content.Intent)&#34;&gt;onBind()&lt;/a&gt; 的调用（客户端调用 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; 时）。&lt;/p&gt;
&lt;h2 id=&#34;service-使用时需要注意的问题&#34;&gt;Service 使用时需要注意的问题&lt;/h2&gt;
&lt;h3 id=&#34;何时使用-bounded-service-和-unbounded-server&#34;&gt;何时使用 Bounded service 和 Unbounded server&lt;/h3&gt;
&lt;p&gt;官方文档在 &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService&lt;/a&gt; 有描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Each call to startService() results in significant work done by the system to manage service lifecycle surrounding the processing of the intent, which can take multiple milliseconds of CPU time. Due to this cost, startService() should not be used for frequent intent delivery to a service, and only for scheduling significant work. Use bound services for high frequency calls.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大意是指 &lt;code&gt;startService()&lt;/code&gt; 方法开销比较大，因此在高频次调用服务的场景，最好使用 Bounded service，Unbounded service 仅用于安排重要工作。&lt;/p&gt;
&lt;h3 id=&#34;android-o-以上报-illegalstateexception&#34;&gt;Android O 以上报 IllegalStateException&lt;/h3&gt;
&lt;p&gt;Android O 加强了后台执行的限制，App 处于后台时不允许通过 &lt;code&gt;startService()&lt;/code&gt; 的形式启动服务，只能通过 &lt;code&gt;startForegroundService()&lt;/code&gt; 方法启动服务，而且 App 必须在创建服务后5s内调用该服务的 &lt;code&gt;startForeground()&lt;/code&gt; 方法。具体的实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.O) {
  startForegroundService(new Intent(MainActivity.&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, SampleService.&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;));
}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
  startService(new Intent(MainActivity.&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, SampleService.&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Java Basic</title>
      <link>https://zacash.cn/post/java-basic/</link>
      <pubDate>Fri, 03 Jul 2020 09:28:31 +0800</pubDate>
      
      <guid>https://zacash.cn/post/java-basic/</guid>
      <description>&lt;p&gt;🌟答案的组织策略：知道是什么，知道为什么，知道怎么用&lt;/p&gt;
&lt;h2 id=&#34;0jdk-和-jre-有什么区别&#34;&gt;0.JDK 和 JRE 有什么区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JDK 包含 JRE，同时还包含编译 Java 源码的编译器 javac，还包含了很多 Java 程序调试和分析的工具。&lt;/li&gt;
&lt;li&gt;加分项：除了 javac 还了解哪些命令行工具，它们的用途是什么？
&lt;ul&gt;
&lt;li&gt;jcmd：综合工具&lt;/li&gt;
&lt;li&gt;jps：虚拟机进程状况工具&lt;/li&gt;
&lt;li&gt;jinfo：虚拟机配置信息工具&lt;/li&gt;
&lt;li&gt;jstat：虚拟机统计信息监视工具&lt;/li&gt;
&lt;li&gt;jmap：Java 内存映像工具&lt;/li&gt;
&lt;li&gt;jhat：虚拟机堆转储快照分析工具&lt;/li&gt;
&lt;li&gt;jstack：Java 堆栈追踪工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加分项jstat 用过吗，有哪些参数？
&lt;ul&gt;
&lt;li&gt;-class：监视类装载、卸载数量、总空间和类装载所耗费的时间&lt;/li&gt;
&lt;li&gt;-gc：监视 Java 堆的状况，包括 Eden 区，两个 survior 区，老年代、永久代等的容量，已用空间、GC 时间合计等统计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1equals-和--的差别&#34;&gt;1.equals 和 == 的差别？&lt;/h2&gt;
&lt;p&gt;两者都是判断等价性，区别要从入参类型来看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于基本类型，他们是比较值是否相等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于引用类型，他们是判断引用的是否为同一对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考察点：equals 的概念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🌟实际要求：平时对源码的深挖意识即技术钻研和&lt;strong&gt;批判性思维&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考察目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础知识的扎实程度&lt;/li&gt;
&lt;li&gt;候选人对技术的热情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2java-中操作字符串有那些类它们之间有什么区别&#34;&gt;2.Java 中操作字符串有那些类？它们之间有什么区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;主要有：String，StringBuilder，StringBuffer&lt;/li&gt;
&lt;li&gt;区别：StringBuffer 和 StringBuilder 都继承自 AbstractStringBuilder，StringBuffer 具备线程安全性
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加分项&lt;/strong&gt;：String 源码分析
&lt;ul&gt;
&lt;li&gt;String 是 &lt;em&gt;final&lt;/em&gt; 关键字修饰 -&amp;gt; 对象的值不可变 -&amp;gt; 每次操作都会生成新的对象&lt;/li&gt;
&lt;li&gt;StringBuffer 和 StringBuilder 对象的值可变，但拼接字符串开销比较小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加分项&lt;/strong&gt;：StringBuffer 线程安全性分析（查源码、找 synchronized、线程锁）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用场景：并发必选 StringBuffer，迭代必选 StringBuilder，普通场景选 String，避免中途不必要的类型转换开销&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3hashmaphashtabletreemap-有什么区别&#34;&gt;3.HashMap、HashTable、TreeMap 有什么区别？&lt;/h2&gt;
&lt;p&gt;是什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上面3种数据结构都是最常见的 Map 接口的实现，是以 key-value 的形式存储和操作数据的容器类型。&lt;/li&gt;
&lt;li&gt;HashTable 是 Java 类库提供的一个 hash 实现，本身是同步的，不支持 null key 和 null value，由于同步性能开销，所以已经很少推荐使用了。&lt;/li&gt;
&lt;li&gt;HashMap 是应用广泛的哈希表实现，行为上大致与 HashTable 一致，主要区别在于 HashMap 不是同步的，支持 null key 和 null value 等。通常情况下，HashMap 进行 get 和 put 操作可以达到&lt;strong&gt;常数时间的性能&lt;/strong&gt;。所以大部分利用键值对存取场景的首选。&lt;/li&gt;
&lt;li&gt;TreeMap 则是基于红黑树的一种提供顺序访问的 Map，它的 get、put、remove 之类的操作都是 O(logn) 时间复杂度，具体顺序由可以指定的 Comparator 来决定，后者根据键的自然顺序来判断。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4内部类和静态嵌套类&#34;&gt;4.内部类和静态嵌套类&lt;/h2&gt;
&lt;h3 id=&#34;inner-class-vs-static-nested-class&#34;&gt;Inner class vs. Static nested class&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OuterClass&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StaticNestedClass&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InnerClass&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;嵌套类（Nested class）可以分为两类：静态和非静态。声明为静态的嵌套类称为静态嵌套类（static nested classes）。非静态嵌套类称为内部类（inner classes）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嵌套类是其封闭类（enclosing class）的成员。内部类可以访问封闭类的其他成员，即使它们被声明为私有的可以访问。静态嵌套类无权访问封闭类的其他成员。作为 OuterClass 的成员，嵌套类可以声明为 &lt;em&gt;private&lt;/em&gt;, &lt;em&gt;public&lt;/em&gt;, &lt;em&gt;protected&lt;/em&gt; 或 &lt;em&gt;package private&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;why-use-nested-classes&#34;&gt;Why Use Nested Classes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这是一种对仅在一个地方使用的类进行逻辑分组的方法&lt;/p&gt;
&lt;p&gt;如果一个类B仅对其他一个类A有用，那么将B嵌入类A将更合乎逻辑，嵌套将使 package 更精简。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增加封装&lt;/p&gt;
&lt;p&gt;对于同一层级的类A和类B，如果类B需要访问类A的成员，通常情况需要实例化A再调用A的成员。通过将B封装到A内，A的成员可以声明为 &lt;em&gt;private&lt;/em&gt;，同时B可以调用A的成员。此外B对外界完全隐藏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以增加代码可读性，便于维护&lt;/p&gt;
&lt;p&gt;嵌套类可以使它更靠近使用的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;静态嵌套类&#34;&gt;静态嵌套类&lt;/h3&gt;
&lt;p&gt;与类的方法和变量一样，静态嵌套类与外部类相关联。与静态方法一样，静态嵌套类不能直接引用封闭类中定义的实例变量或方法：它只能通过对象的引用来使用它们。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;静态嵌套类和它外部类的实例成员进行交互，就像对其他 top-level 类一样。实际上，静态嵌套类在行为上是顶级类，为了包装方便（for packaging convenience），该顶级类已嵌套在另一个顶级类中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建静态嵌套类通过：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;StaticNestedClass&lt;/span&gt; sKlass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;StaticNestedClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;内部类&#34;&gt;内部类&lt;/h3&gt;
&lt;p&gt;和实例方法及变量一样，内部类与其所在类的实例相关联，并且可以直接访问该对象的方法和字段。另外，由于内部类与实例相关联，因此它本身不能定义任何静态成员。&lt;/p&gt;
&lt;p&gt;内部类的实例只能存在于外部类实例中，且可以直接访问其外部类实例的方法和字段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;OuterClass outer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Instantiate inner class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;InnerClass&lt;/span&gt; inner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InnerClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Instantiate static nested class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;NestedClass&lt;/span&gt; nested &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;NestedClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;局部内部类和匿名内部类&#34;&gt;局部内部类和匿名内部类&lt;/h4&gt;
&lt;p&gt;局部内部类声明在别的类的实例方法内，匿名内部类与局部内部类相似，但写法是返回一次性对象的表达式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AnonymousClasses&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greetSomeone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String someone&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sayHello&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;// Local inner class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EnglishGreeting&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; HelloWorld &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                greetSomeone&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greetSomeone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String someone&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; someone&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        HelloWorld englishGreeting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EnglishGreeting&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Anonymous class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        HelloWorld frenchGreeting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HelloWorld&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tout le monde&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                greetSomeone&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tout le monde&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greetSomeone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String someone&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; someone&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Salut &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;序列化&#34;&gt;序列化&lt;/h3&gt;
&lt;p&gt;强烈不建议对内部类，包括本地和匿名类进行序列化。当 Java 编译器编译某些构造时，它将创建&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/reflect/member/methodparameterreflection.html#implcit_and_synthetic&#34;&gt;合成构造&lt;/a&gt;（synthetic constructs）。这些是类、方法、字段和其他在源码中没有对应构造方法的构造。合成构造可以使 Java 编译器无需更改 JVM 即可实现新的 Java 语言功能。但是，合成构造在不同的 Java 编译器中的实现可能有所不同，这意味着 .class 文件在不同的实现中也可能有所不同。因此，如果序列化一个内部类，然后使用其他 JRE 实现对其进行反序列化，则可能出现兼容性问题。&lt;/p&gt;
&lt;h2 id=&#34;5referenceref&#34;&gt;5.&lt;a href=&#34;https://community.oracle.com/blogs/enicholas/2006/05/04/understanding-weak-references&#34;&gt;Reference&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Package java.lang.ref 描述：
提供引用-对象类，该类支持与&lt;em&gt;垃圾回收器进行有限程度的交互&lt;/em&gt;。程序可以使用引用对象来维护对某个对象的引用，这样垃圾回收器可以收集后者的对象。垃圾回收器在确定给定对象的可达性更改后会通知程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引用对象封装了对某个其他对象的引用，因此该引用本身可以像其他任何对象一样进行检查和操作。引用对象提供三种类型，引用依次减弱：soft, weak, 和 phantom，每种类型都对应不同级别的可达性。软引用用于实现内存敏感型缓存**（Android SDK 不建议这样做）**，弱引用用于实现规范化映射，这些映射不会阻止回收其键或值。虚引用用于安排比 Java 终止机制更灵活的事前清理行动。&lt;/p&gt;
&lt;h3 id=&#34;strongreference&#34;&gt;StrongReference&lt;/h3&gt;
&lt;p&gt;Strong 是描述它们如何与 garbage collector 进行交互的。如果一个对象通过一系列强引用访问（强可达性），那个该对象不符合垃圾回收的条件。&lt;/p&gt;
&lt;h3 id=&#34;softreference&#34;&gt;SoftReference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在虚拟机引发 OutOfMemoryError 之前，确保清除所有软引用的对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不建议使用软引用做缓存&lt;/strong&gt;，运行时并没有足够的信息确定哪些引用需要保留，哪些需要清除，引用对象清除太早造成不必要的工作，引用清除太晚造成浪费内存。&lt;/li&gt;
&lt;li&gt;大多数 App 需要使用 LruCache 取代软引用。LruCache 具有有效的逐出策略，并允许用户调整分配的内存量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;weakreference&#34;&gt;WeakReference&lt;/h3&gt;
&lt;p&gt;弱引用可以利用垃圾回收器的能力来确定可达性，因此我们不必自己做。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top 10 Kotlin Questions in StackOverflow</title>
      <link>https://zacash.cn/post/top-10-kotlin-questions/</link>
      <pubDate>Fri, 19 Jun 2020 22:03:29 +0800</pubDate>
      
      <guid>https://zacash.cn/post/top-10-kotlin-questions/</guid>
      <description>&lt;h4 id=&#34;intarray-vs-arrayint&#34;&gt;IntArray vs. &lt;code&gt;Array&amp;lt;Int&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In java code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IntArray: int[]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array&amp;lt;Int&amp;gt;&lt;/code&gt;: Integer[]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IntArray:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; intArray : IntArray = intArrayOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Array&amp;lt;Int&amp;gt;&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; arrayOfInts : Array&amp;lt;Int&amp;gt; = arrayOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;iterable-vs-sequence&#34;&gt;Iterable vs. Sequence&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Usage&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iterable:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;getPeople()
.filter { it.age &amp;gt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; }
.map { it.name }
.take(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Sequence: start with &lt;code&gt;asSequence()&lt;/code&gt; and end with &lt;code&gt;toList()&lt;/code&gt; or &lt;code&gt;toSet()&lt;/code&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;getPeople().asSequence()
.filter { it.age &amp;gt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; }
.map { it.name }
.take(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
.toList()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iterable: use for small collections by default, might faster than the overhead using a &lt;code&gt;Sequence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sequence: use for &lt;code&gt;very large&lt;/code&gt; collections.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;iterate-a-collection&#34;&gt;Iterate a collection&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;eg.1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;.args.size - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    println(args[i])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.2, use Array&amp;rsquo;s &lt;code&gt;lastIndex&lt;/code&gt; extension property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;.args.lastIndex) {
    println(args[i])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg., use &lt;code&gt;until&lt;/code&gt; to create open ended range.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; until args.size) {
    println(args[i])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.4, use &lt;code&gt;indices&lt;/code&gt; extension property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; args.indices) {
    println(args[i])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.5&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (arg &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; args) {
    println(arg)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.6, use &lt;code&gt;forEach&lt;/code&gt; extension function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;args.forEach { arg -&amp;gt;
    println(arg)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.7, use &lt;code&gt;withIndex&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;((index, arg) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; args.withIndex()) {
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index: $index, arg: $arg&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.8, use &lt;code&gt;forEachIndexed&lt;/code&gt; functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;args.forEachIndexed { index, arg -&amp;gt;
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index: $index, arg: $arg&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sam-conversion&#34;&gt;SAM conversion&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SAM conversions only work for interfaces, not for abstract classes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This code will work fine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;button.setListener {
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following will not work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* This gives the button a lambda that will create an anonymous instance of an OnClickListener
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* every time the button is clicked, which is then just thrown away (never assigned anywhere,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* never invoked).
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
button.setListener {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;: OnClickListener {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;(button: Button) {
            println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked!&amp;#34;&lt;/span&gt;)
        }
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* This one declares a useless local function in a very simliar fashion
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
button.setListener {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;(button: Button) {
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked!&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/48284994/lambda-implementation-of-interface-in-kotlin&#34;&gt;SAM constructor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * If the interface is defined in Java, but the function that takes an instance of its defined in Kotlin,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * try to use a SAM constructor.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
 button.setListener(OnClickListener {
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked&amp;#34;&lt;/span&gt;)
 })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Explanation
|               | Java interface  | Kotlin interface  |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|
| Java method   | SAM conversion  | Object expression |
| Kotlin method | SAM constructor | Object expression |&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;static-things&#34;&gt;Static things&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If your class has &amp;ldquo;non-static&amp;rdquo; parts as well, put the &amp;ldquo;static&amp;rdquo; parts in a companion object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;() {...}
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;() {...}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If your class is completely static, replace &lt;code&gt;class&lt;/code&gt; with a singleton &lt;code&gt;object&lt;/code&gt; :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;() {...}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;And if you don&amp;rsquo;t want to always scope your calls as &lt;code&gt;Foo.x()&lt;/code&gt; but want to just use &lt;code&gt;x()&lt;/code&gt; instead, use a top level function:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// file Foo.kt
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;() {...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;For function, there has this table:
| Function declaration             | Kotlin usage | Java usage         |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
| Companion object                 | Foo.f()      | Foo.Companion.f(); |
| Companion object with @JvmStatic | Foo.f()      | Foo.f();           |
| Object                           | Foo.f()      | Foo.INSTANCE.f();  |
| Object with @JvmStatic           | Foo.f()      | Foo.f();           |
| Top level function               | f()          | UtilKt.f();        |
| Top level function with @JvmName | f()          | Util.f();          |&lt;/li&gt;
&lt;li&gt;For variable, here&amp;rsquo;s the reference:
| Variable declaration                           | Kotlin usage | Java usage          |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|
| Companion object                               | X.x          | X.Companion.getX(); |
| Companion object with @JvmStatic               | X.x          | X.getX();           |
| Companion object with @JvmField                | X.x          | X.x;                |
| Companion object with const                    | X.x          | X.x();              |
| Object                                         | X.x          | X.INSTANCE.getX();  |
| Object with @JvmStatic                         | X.x          | X.getX();           |
| Object with @JvmField                          | X.x          | X.x;                |
| Object with const                              | X.x          | X.x;                |
| Top level variable                             | x            | ConstKt.getX();     |
| Top level variable with @JvmField              | x            | ConstKt.x;          |
| Top level variable with const                  | x            | ConstKt.x;          |
| Top level variable with @JvmName               | x            | Const.getX();       |
| Top level variable with @JvmName and @JvmField | x            | Const.x;            |
| Top level variable with @JvmName and const     | x            | Const.x;            |&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6smart-cast-on-mutable-properties&#34;&gt;6.Smart cast on mutable properties&lt;/h4&gt;
&lt;p&gt;以下代码会报这种错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kotlin: Smart cast to &amp;lsquo;Toy&amp;rsquo; is impossible, because &amp;lsquo;toy&amp;rsquo; is a mutable property that could have been changed by this time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; toy: Toy? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (toy != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
            toy.chew()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原因：
因为 mutable 的变量&lt;code&gt;Dog&lt;/code&gt; 实例可能在&lt;code&gt;toy!=null&lt;/code&gt;检查后在另一条线程上被修改，而在 &lt;code&gt;toy.chew()&lt;/code&gt;执行时可能产生 NPE.&lt;/p&gt;
&lt;p&gt;可以做以下修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; toy: Toy? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; _toy = toy
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_toy != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
            _toy.chew()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临时 let 操作符，使用范围更广泛：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; toy: Toy? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;() {
        toy&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;let {
            it.chew()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;?. 操作符&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; toy: Toy? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;() {
        toy&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;chew()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;override-java-方法&#34;&gt;override Java 方法&lt;/h4&gt;
&lt;p&gt;假设 Java 中定义了接口 &lt;code&gt;OnClickListener&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnClickListener&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Button button&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Kotlin 中实现该接口，如果使用IDEA生成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KtListener&lt;/span&gt;: OnClickListener {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;(button: Button?): Unit {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name = button&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;?:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown button&amp;#34;&lt;/span&gt;
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked $name&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于我们知道不可能为 &lt;code&gt;null&lt;/code&gt; 的场景，可以这样写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KtListener&lt;/span&gt;: OnClickListener {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;(button: Button): Unit {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name = button.name
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked $name&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Intro to Build System</title>
      <link>https://zacash.cn/post/intro-to-build-system/</link>
      <pubDate>Fri, 05 Jun 2020 14:49:15 +0800</pubDate>
      
      <guid>https://zacash.cn/post/intro-to-build-system/</guid>
      <description>&lt;h3 id=&#34;构建流程build-process&#34;&gt;构建流程（Build process）&lt;/h3&gt;
&lt;p&gt;简单来说构建流程就是涉及一系列工具和步骤将项目转换成 Android Application Package(APK)。典型的流程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://developer.android.google.cn/images/tools/studio/build-process_2x.png&#34; alt=&#34;build-process&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中所示有4个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译器将源码转换为 DEX 文件(Dalvik 可执行文件，包括运行在 Android 设备的字节码)，并将其他所有内容转换成编译后的资源文件。&lt;/li&gt;
&lt;li&gt;APK Packager 将 DEX 文件和编译后的资源文件合并到一个 APK 里。&lt;/li&gt;
&lt;li&gt;APK Packager 使用 keystore 为 APK 签名。&lt;/li&gt;
&lt;li&gt;在生成最终的 APK 文件之前，Packager 会使用 &lt;a href=&#34;https://developer.android.com/studio/command-line/zipalign&#34;&gt;zipalign&lt;/a&gt; 工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自定义构建配置&#34;&gt;自定义构建配置&lt;/h3&gt;
&lt;p&gt;Gradle 和 Android 插件可以帮助我们修改 &lt;strong&gt;build.gradle&lt;/strong&gt; 中的这些配置：&lt;/p&gt;
&lt;h4 id=&#34;构建类型-build-types&#34;&gt;构建类型 Build Types&lt;/h4&gt;
&lt;p&gt;构建类型定义 Gradle 在构建(building)和打包(packaging) App 时使用的某些属性，通常针对开发周期的不同阶段(different stages of development)进行配置。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;debug 构建类型支持 debug 选项，并使用 debug key 为 APK 签名。&lt;/li&gt;
&lt;li&gt;release 构建类型则会压缩(shrink)和混淆(obfuscate) APK，并使用 release key 为 APK 签名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构建 App 时必须指定一个构建类型。可以参考 &lt;a href=&#34;https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html&#34;&gt;BuildType DSL&lt;/a&gt;，了解配置构建类型属性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;buildTypes &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    minifyEnabled &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    shrinkResources &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
    proguardFiles &lt;span style=&#34;color:#a6e22e&#34;&gt;getDefaultProguardFile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proguard-android-optimize.txt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proguard-rules.pro&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  debug &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    applicationIdSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.debug&amp;#34;&lt;/span&gt;
    debuggable &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  staging &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    initWith debug
    manifestPlaceholders &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;hostname:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;internal.zacash.cn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    applicationIdSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.debugStaging&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;产品类型-product-flavors&#34;&gt;产品类型 Product Flavors&lt;/h4&gt;
&lt;p&gt;Product flavors 表示我们可以向用户发布 App 不同的版本，如免费版和付费版。我们可以自定义 product flavor 来使用不同的代码和资源。&lt;/p&gt;
&lt;p&gt;Product flavors 支持与 &lt;code&gt;defaultConfig&lt;/code&gt; 相同的属性，这是因为 &lt;code&gt;defaultConfig&lt;/code&gt; 实际上属于 &lt;a href=&#34;http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ProductFlavor.html&#34;&gt;ProductFlavor&lt;/a&gt; 类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google Play 的&lt;a href=&#34;https://developer.android.com/google/play/publishing/multiple-apks&#34;&gt;多 APK&lt;/a&gt; 分发应用，是将同一 applicationId 分配给所有的 flavor，并为每个 flavor 分配不同的 versionCode。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;flavorDimensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;api&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;
productFlavors &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  demo &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    dimension &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;
    applicationIdSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.demo&amp;#34;&lt;/span&gt;
    versionNameSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-demo&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  full &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    dimension &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;
    applicationIdSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.full&amp;#34;&lt;/span&gt;
    versionNameSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-full&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  minApi21 &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    dimension &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;api&amp;#34;&lt;/span&gt;
    minSdkVersion &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;
    versionCode &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultConfig&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;versionCode&lt;/span&gt;
    versionNameSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-minApi21&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;构建变体-build-variants&#34;&gt;构建变体 Build Variants&lt;/h4&gt;
&lt;p&gt;Build variants 是由 build type 和 product flavor 组成，也是 Gradle 用来构建应用的配置。配置 Build variants 就是指配置组成它的 build type 和 product flavor。&lt;/p&gt;
&lt;p&gt;Gradle 创建的 build varuants 数量等于 productFlavors * buildTypes. Gradle 构建 APK 命名时，会先以高优先级的 flavorDimension 的 ProductFlavor 显示，而后是低优先级 flavorDimension 的 ProductFlavor，最后是 BuildType。比如上面的 ProductFlavor 和 BuildType 配置，在构建 APK 时对应的 Build Variants：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build Variants: [minApi21][Demo, Full][Debug, Release]&lt;/li&gt;
&lt;li&gt;APK 名称：app-[minApi21]-[demo, full]-[debug, release].apk&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;清单条目-manifest-entries&#34;&gt;清单条目 Manifest entries&lt;/h4&gt;
&lt;p&gt;我们可以在 build variants 中设置清单文件(AndroidManifest.xml)中的某些属性，这些构建值会替换清单文件中的现有值。如果我们要为模块生成多个 APK，这些 APK 有不同的应用名称、min SDK version 或 target SDK version，定义这些属性将会很有效。&lt;/p&gt;
&lt;h4 id=&#34;依赖项-dependencies&#34;&gt;依赖项 Dependencies&lt;/h4&gt;
&lt;p&gt;构建系统会管理来自本地文件系统以及来自远程代码库的项目依赖项。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fragment in ViewPager</title>
      <link>https://zacash.cn/post/fragment-in-viewpager/</link>
      <pubDate>Mon, 25 May 2020 20:55:31 +0800</pubDate>
      
      <guid>https://zacash.cn/post/fragment-in-viewpager/</guid>
      <description>&lt;h3 id=&#34;使用-viewpager&#34;&gt;使用 ViewPager&lt;/h3&gt;
&lt;p&gt;通常我们使用 ViewPager + TabLayout 主要有这些步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面的布局结构:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;androidx.coordinatorlayout.widget.CoordinatorLayout&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:context=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.MainActivity&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;com.google.android.material.appbar.AppBarLayout&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:theme=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@style/AppTheme.AppBarOverlay&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

    ...

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;com.google.android.material.tabs.TabLayout&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/tabs&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:background=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?attr/colorPrimary&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;androidx.viewpager.widget.ViewPager&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/view_pager&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_behavior=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@string/appbar_scrolling_view_behavior&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/com.google.android.material.appbar.AppBarLayout&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在 PagerAdapter 中会指定我们使用的 Fragment:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SectionsPagerAdapter&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; context: Context,
  fm: FragmentManager
) : FragmentPagerAdapter(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {

  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getItem&lt;/span&gt;(position: Int): Fragment {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; SampleFragment.newInstance(position)
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;(): Int {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; TAB_TITLES.size
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;给 ViewPager 设置 PagerAdapter:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;viewPager.adapter = pagerAdapter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;TabLayout 绑定 ViewPager:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;tabs.setupWithViewPager(viewPager)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pageradapter&#34;&gt;PagerAdapter&lt;/h3&gt;
&lt;p&gt;目前官方提供的 PagerAdapter 有 2 种，在源码中已介绍各自的使用场景(假设 offscreenPageLimit=1)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FragmentPagerAdapter&lt;/p&gt;
&lt;p&gt;适合有少量的几个 Fragment 页面，比如一组 tabs，用户访问的每个页面都会保存在内存中，内存占用可能比较大。&lt;/p&gt;
&lt;p&gt;对于满足 &lt;code&gt;offscreenPageLimit&lt;/code&gt; 的 Fragment ，其回调的方法是：onStop -&amp;gt; onDestroyView.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FragmentStatePagerAdapter&lt;/p&gt;
&lt;p&gt;适合有大量 Fragment 页面，类似于 ListView 工作的场景，页面不可见时，整个 Fragment 都会被销毁，只有 SavedState 会被保存。相较 FragmentPagerAdapter 内存占用更小。&lt;/p&gt;
&lt;p&gt;对于满足 &lt;code&gt;offscreenPageLimit&lt;/code&gt; 的 Fragment ，其回调的方法是：onStop -&amp;gt; onDestroyView -&amp;gt; onDestroy -&amp;gt; onDetach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;保存和恢复-state&#34;&gt;保存和恢复 State&lt;/h3&gt;
&lt;h4 id=&#34;保存-fragment-的-state&#34;&gt;保存 Fragment 的 State&lt;/h4&gt;
&lt;p&gt;对于使用 &lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt; 的场景，我们可能需要在 Fragment 销毁时保存一些数据，通常的做法是在 &lt;code&gt;onSaveInstanceState(outState)&lt;/code&gt; 中保存，在 &lt;code&gt;onCreate(savedInstanceState)&lt;/code&gt;、&lt;code&gt;onCreateView(savedInstanceState)&lt;/code&gt; 或 &lt;code&gt;onActivityCreated(savedInstanceState)&lt;/code&gt; 中恢复：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onSaveInstanceState&lt;/span&gt;(outState: Bundle) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onSaveInstanceState(outState)
    &lt;span style=&#34;color:#75715e&#34;&gt;// save instance state here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }

&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
    savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;let {
      &lt;span style=&#34;color:#75715e&#34;&gt;// restore instance state
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;保存-customview-的-state&#34;&gt;保存 CustomView 的 State&lt;/h4&gt;
&lt;p&gt;官方提供的 UI 控件内部都实现了 &lt;code&gt;onSaveInstanceState&lt;/code&gt; 和 &lt;code&gt;onRestoreInstanceState&lt;/code&gt; 方法，在页面销毁-重建时，这些控件可以保存-恢复 ViewState。对于自定义的 View，我们也需要实现这两个方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Parcelable &lt;span style=&#34;color:#a6e22e&#34;&gt;onSaveInstanceState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Parcelable superState &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onSaveInstanceState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    SavedState ss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SavedState&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;superState&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ss&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Parcelable state&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!(&lt;/span&gt;state &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; SavedState&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    SavedState ss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SavedState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSuperState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Git Basic</title>
      <link>https://zacash.cn/post/git-basic/</link>
      <pubDate>Fri, 15 May 2020 15:55:52 +0800</pubDate>
      
      <guid>https://zacash.cn/post/git-basic/</guid>
      <description>&lt;h3 id=&#34;problem-solving&#34;&gt;Problem Solving&lt;/h3&gt;
&lt;h4 id=&#34;authentication&#34;&gt;Authentication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Clear saved account &amp;amp; password&lt;/p&gt;
&lt;p&gt;Error: &lt;code&gt;fatal:Authentication failed for &#39;remote-url&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --system --unset credential.helper&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save account &amp;amp; password&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global credential.helper store&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remote&#34;&gt;Remote&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check remote url&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update remote url&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote set-url origin newRepoUrl&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Intro to Fragments</title>
      <link>https://zacash.cn/post/fragments/</link>
      <pubDate>Thu, 07 May 2020 20:30:50 +0800</pubDate>
      
      <guid>https://zacash.cn/post/fragments/</guid>
      <description>&lt;h3 id=&#34;activity-和-fragment-生命周期的关联&#34;&gt;Activity 和 Fragment 生命周期的关联&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Activity 状态&lt;/th&gt;
&lt;th&gt;Fragment 生命周期方法回调&lt;/th&gt;
&lt;th&gt;Fragment 状态&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Created&lt;/td&gt;
&lt;td&gt;onAttach(), onCreate(), onCreateView(), onActivityCreated()&lt;/td&gt;
&lt;td&gt;Fragment 添加到 Activity 且视图已初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Started&lt;/td&gt;
&lt;td&gt;onStart()&lt;/td&gt;
&lt;td&gt;Fragment 活跃并可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resumed&lt;/td&gt;
&lt;td&gt;onResume()&lt;/td&gt;
&lt;td&gt;Fragment 活跃并获取焦点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Paused&lt;/td&gt;
&lt;td&gt;onPause()&lt;/td&gt;
&lt;td&gt;Fragment 暂停&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stopped&lt;/td&gt;
&lt;td&gt;onStop()&lt;/td&gt;
&lt;td&gt;Fragment 停止并不再可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Destroyed&lt;/td&gt;
&lt;td&gt;onDestroyView(), onDestroy(), onDetach()&lt;/td&gt;
&lt;td&gt;Fragment 销毁&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;fragment-重要的生命周期方法的使用&#34;&gt;Fragment 重要的生命周期方法的使用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onAttach()&lt;/code&gt;: Fragment 在被 attach 到宿主 Activity 时回调，可以在该方法里检查宿主 Activity 是否实现了某个接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onCreateView()&lt;/code&gt;: Fragment 的 XML 布局在这个回调方法里初始化，系统调用这个方法来绘制 Fragment 的 UI。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onPause()&lt;/code&gt;: 可以在 Fragment 销毁前在该回调方法保存必要数据或状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onActivityCreated()&lt;/code&gt;: 在宿主 Activity 的 &lt;code&gt;onCreate()&lt;/code&gt; 方法调用后回调该方法。可以在该方法做最终的初始化，如检索 View &lt;code&gt;getView().findViewById(id)&lt;/code&gt;或恢复状态(restore state)。如果 Fragmnt 设置了 &lt;code&gt;setRetainInstance()&lt;/code&gt;，这个方法同样会被调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDestroyView()&lt;/code&gt;: Fragment 的 UI 布局被移除时调用，可以在该方法标记 Fragment 不再可见。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fragment-和-activity-间的连接&#34;&gt;Fragment 和 Activity 间的连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fragment 获取宿主 Activity：在 Fragment attach 到宿主 Activity 后，可以通过 &lt;code&gt;getActivity()&lt;/code&gt; 获得宿主 Activity 实例。&lt;/li&gt;
&lt;li&gt;Activity 获取添加的 Fragment：可以通过 &lt;code&gt;FragmentManager.findFragmentById(containerId)&lt;/code&gt;获取 Fragment 的实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fragment-的-backstack&#34;&gt;Fragment 的 BackStack&lt;/h4&gt;
&lt;p&gt;对于 Activity，系统管理着 Activity 的回退栈，而对于 Fragment，是宿主 Activity 管理着回退栈，对于需要响应返回键的 Fragment 页面，我们需要调用 &lt;code&gt;addToBackStack(name)&lt;/code&gt; 显式地将其添加到回退栈:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;fragmentTransaction.add(R.id.fragment_container, fragment)
fragmentTransaction.addToBackStack(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
fragmentTransaction.commit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码中我们给 &lt;code&gt;addToBackStack()&lt;/code&gt; 传入的 &lt;code&gt;null&lt;/code&gt; ，如果是需要调用 &lt;code&gt;FragmentManager.BackStackEntry&lt;/code&gt; 接口时，则必须传入具体的名称标记。
对于添加到 Activity 回退栈的 Fragment，当按下返回键，某个 Fragment 实例出栈时，其视图重建回调 &lt;code&gt;onCreateView()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;h4 id=&#34;activity-向-fragment-传递数据&#34;&gt;Activity 向 Fragment 传递数据&lt;/h4&gt;
&lt;p&gt;通常从 Activity 向 Fragment 传递数据，推荐使用 Fragment 的 &lt;code&gt;setArguments(Bundle)&lt;/code&gt; 方法，具体的流程是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newInstance&lt;/span&gt;(name: String) : SimpleFragment {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; fragment = SimpleFragment()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; args = Bundle(ARGS_NAME, name)
        fragment.arguments = argument
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fragment
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Activity 初始化该 Fragment 传入 &lt;code&gt;name&lt;/code&gt; 参数:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SimpleApp&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; ft = supportFragmentManager.beginTransaction()
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; fragment = SimpleFragment.newInstance(name)
ft.add(R.id.fragment_container, fragment).commit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Fragment 的 &lt;code&gt;onCreate()&lt;/code&gt; 或 &lt;code&gt;onCreateView()&lt;/code&gt; 的回调内，获取该参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arguments.containsKey(ARGS_NAME)) {
    mName = arguments.getString(ARGS_NAME);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;fragment-向-activity-传递数据&#34;&gt;Fragment 向 Activity 传递数据&lt;/h4&gt;
&lt;p&gt;对于 Activity 内实现 Fragment 内定义的接口，在 &lt;code&gt;Fragment.onAttach()&lt;/code&gt;方法获取宿主 Activity:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnPanelClickListener&lt;/span&gt; {
    void onClick()
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onAttach&lt;/span&gt;(context: Context) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onAttach(context)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (context &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; OnPanelClickListener) {
        mListener = context &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; OnPanelClickListener
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Intro to Coroutines</title>
      <link>https://zacash.cn/post/intro-to-coroutines/</link>
      <pubDate>Sat, 25 Apr 2020 11:40:03 +0800</pubDate>
      
      <guid>https://zacash.cn/post/intro-to-coroutines/</guid>
      <description>&lt;h3 id=&#34;协程用来解决什么问题&#34;&gt;协程用来解决什么问题&lt;/h3&gt;
&lt;p&gt;Kotlin 的协程提供了一种全新的并发处理方式，我们可以使用它来简化安卓异步执行的代码。&lt;/p&gt;
&lt;p&gt;在 Android 平台上协程主要用来解决两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理耗时任务(Long running tasks)&lt;/li&gt;
&lt;li&gt;保证主线程安全(Main-safety)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;处理耗时任务&#34;&gt;处理耗时任务&lt;/h4&gt;
&lt;p&gt;我们常规处理耗时任务是通过异步回调的方式，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchDoc&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://doc.qq.com&amp;#34;&lt;/span&gt;) { result -&amp;gt;
        show(result)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过协程的方式是这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 主线程执行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchDoc&lt;/span&gt;() {
    &lt;span style=&#34;color:#75715e&#34;&gt;// 直接返回结果
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; result = &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://doc.qq.com&amp;#34;&lt;/span&gt;)
    show(result)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 主线程执行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(url: String) = withContext(Dispatchers.IO) {
    &lt;span style=&#34;color:#75715e&#34;&gt;/*IO 线程池执行*/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到通过协程可以直接返回请求结果，而不用管理请求延迟和线程阻塞，这是如何实现的呢？&lt;/p&gt;
&lt;p&gt;协程在常规的函数操作 —— invoke 和 return 之外，还新增了2项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;suspend —— 称为挂起或暂停，用于暂停执行当前协程，并保存所有局部变量&lt;/li&gt;
&lt;li&gt;resume —— 让暂停的协程继续执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么 suspend 是如何实现的呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kotlin 使用堆栈帧来管理需要运行哪个函数及所有局部变量。suspend 协程时，系统会复制并保存当前的栈帧供后续使用，resume 协程时，系统会还原保存的栈帧，然后函数从暂停的位置继续执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上面的协程示例中，&lt;code&gt;get()&lt;/code&gt;函数在主线程上运行，但会在网络请求前暂停协程，请求完成时，&lt;code&gt;get()&lt;/code&gt;函数恢复协程。&lt;/p&gt;
&lt;h4 id=&#34;保证线程安全&#34;&gt;保证线程安全&lt;/h4&gt;
&lt;p&gt;Kotlin 提供了三种调度器(Dispatcher)供协程执行任务。协程可以自行暂停，调度器(Dispatcher)负责恢复。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Dispatcher&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;线程&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;任务设计&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Dispatcher.Main&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;主线程&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;UI 交互和轻量级任务&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;调用 suspend 函数、调用 UI 函数、 更新 LiveData&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dispatcher.IO&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;非主线程&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;磁盘和网络 IO 任务&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;数据库、文件、网络处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dispatcher.Default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;非主线程&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CPU 密集型任务&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;数组排序、JSON 解析、处理 Diff 判断&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上面的示例中，&lt;code&gt;get()&lt;/code&gt;函数 通过 &lt;code&gt;withContext(Dispatcher.IO)&lt;/code&gt; 创建一个在 IO 线程池内运行的代码块。&lt;/p&gt;
&lt;p&gt;如果某个函数任务涉及到磁盘、网络或者占用过多的 CPU 资源，都应该使用 &lt;code&gt;withContext(Dispatcher)&lt;/code&gt; 来确保可以在主线程安全地调用。&lt;/p&gt;
&lt;h3 id=&#34;追踪协程&#34;&gt;追踪协程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;协程自身并不能追踪正在处理的任务，使用代码来手动追踪上千个协程是十分困难的，我们虽然可以尝试对所有协程进行追踪，手动确保它们都完成或取消任务，但这样代码会十分复杂和臃肿。如果没有追踪协程，则可能诱发任务泄漏(work leak)，即耗时任务会持续地占用资源执行下去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了能够避免这种情况，Kotlin 引入了 &lt;strong&gt;结构化并发(structured concurrency)&lt;/strong&gt; 机制，遵循它可以帮助我们追踪所有运行的任务。我们可以使用结构化并发做到下面三件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取消任务 —— 取消某项无用的任务&lt;/li&gt;
&lt;li&gt;追踪任务 —— 追踪某项正在执行的任务&lt;/li&gt;
&lt;li&gt;发出错误信号 —— 任务异常时发出错误信号&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用-scope-来追踪协程&#34;&gt;使用 Scope 来追踪协程&lt;/h4&gt;
&lt;p&gt;Kotlin 中定义启动协程必须指定其 CoroutineScope, CoroutineScope 可以追踪或取消所有由它启动的协程。&lt;/p&gt;
&lt;p&gt;有两种方式能够启动协程，分别用于不同的场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;launch&lt;/code&gt; 方式启动新协程不会返回 result，适合不需要执行结果的场景&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async&lt;/code&gt; 方式启动新协程并允许我们使用 await 的挂起函数返回 result.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常我们应该使用 &lt;code&gt;launch&lt;/code&gt; 方式启动新协程。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;scope.launch {
    &lt;span style=&#34;color:#75715e&#34;&gt;// launch 可以调用 suspend 函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    fetchDoc()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;在-viewmodel-中启动协程&#34;&gt;在 ViewModel 中启动协程&lt;/h4&gt;
&lt;p&gt;当协程和 Android Architecture Components 结合时，我们应该在哪个组件使用协程呢？&lt;/p&gt;
&lt;p&gt;答案是 ViewModel，我们大部分任务都是在 ViewModel 中处理，而且 &lt;a href=&#34;https://developer.android.google.cn/topic/libraries/architecture/coroutines#lifecycle-aware&#34;&gt;AndroidX Lifecycle&lt;/a&gt; 从 2.1.0 版本开始已经引入扩展属性 &lt;code&gt;ViewModel.viewModelScope&lt;/code&gt;，可以更方便地在 ViewModel 中使用协程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainViewModel&lt;/span&gt;(): ViewModel() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUserDoc&lt;/span&gt;() {
        &lt;span style=&#34;color:#75715e&#34;&gt;// 启动新的协程
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        viewModelScope.launch {
            fetchDoc()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 viewModelScope 被清除时，它将自动取消所有它启动的协程，可以保证协程和 ViewModel 的生命周期是一致的。&lt;/p&gt;
&lt;h4 id=&#34;启动多个协程&#34;&gt;启动多个协程&lt;/h4&gt;
&lt;p&gt;可以使用 &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&#34;&gt;&lt;code&gt;coroutineScope&lt;/code&gt;&lt;/a&gt; 或 &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/supervisor-scope.html&#34;&gt;&lt;code&gt;supervisorScope&lt;/code&gt;&lt;/a&gt; 启动多个协程，结构化并发保证了当 &lt;code&gt;suspend&lt;/code&gt; 函数返回时，它所处理的任务也都完成了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchDocs&lt;/span&gt;() {
    coroutineScope {
        async {fetchDoc()}
        async {fetchPdf()}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin 确保使用 &lt;code&gt;coroutineScope&lt;/code&gt; 构造方法不让 &lt;code&gt;fetchDocs()&lt;/code&gt; 方法发生泄漏，会先将 &lt;code&gt;coroutineScope&lt;/code&gt; 自身挂起，等待它内部的所有协程完成时，再返回结果。&lt;/p&gt;
&lt;h4 id=&#34;异常处理&#34;&gt;异常处理&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;coroutineScope&lt;/code&gt; 和 &lt;code&gt;supervisorScope&lt;/code&gt; 两者都适合启动多个协程的场景，区别在于当启动的某一子协程出错时，coroutineScope 将会取消所有协程，而 supervisorScope 会继续执行剩余的协程。&lt;/p&gt;
&lt;p&gt;协程中来自 suspend 函数的异常会通过 resume 重新抛给调用方 (Invoker) 来处理，跟函数一样，我们可以用 try/catch 处理异常。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getError&lt;/span&gt;() {
    coroutineScope {
        async {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IllegalStateException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/kPvWOCkMjYRKJSTX4I5VKg&#34;&gt;在Android 开发中使用协程&lt;/a&gt;
&lt;a href=&#34;https://www.reddit.com/r/androiddev/comments/ftqe6s/&#34;&gt;Coroutines Discussion&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=_hfBv0a09Jc&#34;&gt;Introduction to Coroutines&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Activity Start</title>
      <link>https://zacash.cn/post/activity-launch/</link>
      <pubDate>Wed, 22 Apr 2020 08:10:27 +0800</pubDate>
      
      <guid>https://zacash.cn/post/activity-launch/</guid>
      <description>&lt;h3 id=&#34;task-and-back-stack&#34;&gt;Task and Back Stack&lt;/h3&gt;
&lt;p&gt;Task 就是执行某项任务时开启的一系列 Activity 的集合，这些 Activity 会按照打开的顺序排列在回退栈 (Back Stack) 中。&lt;/p&gt;
&lt;h4 id=&#34;activity-的四种启动模式-launchmode&#34;&gt;Activity 的四种启动模式 (launchMode)&lt;/h4&gt;
&lt;p&gt;如通过 &lt;code&gt;startActivity(Intent)&lt;/code&gt; 启动 Activity A&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standard 模式：标准模式，创建 Activity A 实例并 push 到当前任务栈中&lt;/li&gt;
&lt;li&gt;singleTop 模式：栈顶复用模式，如果当前栈顶是 Activity A ，直接复用并调用 &lt;code&gt;onNewIntent(Intent)&lt;/code&gt;方法，不会创建新的实例&lt;/li&gt;
&lt;li&gt;singleTask 模式：栈内复用模式，如果当前栈内含有 Activity A ，直接复用并调用 &lt;code&gt;onNewIntent(Intent)&lt;/code&gt;方法，并清除栈内 Activity A  上方的所有 Activity 实例&lt;/li&gt;
&lt;li&gt;singleInstance 模式：在新的任务栈开启 Activity A，如果新的任务栈和 Activity A 已创建，继续开启 Activity A 会调用其 &lt;code&gt;onNewIntent(Intent)&lt;/code&gt;方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三种-intent-标记&#34;&gt;三种 Intent 标记&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;startActivity(Intent)&lt;/code&gt; 方法可以添加 3 种 Intent 标记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在新的任务栈中启动 Activity A，如果当前运行的任务栈中已含有 Activity A，则将任务栈内的 Activity A 恢复到前台并调用 &lt;code&gt;onNewInstent(Intent)&lt;/code&gt; 方法，此 flag 的功能同 &lt;strong&gt;singleTask&lt;/strong&gt; 启动模式相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLAG_ACTIVITY_SINGLE_TOP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果待启动的 Activity A 已位于任务栈顶，则会调用该实例的 &lt;code&gt;onNewInstent(Intent)&lt;/code&gt;，此 flag 的功能同 &lt;strong&gt;singleTop&lt;/strong&gt; 启动模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果待启动的 Activity A 已存在于当前任务栈内，则任务栈内该 Activity A 上方的所有 Activity 都会被销毁，Activity A 恢复前台并调用的 &lt;code&gt;onNewIntent(Intent)&lt;/code&gt; 方法。&lt;em&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/em&gt; 通常和 &lt;em&gt;FLAG_ACTIVITY_NEW_TASK&lt;/em&gt; 结合使用，这是一种可以将另一个任务栈内已存在 Activity 响应 Intent 的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;taskaffinity-属性&#34;&gt;taskAffinity 属性&lt;/h4&gt;
&lt;p&gt;taskAffinity 表示 Activity 倾向于归属哪个任务栈. 默认情况下，一个 App 内的所有 Activity 有相同的 affinity，即会被安排在同一任务栈下。我们可以通过 taskAffinity 修改 Activity 的归属任务栈。&lt;/p&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动 Activity 的 intent 包含 &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; 标记时。&lt;/p&gt;
&lt;p&gt;对于 Activity A 通过 &lt;code&gt;startActivity(Intent)&lt;/code&gt; 方法启动 Activity B，在默认 standard 启动模式时，Activity B 会被 push 到 Activity A 所在的任务栈。但当传给 &lt;code&gt;startActivity(Intent)&lt;/code&gt; 的 intent 使用 &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; 标记时，系统会先寻找是否有和 Activity B 具有相同 affinity 的任务栈，如果有，则会将启动的 Activity B push 到该任务栈中，如果没有，创建新的任务栈。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; 创建新的任务栈时，当用户按下 &lt;em&gt;HOME&lt;/em&gt; 键离开该任务时，必须有方法供用户返回该任务。某些外部实体(如 Notification Manager) 通常在外部任务(external task)启动 Activity， 即在 &lt;code&gt;startActivity(Intent)&lt;/code&gt; 的 intent 使用 &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; 标记。如果你的 App 中某个 Activity 可能被外部实体(如 Notification Manager) 通过这种方式启动，需要确保该用户具有独立的方式(App Launcher)，返回到启动的任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 Activity 的 &lt;strong&gt;allowTaskReparenting&lt;/strong&gt; 属性设为 &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt;时。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;清除回退栈&#34;&gt;清除回退栈&lt;/h4&gt;
&lt;p&gt;默认情况下，App 置于后台一段时间后，系统会清除该 App 任务栈内除了 Root Activity 外所有的 Activity。当 App 再次回到前台时(回到该任务栈)时，只有 Root Activity 被恢复。Activity 有 3 种控制该特性的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;alwaysRetainTaskState&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当任务栈的 Root Activity 的该属性设为 &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt; 时，系统不会再回收任务栈内的其他 Activity，所有 Activity 都会在栈内长时间保留。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clearTaskOnLaunch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当任务栈的 Root Activity 的该属性设为 &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt; 时，系统在会在离开该任务栈时就清除所有 Activity。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;finishOnTaskLaunch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;clearTaskOnLaunch&lt;/code&gt; 相似，不过该属性仅适用于单一 Activity，不是整个任务栈。当某 Activity 的该属性设为 &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt; 时，系统会在离开该任务栈时立即清除该 Activity。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;开启任务&#34;&gt;开启任务&lt;/h4&gt;
&lt;p&gt;一般来说 App 的入口 Activity 的 intent-filter 会设置成这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;activity&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;intent-filter&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.action.MAIN&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.category.LAUNCHER&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
    ...
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种配置会在 Launcher App 中显示该 Activity 对应的的 icon 和 label，从而为用户提供启动 Activity 或从别的任务回到该任务的入口。&lt;/p&gt;
&lt;p&gt;正如前面介绍通过 &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; 创建新的任务，当用户按下 &lt;em&gt;HOME&lt;/em&gt; 键离开该任务时，必须有方法供用户返回该任务，这种方法就是 activity launcher。因此对于可以启动新任务的2种启动模式, &lt;code&gt;singleTask&lt;/code&gt; 和 &lt;code&gt;singleInstance&lt;/code&gt;，应该仅在 Activity 的 intent filter 有 &lt;a href=&#34;https://developer.android.com/reference/android/content/Intent#ACTION_MAIN&#34;&gt;ACTION_MAIN&lt;/a&gt; 和 &lt;a href=&#34;https://developer.android.com/reference/android/content/Intent#CATEGORY_LAUNCHER&#34;&gt;CATEGORY_LAUNCHER&lt;/a&gt; 修饰时使用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Handler in Action</title>
      <link>https://zacash.cn/post/handler-in-action/</link>
      <pubDate>Tue, 14 Apr 2020 21:53:54 +0800</pubDate>
      
      <guid>https://zacash.cn/post/handler-in-action/</guid>
      <description>&lt;h3 id=&#34;memory-leaks&#34;&gt;Memory Leaks&lt;/h3&gt;
&lt;h4 id=&#34;11-背景&#34;&gt;1.1 背景&lt;/h4&gt;
&lt;p&gt;1.Handler 在使用下面这种实现方式处理消息时:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; : Activity() {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mLeakedHandler = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;(msg: Message) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.handleMessage(msg)
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://tools.android.com/tips/lint-checks&#34;&gt;Android Lint&lt;/a&gt; 会发出这样的警告: &lt;code&gt;This Handler class should be static or leaks might occur(anonymous android.os.Handler)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.我们在 Handler 构造方法里同样可以看到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Callback callback&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; async&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;FIND_POTENTIAL_LEAKS&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Handler&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; klass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getClass&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;klass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAnonymousClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; klass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isMemberClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; klass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isLocalClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;klass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getModifiers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Modifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;STATIC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TAG&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The following Handler class should be static or leaks might occur: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                klass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCanonicalName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里会检测 Handler 的实现类是否为匿名类/成员类/局部类之一，然后再检测该实现类未使用 &lt;code&gt;static&lt;/code&gt; 关键字修饰，未使用的话便会有内存泄漏的警告。&lt;/p&gt;
&lt;p&gt;那么内存泄漏是如何产生的呢，为何加 static 就可以解决泄漏问题，实现是怎样的呢。&lt;/p&gt;
&lt;h4 id=&#34;12-handler-如何产生内存泄漏&#34;&gt;1.2 Handler 如何产生内存泄漏&lt;/h4&gt;
&lt;p&gt;在继续讨论之前我们先达成如下共识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入 MessageQueue 队列的 msg 对象，其 msg.target 便是对应的 Handler 对象，当 Looper 执行到该 msg 时，会调用 &lt;code&gt;Handler.handleMessage(Message)&lt;/code&gt; 处理消息。&lt;/li&gt;
&lt;li&gt;在 Java 中，非静态（Non-Static）内部类（InnerClass）或匿名类（AnonymousClass）会隐式的持有外部类的引用，同理，静态内部类就不会。&lt;/li&gt;
&lt;li&gt;我们在堆中创建内存而忘记删除它，就会导致了&lt;a href=&#34;https://www.geeksforgeeks.org/what-is-memory-leak-how-can-we-avoid/&#34;&gt;内存泄漏&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看如下的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; : AppCompatActivity() {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mHandler = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;(msg: Message) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.handleMessage(msg)
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mJob = Runnable { &lt;span style=&#34;color:#75715e&#34;&gt;/*do something*/&lt;/span&gt; }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        mHandler.postDelayed(mJob, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;1000L&lt;/span&gt;)
  
        finish()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码中，MainActivity 在 mHandler postDelay 任务后便立即销毁，此时主线程中的 mHandler 仍然隐式的持有外部 MainActivity 的引用，该引用会直到 &lt;code&gt;Handler.handleMessage(Message)&lt;/code&gt; 在 5min 后执行后消失，也就是 MainActivity 销毁后并不会被及时的 GC，MainActivity 内的资源得不到释放，从而导致内存泄露。&lt;/p&gt;
&lt;h4 id=&#34;13-如何避免内存泄露&#34;&gt;1.3 如何避免内存泄露&lt;/h4&gt;
&lt;p&gt;为了避免内存泄露我们可以使用弱引用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; : AppCompatActivity() {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OkHandler&lt;/span&gt;(activity: Activity) : Handler() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mActivity: WeakReference&amp;lt;Activity&amp;gt; = WeakReference(activity)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;(msg: Message) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; activity = mActivity.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (activity != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !activity.isFinishing) {
                &lt;span style=&#34;color:#75715e&#34;&gt;// execute task
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mJob = Runnable { &lt;span style=&#34;color:#75715e&#34;&gt;/*do something*/&lt;/span&gt; }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mHandler = OkHandler(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        mHandler.postDelay(mJob, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;1000L&lt;/span&gt;)

        finish()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Handler in Code</title>
      <link>https://zacash.cn/post/handler-in-code/</link>
      <pubDate>Sun, 12 Apr 2020 20:36:33 +0800</pubDate>
      
      <guid>https://zacash.cn/post/handler-in-code/</guid>
      <description>&lt;h3 id=&#34;handler-的创建&#34;&gt;Handler 的创建&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在主线程(UI Thread)中：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; : Activity {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mLeakedHandler = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;(msg: Message) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.handleMessage(msg)
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在子线程中：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; thread = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Thread&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() {
        Looper.prepare()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; handler = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;() {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;(msg: Message) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.handleMessage(msg)
            }
        }
        Looper.loop()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;为什么在子线程创建-handler-需要准备-looper而主线程却不用&#34;&gt;为什么在子线程创建 Handler 需要准备 Looper，而主线程却不用&lt;/h4&gt;
&lt;p&gt;因为 ActivityThread 中的 &lt;code&gt;main()&lt;/code&gt; 方法已经为我们初始化了 Looper&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Install selective syscall interception
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    AndroidOs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;install&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    Looper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;prepareMainLooper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    ActivityThread thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ActivityThread&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;attach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; startSeq&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sMainThreadHandler &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        sMainThreadHandler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getHandler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Looper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myLooper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setMessageLogging&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;
                LogPrinter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DEBUG&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActivityThread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    Looper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Main thread loop unexpectedly exited&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;handler-和-looper&#34;&gt;Handler 和 Looper&lt;/h3&gt;
&lt;h4 id=&#34;为什么使用-handler-就需要显式的调用-looperprepare-和-looperloop-呢&#34;&gt;为什么使用 Handler 就需要显式的调用 &lt;code&gt;Looper.prepare()&lt;/code&gt; 和 &lt;code&gt;Looper.loop()&lt;/code&gt; 呢&lt;/h4&gt;
&lt;p&gt;我们可以通过观察 Handler 的构造方法理解：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Callback callback&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; async&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    mLooper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Looper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myLooper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mLooper &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t create handler inside thread &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; that has not called Looper.prepare()&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    mQueue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mLooper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mQueue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mCallback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callback&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mAsynchronous &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; async&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Looper.myLooper()&lt;/code&gt; 的实现则是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Looper &lt;span style=&#34;color:#a6e22e&#34;&gt;myLooper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么 sThreadLocal 在哪里 set 的呢？答案是 &lt;code&gt;Looper.prepare()&lt;/code&gt; 方法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; quitAllowed&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Only one Looper may be created per thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    sThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Looper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;quitAllowed&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 Handler 和 Looper 是绑定的关系，每个 Handler 只会存在一个线程和 Looper，Looper 内的 ThreadLocal 标识对应的线程。&lt;/p&gt;
&lt;h3 id=&#34;handler-的使用&#34;&gt;Handler 的使用&lt;/h3&gt;
&lt;p&gt;根据官方文档的介绍，Handler 通常有2种用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Schedule to be executed at some point in the future:
Schedule Message 和 Runnable 比较容易理解，Handler 提供了如 &lt;code&gt;sendMessageAtTime(Message, long)&lt;/code&gt; 和 &lt;code&gt;postAtTime(Runnable, long)&lt;/code&gt; 方法，可以设定在未来某个时刻执行任务。&lt;/li&gt;
&lt;li&gt;Enqueue an action to be performed on a different thread than your own:
在别的线程执行任务，我们通常的应用就是在子线程处理耗时任务后，我们可以通过 &lt;code&gt;Handler(getMainLooper())&lt;/code&gt; 来执行更新 UI 的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;handler-和-messagequeue&#34;&gt;Handler 和 MessageQueue&lt;/h3&gt;
&lt;p&gt;观察源码可以发现 handler 的 &lt;code&gt;sendMessage(msg)&lt;/code&gt;、&lt;code&gt;sendMessageDelayed(msg, timeMillis)&lt;/code&gt;、&lt;code&gt;post(runnable)&lt;/code&gt; 方法最后都是通过调用 &lt;code&gt;sendMessageAtTime(msg, uptimeMillis)&lt;/code&gt; 实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessageAtTime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; Message msg&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; uptimeMillis&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    MessageQueue queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mQueue&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;queue &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        RuntimeException e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; sendMessageAtTime() called with no mQueue&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Looper&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; enqueueMessage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;queue&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uptimeMillis&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;Handler.mQueue&lt;/code&gt; 是在 Handler 构造方法里通过 &lt;code&gt;mLooper.mQueue&lt;/code&gt; 获取，而 &lt;code&gt;Looper.mQueue&lt;/code&gt; 是在 Looper 初始化时创建:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// android/os/Handler.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Callback callback&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; async&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    mLooper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Looper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myLooper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mLooper &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t create handler inside thread &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; that has not called Looper.prepare()&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    mQueue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mLooper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mQueue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mCallback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callback&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mAsynchronous &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; async&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// android/os/Looper.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Looper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; quitAllowed&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    mQueue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MessageQueue&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;quitAllowed&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    mThread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到像官方文档描述的那样，每个 Handler 实例都关联着一条线程以及这条线程的消息队列(Each Handler instance is associated with a single thread and that thread&amp;rsquo;s message queue)。&lt;/p&gt;
&lt;h4 id=&#34;消息如何入列&#34;&gt;消息如何入列&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;sendMessageAtTime()&lt;/code&gt; 方法最后返回了 &lt;code&gt;Handler.enqueueMessage()&lt;/code&gt; 的值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enqueueMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; MessageQueue queue&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; Message msg&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; uptimeMillis&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;workSourceUid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ThreadLocalWorkSource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mAsynchronous&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAsynchronous&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enqueueMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uptimeMillis&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Handler.enqueueMessage()&lt;/code&gt; 调用的 &lt;code&gt;MessageQueue.enqueueMessage()&lt;/code&gt; 实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enqueueMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Message msg&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; when&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Message must have a target.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isInUse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; This message is already in use.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mQuitting&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            IllegalStateException e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                    msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; sending message to a Handler on a dead thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            Log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TAG&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;recycle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;markInUse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; when&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        Message p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mMessages&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; needWake&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// New head, wake up the event queue if blocked.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            mMessages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mBlocked&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// Inserted within the middle of the queue.  Usually we don&amp;#39;t have to wake
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// up the event queue unless there is a barrier at the head of the queue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// and the message is the earliest asynchronous message in the queue.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mBlocked &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAsynchronous&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            Message prev&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(;;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;needWake &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAsynchronous&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// invariant: p == prev.next
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// We can assume mPtr != 0 because mQuitting is false.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;needWake&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            nativeWake&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mPtr&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们分开来看，这里 &lt;code&gt;msg.target&lt;/code&gt; 即消息对应的 handler, 在 &lt;code&gt;Handler.enqueueMessage()&lt;/code&gt; 方法有赋值。&lt;/p&gt;
&lt;p&gt;MessageQueue 并没有队列的数据结构，而是以单链表的形式存储 msg，&lt;code&gt;mMessages&lt;/code&gt; 为当前链表头部的消息，我们称为 head_msg，当前传入的消息称为 current_msg，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// New head, wake up the event queue if blocked.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mMessages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mBlocked&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;if&lt;/code&gt; 的判断是，如果:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1).当前队列没有 head_msg&lt;/li&gt;
&lt;li&gt;2).current_msg 是需要立即执行&lt;/li&gt;
&lt;li&gt;3).current_msg 的执行时间在 head_msg 执行时间之前&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则将 head_msg 标记为 current_msg 的下一条消息，current_msg 标记为头部消息，并且唤醒当前阻塞的队列。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Inserted within the middle of the queue.  Usually we don&amp;#39;t have to wake
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// up the event queue unless there is a barrier at the head of the queue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// and the message is the earliest asynchronous message in the queue.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mBlocked &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAsynchronous&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    Message prev&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(;;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;needWake &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAsynchronous&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// invariant: p == prev.next
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;else&lt;/code&gt; 内的逻辑是，根据 current_msg 的执行时间在消息队列中找到对应的位置入列。&lt;/p&gt;
&lt;h4 id=&#34;何时执行入列的消息&#34;&gt;何时执行入列的消息&lt;/h4&gt;
&lt;p&gt;答案就是在子线程使用 handler 时显式调用的 &lt;code&gt;Looper.loop()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// android/os/Looper.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Looper me &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; myLooper&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;me &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Looper; Looper.prepare() wasn&amp;#39;t called on this thread.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; MessageQueue queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; me&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mQueue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(;;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Message msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// might block
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// No message indicates that the message queue is quitting.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dispatchMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception exception&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; exception&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;recycleUnchecked&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Looper.loop()&lt;/code&gt; 的实现就是在无限循环中不断从消息队列中取出 msg，并在 &lt;code&gt;msg.target&lt;/code&gt;即 handler 中 &lt;code&gt;dispatchMessage&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dispatchMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; Message msg&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;callback&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        handleCallback&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mCallback &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mCallback&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        handleMessage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;msg.callback&lt;/code&gt; 对应的是 &lt;code&gt;Handler.post(runnable)&lt;/code&gt; 传递的 Runnable 对象，而 &lt;code&gt;mCallback.handleMessage(msg)&lt;/code&gt; 或 &lt;code&gt;handleMessage(msg)&lt;/code&gt; 则是实例话 Handler 对象时复写的方法。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;Handler 帮助我们处理 Message 和 Runnable 对象，每个 Handler 实例都关联着一个线程以及这个线程的 MessageQueue。当你创建一个新的 Handler 对象时，它将与当前所在的线程(UI/Work Thread)和 MessageQueue 绑定在一起，通过 Handler 发出的 Message 或者 Runnable(msg.callback) 会根据执行时间插入 MessageQueue，Looper 会持续不断的从 MessageQueue 取出可执行的 Message 通过 Handler.handleMessage(msg) 处理。&lt;/p&gt;
&lt;p&gt;如下图所示：&lt;img src=&#34;https://i1.wp.com/tutorial.eyehunts.com/wp-content/uploads/2018/08/Android-Handler-Background-Thread-Communicate-with-UI-thread-1.png?resize=1024%2C621&amp;amp;ssl=1&#34; alt=&#34;handler&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Basic</title>
      <link>https://zacash.cn/post/hugo-basic/</link>
      <pubDate>Sat, 04 Apr 2020 09:25:04 +0800</pubDate>
      
      <guid>https://zacash.cn/post/hugo-basic/</guid>
      <description>&lt;h2 id=&#34;add-new-content&#34;&gt;Add new content&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hugo new posts/article-name.md&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;article-meta-info&#34;&gt;Article meta info&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;---
title: &amp;#34;New Article&amp;#34;
date: 2020-04-04T09:25:04+08:00
description: &amp;#34;Hugo 的简单用法&amp;#34;
tags: [&amp;#34;hugo&amp;#34;, &amp;#34;pages&amp;#34;]
categories: [&amp;#34;hugo&amp;#34;]
draft: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;start-server-with-drafts-enabled&#34;&gt;Start server with drafts enabled&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hugo server -D&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;customize-the-theme&#34;&gt;Customize the theme&lt;/h2&gt;
&lt;p&gt;Open up &lt;code&gt;config.toml&lt;/code&gt; in a text editor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;baseURL = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://example.org/&amp;#34;&lt;/span&gt;
languageCode = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en-us&amp;#34;&lt;/span&gt;
title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My New Hugo Site&amp;#34;&lt;/span&gt;
theme = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ananke&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;build-static-pages&#34;&gt;Build static pages&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hugo -D&lt;/code&gt; output will be in &lt;code&gt;./public/&lt;/code&gt; directory by default (&lt;code&gt;-d/--destination&lt;/code&gt; flag to change it, or set &lt;code&gt;publishdir&lt;/code&gt; in the config file)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Check State Loss</title>
      <link>https://zacash.cn/post/check-state-loss/</link>
      <pubDate>Tue, 11 Feb 2020 16:30:26 +0800</pubDate>
      
      <guid>https://zacash.cn/post/check-state-loss/</guid>
      <description>&lt;h4 id=&#34;背景&#34;&gt;背景&lt;/h4&gt;
&lt;p&gt;最近做的一个 DialogFragment 在少数设备上会偶发闪退，Fabric 上的 Stacktrace 信息如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Fatal Exception&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;IllegalStateException&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Can not perform &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; action after onSaveInstanceState
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FragmentManagerImpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;checkStateLoss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FragmentManagerImpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enqueueAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BackStackRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commitInternal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BackStackRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DialogFragment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看起来是弹窗在 show 的时候，发生了 state loss，粗略 copy 了下 StackOverflow 上的回答，做了如下修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;fun &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;manager&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; FragmentManager&lt;span style=&#34;color:#f92672&#34;&gt;?)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   val ft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; manager&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;beginTransaction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
   ft&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tag of dialog&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   ft&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commitAllowingStateLoss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Exception&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

 &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重写了 show 方法，允许 state loss，并加了异常捕捉，后续观察 Fabric， show 的时候的确没再出现异常情况，但 dismiss 的时候还是有闪退出现，异常信息如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Fatal Exception&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;IllegalStateException&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Can not perform &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; action after onSaveInstanceState
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FragmentManagerImpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;checkStateLoss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FragmentManagerImpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enqueueAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BackStackRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commitInternal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BackStackRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DialogFragment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dismiss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;）&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到与 show 出现的闪退如出一辙，只是闪退触发的位置换成了 dismiss，按照之前对 show 的修改，是不是也可以把 dismiss 方法也改下呢，实际上还真有 &lt;code&gt;dismissAllowingStateLoss()&lt;/code&gt; 方法。。。但是真的可以这样写么？是什么原因导致的 state loss？如何才能有效避免这种情况呢？&lt;/p&gt;
&lt;p&gt;仔细看了下 Stack Overflow 问题下的评论，发现 &lt;a href=&#34;https://twitter.com/alexjlockwood&#34;&gt;Alex Lockwood&lt;/a&gt; 写的&lt;a href=&#34;https://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html&#34;&gt;一篇文章&lt;/a&gt;分析的很全面，下面对重点内容翻译一下。&lt;/p&gt;
&lt;h4 id=&#34;为什么会抛异常&#34;&gt;为什么会抛异常&lt;/h4&gt;
&lt;p&gt;简单来说，就是你在 Activity state saved 后，仍旧 commit 一个 FragmentTransaction，从而导致出现了所谓的 &lt;code&gt;Activity state loss&lt;/code&gt; 现象。所以 &lt;code&gt;onSaveInstanceState()&lt;/code&gt; 时发生了什么？&lt;/p&gt;
&lt;h5 id=&#34;onsaveinstancestate&#34;&gt;onSaveInstanceState&lt;/h5&gt;
&lt;p&gt;Android 系统可以随时终止进程以释放内存，因此置于后台的 Activity 随时可能会被清理。Android framework 提供给每个 Activity 在被系统销毁前调用 &lt;code&gt;onSaveInstanceState&lt;/code&gt; 以保存其状态(state)的机会，在随后恢复(restore)被保存的状态时，用户会感觉在无缝切换前/后台Activity，而不会察觉 Activity 会系统清理过。&lt;/p&gt;
&lt;p&gt;当调用 &lt;code&gt;onSaveInstanceState&lt;/code&gt; 方法时，Android Framework 将为 Acitvity 提供一个 Bundle 对象保存其状态，Activity 将记录 dialogs, fragments, views 的状态。在这个方法返回时，系统通过 Binder 接口将 Bundle 对象打包(parcel)到 System Server 进程。随后当系统决定重建(recreate) Activity 时，它将之前保存的 Bundle 发回 App，来恢复 Activity 旧的状态。&lt;/p&gt;
&lt;p&gt;所以为什么回抛异常？原因就是在 &lt;code&gt;onSaveInstanceState&lt;/code&gt; 调用后，你调用了 &lt;code&gt;FragmentTransaction#commit()&lt;/code&gt;，因此 &lt;code&gt;onSaveInstanceState&lt;/code&gt; 方法返回的 &lt;code&gt;Bundle&lt;/code&gt; 对象并不包含该事务(transaction)。在用户的角度来看，事务被忽略，UI 状态丢失，Android 为了避免这种情况,只要发生状态丢失(state loss)便立即抛出 &lt;code&gt;IllegalStateException&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;何时抛出异常&#34;&gt;何时抛出异常&lt;/h4&gt;
&lt;p&gt;从 Honeycomb 开始，&lt;code&gt;onSaveInstanceState()&lt;/code&gt; 在生命周期 &lt;code&gt;onStop()&lt;/code&gt; 方法之前调用，而不是 &lt;code&gt;pre-Honeycomb&lt;/code&gt;时的 &lt;code&gt;onPause()&lt;/code&gt; 之前。&lt;/p&gt;
&lt;h4 id=&#34;如何避免异常&#34;&gt;如何避免异常&lt;/h4&gt;
&lt;p&gt;这里有一些关于在 App 中使用 &lt;code&gt;FragmentTransaction&lt;/code&gt; 的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 在 Activity 的生命周期方法 &lt;em&gt;提交事务(commit transaction)&lt;/em&gt;：
当你在 &lt;code&gt;onCreate()&lt;/code&gt; 方法 commit 事务可能从来不会碰到问题，但当你在 &lt;code&gt;onActivityResult()&lt;/code&gt;、&lt;code&gt;onStart()&lt;/code&gt;、&lt;code&gt;onResume&lt;/code&gt; commit 时，事情变得有趣了起来。比如，你不应该在 &lt;code&gt;FragmentActivity#onResume()&lt;/code&gt; 方法里 commit 事务，因为在&lt;a href=&#34;http://developer.android.com/reference/android/support/v4/app/FragmentActivity.html#onResume()&#34;&gt;某些情况&lt;/a&gt;下，Activity 会在恢复状态(restore state)之前调用 &lt;code&gt;onResume()&lt;/code&gt; 方法。如果你的 App 需要在 &lt;code&gt;onCreate()&lt;/code&gt; 方法以外 commit 事务，尝试在 &lt;code&gt;FragmentActivity#onResumeFragments()&lt;/code&gt; 或 &lt;code&gt;Activity#onPostResume()&lt;/code&gt; 方法内 commit，这两个方法会确保在 Activity restore state 后调用，因此避免了 state loss 的可能。对于这个例子的描述，可以参考 StackOverflow 上这个&lt;a href=&#34;http://stackoverflow.com/q/16265733/844882&#34;&gt;回答&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;避免&lt;/strong&gt; 在异步回调方法中操作事务:
主要原因是，在异步回调方法执行时，并不了解 Activity 当前的生命周期状态，因此很可能在 &lt;code&gt;onStop()&lt;/code&gt; 调用时 commit 事务，从而抛出异常。这种情况可以参考 StackOverflow 上&lt;a href=&#34;http://stackoverflow.com/q/8040280/844882&#34;&gt;这个回答&lt;/a&gt;和&lt;a href=&#34;http://stackoverflow.com/q/7992496/844882&#34;&gt;这个回答&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt; 仅作为最后的手段：
&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt; 与 &lt;code&gt;commit()&lt;/code&gt; 方法唯一的区别便是该方法在状态丢失时不会抛异常。一般情况下不要使用该方法，一种更好的方式，便是确保在 Activity save state 之前 commit 事务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;最后&#34;&gt;最后&lt;/h4&gt;
&lt;p&gt;回归到我的 DialogFragment 为何出现异常，原因是我 commit transaction 位置是在 &lt;code&gt;FragmentActivity#onResume()&lt;/code&gt;方法内:-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zacash.cn/post/when-to-use-lazy-or-lateinit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/post/when-to-use-lazy-or-lateinit/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>