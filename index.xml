<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zac&#39;s Blog</title>
    <link>https://zacash.cn/</link>
    <description>Recent content on Zac&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2020, Copyright Zac</copyright>
    <lastBuildDate>Fri, 06 Nov 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://zacash.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Use Hilt in Android</title>
      <link>https://zacash.cn/post/use-hilt-in-android/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/post/use-hilt-in-android/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If you want to use dagger in  your project, you may have 2 or 3 different sources, different samples, different blog posts. All of them use a different set-up, and all of them use Dagger in a different way, so it&amp;rsquo;s very difficult to understand all the topics and relate them together. So that&amp;rsquo;s why Google create a common guidance, a common ground, which is called Hilt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hilt is an opinionated dependency injection library for Android that reduces the boilerplate of using manual DI in your project. Doing &lt;a href=&#34;https://developer.android.com/training/dependency-injection/manual&#34;&gt;manual dependency injection&lt;/a&gt; requires constructing every class and its denpendencies by hand and using &lt;strong&gt;containers&lt;/strong&gt; to reuse and manage &lt;strong&gt;dependencies&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;dependencies-container&#34;&gt;Dependencies Container&lt;/h2&gt;
&lt;p&gt;Annotating Android classes with &lt;code&gt;@AndroidEntryPoint&lt;/code&gt; creates a &lt;strong&gt;dependencies container&lt;/strong&gt; that follows the Android lifecycle.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@AndroidEntryPoint
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainFragment&lt;/span&gt;: Fragment() {
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hilt currently supports the following Android types: &lt;code&gt;Application&lt;/code&gt; by using(&lt;code&gt;@HiltAndroidApp&lt;/code&gt;), Activity, Fragment, Service and BroadcastReceiver.&lt;/p&gt;
&lt;p&gt;Hilt only supports activities that extend &lt;a href=&#34;https://developer.android.com/reference/androidx/fragment/app/FragmentActivity&#34;&gt;FragmentActivity&lt;/a&gt; and fragments that extend Jetpack library [Fragment][fx](Note:Hilt does not support retained fragments).&lt;/p&gt;
&lt;h3 id=&#34;container&#34;&gt;Container&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;container&lt;/em&gt; is a class which is in charge of providing dependencies in your codebase and knows how to create instances of other types of your app. It manages the graph of dependencies required to provide those instances by creating them and managing their lifecycle.&lt;/p&gt;
&lt;p&gt;A container exposes methods to get instances of the types it provides. Those methods can always return a different instance or the same instance. If the method always provides the same instance, we say that the type is &lt;em&gt;scoped&lt;/em&gt; to the container.&lt;/p&gt;
&lt;h3 id=&#34;hiltandroidapp&#34;&gt;@HiltAndroidApp&lt;/h3&gt;
&lt;p&gt;Annotating the Application class with &lt;code&gt;@HiltAndroidApp&lt;/code&gt;, we add a &lt;em&gt;container&lt;/em&gt; that is attached to the app&amp;rsquo;s lifecycle:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@HiltAndroidApp
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;:Application() {
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;@HiltAndroidApp&lt;/code&gt; triggers Hilt&amp;rsquo;s code generation including a base class for our application that can use dependency injection. The application container is the &lt;strong&gt;parent container&lt;/strong&gt; of the app, which means that other containers can access the dependencies that it provides.&lt;/p&gt;
&lt;h2 id=&#34;provide-dependencies&#34;&gt;Provide dependencies&lt;/h2&gt;
&lt;h3 id=&#34;constructor-inject&#34;&gt;Constructor Inject&lt;/h3&gt;
&lt;p&gt;To tell Hilt how to provide instance of type, add the &lt;code&gt;@Inject&lt;/code&gt; annotation to the constructor of the class we want to be injected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Logger&lt;/span&gt; @Inject &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;() {
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;scoping-instance&#34;&gt;Scoping instance&lt;/h4&gt;
&lt;p&gt;Hilt can produce different containers that have different lifecycles, there are different annotations that scope to those containers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Singleton&lt;/code&gt;: Application container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ActivityScoped&lt;/code&gt;: Activity container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@FragmentScoped&lt;/code&gt;: Fragment container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ViewScoped&lt;/code&gt;: View container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we could annotating &lt;em&gt;Logger&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@Singleton
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Logger&lt;/span&gt; @Inject &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;() {
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;modules&#34;&gt;Modules&lt;/h3&gt;
&lt;p&gt;For types that &lt;strong&gt;cannot be constructor injected&lt;/strong&gt;, such as interface or classes are not contained in our project, we should use &lt;strong&gt;Hilt modules&lt;/strong&gt;. An exemple of this is &lt;code&gt;OkHttpClient&lt;/code&gt;, we need to use its builder to create an instance.&lt;/p&gt;
&lt;p&gt;A Hilt module is a class annotated with &lt;code&gt;@Module&lt;/code&gt; and &lt;code&gt;@InstallIn&lt;/code&gt;. &lt;code&gt;@Module&lt;/code&gt; tells Hilt this is a module and &lt;code&gt;@InstallIn&lt;/code&gt; tells Hilt the bindings are specifying in which Hilt component.&lt;/p&gt;
&lt;p&gt;For each Android class that can be injected by Hilt, there&amp;rsquo;s an associated &lt;a href=&#34;https://developer.android.com/training/dependency-injection/hilt-android#generated-components&#34;&gt;Hilt Component&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@InstallIn(ApplicationComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;)
@Module
&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseModule&lt;/span&gt; {
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;providing-instances-with-provides&#34;&gt;Providing instances with @Provides&lt;/h4&gt;
&lt;p&gt;We can annotate a function with &lt;code&gt;@Provides&lt;/code&gt; in Hilt modules to tell Hilt how to provide types that cannot be constructor injected.&lt;/p&gt;
&lt;p&gt;The function body of the &lt;code&gt;@Provides&lt;/code&gt; annotated function will be executed every time Hilt needs to provide an instance of that type. The return type of the &lt;code&gt;@Provides&lt;/code&gt; annotated function tells Hilt the bindings type or how to provide instances of that type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@InstallIn(ApplicationComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;)
@Module
&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseModule&lt;/span&gt; {

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * We always want Hilt provide the same database instance, so annotate this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * method with @Singleton.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param appContext: Each Hilt container comes with a set of default bindings that can be
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * injected as dependencies into our custom bindings, to access this appContext, we annotate
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * the filed with @ApplicationContext.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    @Provides
    @Singleton
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;provideDatabase&lt;/span&gt;(@ApplicationContext appContext: Context): AppDatabase {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Room.databaseBuilder(
            appContext,
            AppDatabase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;.java,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logging.db&amp;#34;&lt;/span&gt;
        ).build()
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * provide AppDatabase dependency.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    @Provides
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;provideLogDao&lt;/span&gt;(database: AppDatabase): LogDao {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; database.logDao()
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;providing-interface-impl-with-binds&#34;&gt;Providing interface impl with @Binds&lt;/h4&gt;
&lt;p&gt;To tell Hilt what implementation to use for an interface, we can use the &lt;code&gt;@Binds&lt;/code&gt; annotation on a function inside a Hilt module.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Binds&lt;/code&gt; must annotate an abstract function, since &lt;strong&gt;Hilt modules cannot contain both non-static and abstract binding methods&lt;/strong&gt;, so we cannot place &lt;code&gt;@Binds&lt;/code&gt; and &lt;code&gt;@Provides&lt;/code&gt; annotations in the same class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@InstallIn(ActivityComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;)
@Module
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NavigationModule&lt;/span&gt; {

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * To tell Hilt how to provide instances of AppNavigatorImpl, we just annotate its constructor with `@Inject`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    @Binds
    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bindNavigator&lt;/span&gt;(impl: AppNavigatorImpl): AppNavigator
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;providing-different-interface-impl-with-qualifier&#34;&gt;Providing different interface impl with @Qualifier&lt;/h4&gt;
&lt;p&gt;Assume that LoggerDataSource interface has two different implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoggerDataSource&lt;/span&gt; {
    ...
}

@Singleton
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoggerLocalDataSource&lt;/span&gt; @Inject &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; logDao: LogDao
): LoggerDataSource {
    ...
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Scoping to the Activity container
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
@ActivityScoped
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoggerInMemoryDataSource&lt;/span&gt; @Inject &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(
): LoggerDataSource {
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this moment, Hilt knows how to provide instances of &lt;code&gt;LoggerInMemoryDataSource&lt;/code&gt; and &lt;code&gt;LoggerLocalDataSource&lt;/code&gt; but doesn&amp;rsquo;t know which implementation to use when &lt;code&gt;LoggerDataSource&lt;/code&gt; is requested.&lt;/p&gt;
&lt;p&gt;We know that we can use the &lt;code&gt;@Binds&lt;/code&gt; annotation to provide &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;LoggerDataSource&lt;/code&gt; implementation, but if we need to provide both implementations in the same project?&lt;/p&gt;
&lt;h5 id=&#34;two-implementations-for-the-same-interface&#34;&gt;Two implementations for the same interface&lt;/h5&gt;
&lt;p&gt;Since the different implementations of &lt;code&gt;LoggerDataSource&lt;/code&gt; are scoped to different containers, we cannot use the same module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;LoggerInMemoryDataSource&lt;/em&gt; is scoped in Actiivty container&lt;/li&gt;
&lt;li&gt;&lt;em&gt;LoggerLocalDataSource&lt;/em&gt; is scoped in Application container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We should define two different module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@InstallIn(ApplicationComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;)
@Module
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoggingDatabaseModule&lt;/span&gt; {
    @Singleton
    @Binds
    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bindDatabaseLogger&lt;/span&gt;(impl: LoggerLocalDataSource): LoggerDataSource
}

@InstallIn(ActivityComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;)
@Module
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoggingInMemortModule&lt;/span&gt; {
    @ActivityScoped
    @Binds
    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bindInMemoryLogger&lt;/span&gt;(impl: LoggerInMemoryDataSource): LoggerDataSource
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;@Binds method must have the scoping annotations if the type is scoped&lt;/strong&gt;, so that&amp;rsquo;s why the functions above are annotated with &lt;code&gt;@Singleton&lt;/code&gt; and &lt;code&gt;@ActivityScoped&lt;/code&gt;. If &lt;code&gt;@Binds&lt;/code&gt; or &lt;code&gt;@Provides&lt;/code&gt; are used as a binding for a type, the scoping annotations in the implementation classes are not used anymore, so we can remove them.&lt;/p&gt;
&lt;p&gt;If we buid the project right now, we&amp;rsquo;ll see &lt;code&gt;DuplicateBindings&lt;/code&gt; error:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[Dagger/DuplicateBindings] com.example.android.hilt.data.LoggerDataSource is bound multiple times&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is because the &lt;code&gt;LoggerDataSource&lt;/code&gt; type is being injected in &lt;code&gt;Fragment&lt;/code&gt;, but &lt;strong&gt;Hilt doesn&amp;rsquo;t know which implementation to use because there are two bindings of the same tyoe!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To tell Hilt how to provide different implementations (multiple bindings) of the same type, we can use qualifier annotation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@Qualifier
&lt;span style=&#34;color:#66d9ef&#34;&gt;annotation&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InMemoryLogger&lt;/span&gt;

@Qualifier
&lt;span style=&#34;color:#66d9ef&#34;&gt;annotation&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DatabaseLogger&lt;/span&gt;

@InstallIn(ApplicationComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;)
@Module
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoggingDatabaseModule&lt;/span&gt; {

    @DatabaseLogger
    @Singleton
    @Binds
    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bindDatabaseLogger&lt;/span&gt;(impl: LoggerLocalDataSource): LoggerDataSource
}

@InstallIn(ActivityComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;)
@Module
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoggingInMemoryModule&lt;/span&gt; {

    @InMemoryLogger
    @ActivityScoped
    @Binds
    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bindInMemoryLogger&lt;/span&gt;(impl: LoggerInMemoryDataSource): LoggerDataSource
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;inject-dependencies&#34;&gt;Inject dependencies&lt;/h2&gt;
&lt;p&gt;We can make Hilt inject instances of different types with the &lt;code&gt;@Inject&lt;/code&gt; annotation on the fields we want to be injected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@AndroidEntryPoint
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoginFragment&lt;/span&gt;:Fragment() {
    &lt;span style=&#34;color:#75715e&#34;&gt;// note that fields injected by Hilt cannot be private.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    @InmemoryLogger
    @Inject &lt;span style=&#34;color:#66d9ef&#34;&gt;lateinit&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; logger: LoggerDataSource
    @Inject &lt;span style=&#34;color:#66d9ef&#34;&gt;lateinit&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; formatter: Formatter
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Introduction to Custom View</title>
      <link>https://zacash.cn/post/custom-view-introduction/</link>
      <pubDate>Sun, 06 Sep 2020 11:11:13 +0800</pubDate>
      
      <guid>https://zacash.cn/post/custom-view-introduction/</guid>
      <description>&lt;p&gt;To create a custom view we can either extend an existing &lt;code&gt;View&lt;/code&gt; subclass(like EditText), or create our own subclass of View. By extending View directly, we can create an interactive UI element of any size and shape by overriding the &lt;code&gt;onDraw()&lt;/code&gt; method for the View to draw it.&lt;/p&gt;
&lt;p&gt;This article resource from official Android &lt;a href=&#34;https://codelabs.developers.google.com/codelabs/advanced-andoid-kotlin-training-custom-views&#34;&gt;custom view&lt;/a&gt; codelab. I think you&amp;rsquo;ll get the most value if you work through this codelab in sequence.&lt;/p&gt;
&lt;h2 id=&#34;understanding-custom-views&#34;&gt;Understanding custom views&lt;/h2&gt;
&lt;p&gt;Views are the basic blocks of an app&amp;rsquo;s UI. the View class provides many subclasses, referred to as &lt;em&gt;UI widgets&lt;/em&gt;, that cover many of the needs of a typical Android app&amp;rsquo;s user interface.&lt;/p&gt;
&lt;p&gt;UI building blocks such as EditText or TextView are subclasses that extend the View class. To save time and development effort, we can extend one of these View subclasses.&lt;/p&gt;
&lt;p&gt;To create our custom view from scratch, extend the View class itself. Our code overrides &lt;code&gt;View&lt;/code&gt; methods to define the view&amp;rsquo;s appearance and functionality. Key to create our custom view is that we are responsible for &lt;strong&gt;drawing the entire UI element of any size and shape to the screen&lt;/strong&gt;. If we subclass an existing view such as &lt;code&gt;Button&lt;/code&gt;, that class handles drawing for us.&lt;/p&gt;
&lt;h3 id=&#34;general-steps-to-create-a-custom-view&#34;&gt;General steps to create a custom view&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create a custom view class that extends &lt;code&gt;View&lt;/code&gt;, or extends a &lt;code&gt;View&lt;/code&gt; subclass(such as &lt;code&gt;TextView&lt;/code&gt; or &lt;code&gt;Button&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If we extend a subclass of View(like Button), override only the behavior or aspect of the appearance methods that we want to change.&lt;/li&gt;
&lt;li&gt;If we extend View class, draw the custom view&amp;rsquo;s shape and control its appearance by overriding View methods such as &lt;code&gt;onDraw()&lt;/code&gt; and &lt;code&gt;onMeasure()&lt;/code&gt; in the new class.&lt;/li&gt;
&lt;li&gt;Add code to respond to user interaction and, if necessary, redraw the custom view.&lt;/li&gt;
&lt;li&gt;Use the custom view class as UI widget in activity&amp;rsquo;s XML layout. We can also define custom attributes(in &lt;code&gt;attrs.xml&lt;/code&gt; file) for the view, to provide customization for the view in different layouts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;drawing-custom-views&#34;&gt;Drawing custom views&lt;/h2&gt;
&lt;p&gt;When we creating custom view from scratch(by extending &lt;code&gt;View&lt;/code&gt;), we are responsible for drawing the entire view each time the screen refreshes, and for overriding the View methods that handle drawing. In order to properly &lt;strong&gt;draw a custom view&lt;/strong&gt; that extends View, we need to follw this step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calculate the view&amp;rsquo;s size when it first appears, and each time that view&amp;rsquo;s size changes, by overriding the &lt;code&gt;onSizeChanged()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Override the &lt;code&gt;onDraw()&lt;/code&gt; method to draw the custom view, using a &lt;code&gt;Canvas&lt;/code&gt; object styled by a &lt;code&gt;Paint&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;invalidate()&lt;/code&gt; method when responding to a user click that changes how the view is drawn to invalidate the entire view, thereby forcing a call to &lt;code&gt;onDraw()&lt;/code&gt; to redraw the view.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;onDraw()&lt;/code&gt; method is called every time that screen refreshes, which can be many time a second. For performance reasons and to avoid visual glitches, we should do as little work as possible in &lt;code&gt;onDraw()&lt;/code&gt;. In particular, don&amp;rsquo;t place allocations in &lt;code&gt;onDraw()&lt;/code&gt;, because allocations may lead to garbage collection that may cause a visual stutter.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Canvas&lt;/code&gt; and &lt;code&gt;Paint&lt;/code&gt; classes offer a number of useful &lt;strong&gt;drawing shortcuts&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Draw text using &lt;code&gt;drawText()&lt;/code&gt;. Specify the typeface by calling &lt;code&gt;setTypeface()&lt;/code&gt;, and the text color by calling &lt;code&gt;setColor()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Draw primitive shapes using &lt;code&gt;drawRect()&lt;/code&gt;, &lt;code&gt;drawOval()&lt;/code&gt; and &lt;code&gt;drawArc()&lt;/code&gt;. Change whether that shapes are filled, outlined, or both by calling &lt;code&gt;setStyle()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Draw bitmaps using &lt;code&gt;drawBitmap()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: in apps that have a deep view hierarchy, we can also override the &lt;code&gt;onMeasure()&lt;/code&gt; method to accurately define how custom view fits into the layout. That way, the parent layout can properly align the custom view. The &lt;code&gt;onMeasure()&lt;/code&gt; method provides a set of &lt;code&gt;measureSpecs&lt;/code&gt; that we can use to determine out view&amp;rsquo;s height and width. Learn more &lt;a href=&#34;https://developer.android.com/guide/topics/ui/how-android-draws.html&#34;&gt;how android draws&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;change-custom-view-behavior&#34;&gt;Change custom view behavior&lt;/h2&gt;
&lt;h3 id=&#34;add-view-interactivity&#34;&gt;Add view interactivity&lt;/h3&gt;
&lt;p&gt;Normally, with a standard Android view, we implement &lt;code&gt;OnClickListener()&lt;/code&gt; to perform an action when the user clicks that view. For a custom view, we should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set the view&amp;rsquo;s isClickable property to true. This enables custom view to respond to clicks.&lt;/li&gt;
&lt;li&gt;Implement the &lt;code&gt;View&lt;/code&gt; class&amp;rsquo;s &lt;code&gt;performClick()&lt;/code&gt; to perform operations when the view is clicked.&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;invalidate()&lt;/code&gt; method. This tells the Android system to call the &lt;code&gt;onDraw()&lt;/code&gt; method to redraw the view.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;use-custom-attributes-with-custom-view&#34;&gt;Use custom attributes with custom view&lt;/h3&gt;
&lt;p&gt;To use a custom attributes we should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create and open &lt;code&gt;res/values/attrs.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Inside &lt;code&gt;&amp;lt;resource&amp;gt;&lt;/code&gt;, add a &lt;code&gt;&amp;lt;declare-styleable&amp;gt;&lt;/code&gt; resource element.&lt;/li&gt;
&lt;li&gt;Inside the &lt;code&gt;&amp;lt;declare-styleable&amp;gt;&lt;/code&gt; resource element, add three &lt;code&gt;attr&lt;/code&gt; elements, one for each attribute, with a &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;format&lt;/code&gt;. The &lt;code&gt;format&lt;/code&gt; is the attribute&amp;rsquo;s type, such as &lt;code&gt;color&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sample code is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;declare-styleable&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CustomView&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;attr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;customColor&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;attr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;customString&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;attr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;customInteger&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/declare-styleable&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note: the &lt;code&gt;attr&lt;/code&gt; name is, by convention, the same name as the name ofthe class that defines the custom view. Although it&amp;rsquo;s not strictly necessary to follow this convention, Android Studio depend on this naming convention to provide statement completion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Open &lt;code&gt;fragment_custom_ui.xml&lt;/code&gt; layout file, in &lt;code&gt;CustomView&lt;/code&gt;, add attribute for &lt;code&gt;customColor&lt;/code&gt;, &lt;code&gt;customString&lt;/code&gt;, &lt;code&gt;customInteger&lt;/code&gt;, and set their value. Use &lt;code&gt;app:&lt;/code&gt; as preface for the custom attribute rather than &lt;code&gt;android:&lt;/code&gt; because we custom attribute belong to the &lt;code&gt;schemas.android.com/apk/res/app_package_name&lt;/code&gt; namespace rather than the android namespace.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;com.zac4j.ui.widget.CustomView&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/customView&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;200dp&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;200dp&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_marginLeft=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8dp&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_marginTop=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8dp&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_marginRight=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8dp&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:background=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@android:color/darker_gray&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;app:customColor=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#009688&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;app:customString=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@string/hello&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;app:customInteger=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x101&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintLeft_toLeftOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintRight_toRightOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintTop_toBottomOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@id/customViewLabel&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to use the attributes in &lt;code&gt;CustomView&lt;/code&gt; class, we need to retrieve them. They are stored in an &lt;code&gt;AttributeSet&lt;/code&gt;, which is handed to out class upon creation, if it exists. We retrieve the attributes in &lt;code&gt;init&lt;/code&gt;, and assign the attribute values to local vaributes for caching.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;code&gt;CustomView.kt&lt;/code&gt; class file.&lt;/li&gt;
&lt;li&gt;Inside the &lt;code&gt;CustomView&lt;/code&gt; declare vaributes to cache the attribute values.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; customColor = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; customString = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; customInt = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Inside the &lt;code&gt;init&lt;/code&gt; block, add the following code using the &lt;code&gt;withStyledAttributes&lt;/code&gt; extension function. We supply the attributes and view, and set the local vaributes. Importing &lt;code&gt;withStyledAttributes&lt;/code&gt; will also import the right &lt;code&gt;getColor&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;context.withStyledAttributes(attrs, R.styleable.CustomView) {
   customColor = getColor(R.styleable.CustomView_customColor, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
   customString = getString(R.styleable.CustomView_customString, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
   customInt = getInt(R.styleable.CustomView_customInteger, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Android and the Kotlin extension library (&lt;a href=&#34;https://android.github.io/android-ktx/core-ktx/index.html&#34;&gt;android-ktx&lt;/a&gt;) do a lot of work for you here! The android-ktx library provides Kotlin extensions with a strong quality-of-life focus. For example, the &lt;a href=&#34;https://android.github.io/android-ktx/core-ktx/androidx.content/android.content.-context/index.html&#34;&gt;withStyledAttributes&lt;/a&gt; extension replaces a significant number of lines of rather tedious boilerplate code. For more on this library, check out the documentation, and the &lt;a href=&#34;https://android-developers.googleblog.com/2018/02/introducing-android-ktx-even-sweeter.html&#34;&gt;original announcement&lt;/a&gt; blog post!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Use the local variables in &lt;code&gt;onDraw()&lt;/code&gt; to set the color and label to the current view.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Intro to Navigation</title>
      <link>https://zacash.cn/post/intro-to-navigation/</link>
      <pubDate>Sun, 23 Aug 2020 11:11:13 +0800</pubDate>
      
      <guid>https://zacash.cn/post/intro-to-navigation/</guid>
      <description>&lt;h2 id=&#34;navhostfragment&#34;&gt;NavHostFragment&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;NavHostFragment&lt;/code&gt; acts as a host for the fragments in the navigation graph.&lt;/p&gt;
&lt;p&gt;As the user moves between destination defined in the navigation graph, the &lt;code&gt;NavHostFragment&lt;/code&gt; swaps the fragments in and out and manages the Fragment back stack.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;activity_main.xml&lt;/code&gt; layout file, the &lt;code&gt;NavHostFragment&lt;/code&gt; is represented by a &lt;code&gt;fragment&lt;/code&gt; element with the name &lt;code&gt;android:name=&amp;quot;androidx.navigation.fragment.NavHostFragment&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;backstack-in-navigation&#34;&gt;BackStack in Navigation&lt;/h2&gt;
&lt;p&gt;Each time user goes to a new destination on the device, Android adds that destination to the &lt;em&gt;back stack&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When user presses the Back Button, the app goes to the destination that&amp;rsquo;s at the top of the back stack. By default, the top of the back stack is the screen that the user last viewed.&lt;/p&gt;
&lt;h3 id=&#34;set-the-pop-behavior-for-the-navigation-actions&#34;&gt;Set the pop behavior for the navigation actions&lt;/h3&gt;
&lt;p&gt;We can manage the back stack by setting the pop behavior for the actions that connect the fragments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;popUpTo&lt;/code&gt; attribute of an action &amp;ldquo;pops up&amp;rdquo; the back stack to a given destination before navigating.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;popUpToInclusive&lt;/code&gt; attribute is &lt;code&gt;false&lt;/code&gt; or is not set, &lt;code&gt;popUpTo&lt;/code&gt; removes destinations up to the specified destination, but leaves the specified destination in the back stack.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;popUpToInclusive&lt;/code&gt; is set to true, the &lt;code&gt;popUpTo&lt;/code&gt; attribute removes all destinations up to and including the given destination from the back stack.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;popUpToInclusive&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;popUpTo&lt;/code&gt; is set to the app&amp;rsquo;s starting location, the action removes all app destination from the back stack. The Back button takes the user all the way out of the app.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-up-button&#34;&gt;The Up button&lt;/h2&gt;
&lt;p&gt;The Up button appears at the top left of the &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/navigation/navigation-ui#top_app_bar&#34;&gt;app bar&lt;/a&gt;(sometimes called action bar) The Up button navigates &amp;ldquo;upwards&amp;rdquo; within the app&amp;rsquo;s screens, based on the hierarchical relationships between screens.&lt;/p&gt;
&lt;p&gt;The navigation controller&amp;rsquo;s &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/navigation/navigation-ui&#34;&gt;NavigationUI&lt;/a&gt; library integrates with the app bar to allow user tap Up button to get back to the app&amp;rsquo;s home screen from anywhere in the app.&lt;/p&gt;
&lt;p&gt;link step:&lt;/p&gt;
&lt;h3 id=&#34;navhostfragment-in-fragmentcontainerview-element&#34;&gt;NavHostFragment in FragmentContainerView element&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;onCreate()&lt;/code&gt;, call:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; NavHostFragment
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; navController = navHostFragment.navController
NavigationUI.setupActionBarWithNavController(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, navController)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Override &lt;code&gt;onSupportNavigateUp()&lt;/code&gt; method to call &lt;code&gt;navigateUp()&lt;/code&gt; in the navigatiohn controller:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onSupportNavigateUp&lt;/span&gt;(): Boolean {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; NavHostFragment
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; navController = navHostFragment.navController
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; navController.navigateUp()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;navhostfragment-in-fragment-element&#34;&gt;NavHostFragment in fragment element&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;onCreate()&lt;/code&gt;, call:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; navController = findNavController(R.id.nav_host_fragment)
NavigationUI.setupActionBarWithNavController(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, navController)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Override &lt;code&gt;onSupportNavigateUp()&lt;/code&gt; method to call &lt;code&gt;navigateUp()&lt;/code&gt; in the navigatiohn controller:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onSupportNavigateUp&lt;/span&gt;(): Boolean {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; navController = findNavController(R.id.nav_host_fragment)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; navController.navigateUp()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;safe-args-plugin&#34;&gt;Safe Args Plugin&lt;/h2&gt;
&lt;p&gt;When we needs to pass parameters from one fragment to another. To prevent bugs in these transactions and make them type-safe, we use a Gradle plugin called &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/navigation/navigation-pass-data#Safe-args&#34;&gt;Safe Args&lt;/a&gt;. The plugin generates &lt;code&gt;NavDirection&lt;/code&gt; class, and we could use these classes to pass parameters.&lt;/p&gt;
&lt;p&gt;We used a &lt;code&gt;Bundle&lt;/code&gt; to pass data from fragment A to fragment B in the past. These lead two kinds of errors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type mis-match error. For example, if Fragment A sends a String but Fragment requests an Integer from &lt;code&gt;Bundle&lt;/code&gt;, the request returns the default value of integer is 0.&lt;/li&gt;
&lt;li&gt;Missing key errors. If fragment B requests an argument that isn&amp;rsquo;t set in the bundle, the operation return &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All above errors might make app misbehave or crash in runtime, but we can use &lt;em&gt;Safe Argu&lt;/em&gt; to catch these errors in compile time, Safe Args is a Gradle plugin that generates code and classes that help to detect errors at compile-time that might not otherwise be surfaced until the app runs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Binding in Android</title>
      <link>https://zacash.cn/post/databinding-in-android/</link>
      <pubDate>Sun, 23 Aug 2020 08:37:45 +0800</pubDate>
      
      <guid>https://zacash.cn/post/databinding-in-android/</guid>
      <description>&lt;p&gt;æ¯æ¬¡å¨ view åçåå»ºæéå»ºï¼æä»¬ä½¿ç¨ &lt;code&gt;findViewById()&lt;/code&gt; æ¥è·å view çå¼ç¨æ¶ï¼Android ç³»ç»å¨è¿è¡æ¶ä¼éåæ´ä¸ªè§å¾å±çº§ç»æï¼view hierarchyï¼æ¥æ¥æ¾å®ãå¨æä»¬ app çè§å¾ç»ææ¯è¾ç®åæ¶æ²¡æé®é¢ï¼ä½æ¯çäº§ä¸ç app ä¸ä¸ª layout å¯è½æå åä¸ª viewsï¼å³ä½¿æ¯æä½³è®¾è®¡ï¼ä¹ä¼å­å¨åµå¥ç views.&lt;/p&gt;
&lt;h2 id=&#34;intro-to-databinding&#34;&gt;Intro to DataBinding&lt;/h2&gt;
&lt;p&gt;å¯¹äºåºå¤§æè¾æ·±çè§å¾å±çº§ç»æï¼æ¥æ¾ view å¯è½èè´¹å¾å¤æ¶é´ï¼ä»èå¯è½ææ¾éä½ app çååºéåº¦ãæä»¬å¯ä»¥å¨åéä¸­ç¼å­è¿äº view çå¼ç¨ï¼ä½è¿éè¦æä»¬å¨æ¯ä¸ª Activity/Fragment ä¸­å¯¹äºæ¯ä¸ª view é½åå»ºåéæ¥æå­å¼ç¨ã&lt;/p&gt;
&lt;p&gt;å¦ä¸ç§æ¹æ¡æ¯åå»ºä¸ä¸ªå¯¹è±¡åå«æ¯ä¸ª view çå¼ç¨ãæ´ä¸ªå¯¹è±¡ï¼ç§°ä¸º &lt;em&gt;ç»å®å¯¹è±¡ï¼binding objectï¼&lt;/em&gt;ï¼å¯ä»¥è¢«æ´ä¸ª app ä½¿ç¨ãè¿é¡¹ææ¯è¢«ç§°ä¸º &lt;em&gt;æ°æ®ç»å®ï¼data bindingï¼&lt;/em&gt;ãå½ app çç»å®å¯¹è±¡åå»ºåï¼æä»¬å¯ä»¥éè¿ç»å®å¯¹è±¡è®¿é® viewsï¼æå«çæ°æ®ï¼èä¸ç¨éåæ´ä¸ª view hierarchy æ¥æ¥æ¾å®ä»¬ã&lt;/p&gt;
&lt;h2 id=&#34;findviewbyid-vs-databinding&#34;&gt;findViewById vs. DataBinding&lt;/h2&gt;
&lt;p&gt;Data binding æå¦ä¸ä¼å¿ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ä¸ &lt;code&gt;findView&lt;/code&gt; ç¸æ¯ä»£ç æ´ç®æ´ï¼æ´æäºéè¯»åç»´æ¤ã&lt;/li&gt;
&lt;li&gt;æ°æ®å views æç¡®åç¦»ï¼&lt;/li&gt;
&lt;li&gt;Android ç³»ç»å¨ app å¯å¨æ¶ä»éå view hierarchy ä¸æ¬¡å³å¯è·åæ¯ä¸ª view çå¼ç¨ï¼èä¸æ¯å &lt;code&gt;findView&lt;/code&gt; å¨è¿è¡æ¶è·å view å¼ç¨ã&lt;/li&gt;
&lt;li&gt;æä»¬å¯ä»¥ &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_safety&#34;&gt;type safety&lt;/a&gt; è®¿é® viewsãï¼Type safety æå³çç¼è¯å¨å¨ç¼è¯æ¶ä¼éªè¯ç±»åï¼å¦ææä»¬å°éè¯¯çç±»ååéç»åéï¼åä¼å¼åç¼è¯éè¯¯ãï¼&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;databing-expression&#34;&gt;Databing expression&lt;/h2&gt;
&lt;h3 id=&#34;formatted-string&#34;&gt;Formatted string&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;String res:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;string&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quote_format&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;\&amp;#34;%s\&amp;#34;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;string&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;score_format&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Current Score: %d&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Layout res:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TextView&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/word_text&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
   &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@{@string/quote_format(gameViewModel.word)}&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;null-coalescing-operator&#34;&gt;Null coalescing operator&lt;/h3&gt;
&lt;p&gt;The null coalescing operator (??) chooses the left operand if isn&amp;rsquo;t null or the right if the former is null.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TextView&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@{user.displayName ?? user.lastName}&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is functionally equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TextView&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@{user.displayName != null ? user.displayName : user.lastName}&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Generics in Kotlin</title>
      <link>https://zacash.cn/post/generics-in-kotlin/</link>
      <pubDate>Fri, 14 Aug 2020 07:27:09 +0800</pubDate>
      
      <guid>https://zacash.cn/post/generics-in-kotlin/</guid>
      <description>&lt;p&gt;val å var ä¸ variables ç VALUES ç¸å³ï¼val ä¿æ¤åéçå¼ä¸åãin å out ä¸ variables ç TYPES ç¸å³ï¼in å out ä¿è¯å¨èåçä½¿ç¨ä¸­ï¼åªæå®å¨çç±»åæè½ä¼ å¥æä¼ åºå½æ°ã&lt;/p&gt;
&lt;h2 id=&#34;define-an-out-type&#34;&gt;Define an out type&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Define a WaterSupply class and verify if water needs processing.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WaterSupply&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; needsProcessing: Boolean)

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Define a TapWater class extends [WaterSupply] class.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TapWater&lt;/span&gt;: WaterSupply(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// We do water processing by add chemical cleaners.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addChemicalCleaners&lt;/span&gt;() {
        needsProcessing = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
  }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Define a Aquarium class, it accept water supply.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Aquarium&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; T: WaterSupply&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; waterSupply: T) {
    ...
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Define a funtion that could add Aquarium item.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addItem&lt;/span&gt;(aquarium: Aquarium&amp;lt;WaterSupply&amp;gt;) = println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;item added&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Test function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g1&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; aquarium = Aquarium(TapWater())
    addItem(aquarium)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¦ææä»¬ç§»é¤äº &lt;code&gt;class Aquarium&amp;lt;out T: WaterSupply&amp;gt;&lt;/code&gt; å®ä¹ä¸­ç &lt;code&gt;out&lt;/code&gt; å³é®å­ï¼&lt;code&gt;addItem&lt;/code&gt; å½æ°å°±ä¼æ¥ Type mismatch error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-error&#34; data-lang=&#34;error&#34;&gt;Type mismatch
Required: Aquarium&amp;lt;WaterSupply&amp;gt;
Found: Aquarium&amp;lt;TapWater&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;define-an-in-type&#34;&gt;Define an in type&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Define a Cleaner interface that takes a generic T that&amp;#39;s constrained to WaterSupply.Since it is only used as an argument to clean(), we can make it an in paramter.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cleaner&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; T : WaterSupply&amp;gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clean&lt;/span&gt;(waterSupply: T)
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Create a class TapWaterCleaner that implements Cleaner for cleaning TapWater by adding chemicals
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TapWaterCleaner&lt;/span&gt; : Cleaner&amp;lt;TapWater&amp;gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clean&lt;/span&gt;(waterSupply: TapWater) {
    waterSupply.addChemicalCleaners()
  }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * In the Aquarium class, update addWater() to take a Cleaner of type T, and clean the water before adding it.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Aquarium&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; T: WaterSupply&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; waterSupply: T) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addWater&lt;/span&gt;(cleaner: Cleaner&amp;lt;T&amp;gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (waterSupply.needsProcessing) {
      cleaner.clean(waterSupply)
    }
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Water added!&amp;#34;&lt;/span&gt;)
  }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Test function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g2&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; cleaner = TapWaterCleaner()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; aquarium = Aquarium(TapWater())
    aquarium.addWater(cleaner)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin å°ä½¿ç¨ in å out ç±»åæ¥ç¡®ä¿æä»¬å¯ä»¥å®å¨å°ä½¿ç¨æ³åãout å in çä½¿ç¨åºæ¯ï¼out ç±»åå¯ä»¥ä½ä¸ºè¿åå¼åå¤ä¼ éï¼in ç±»åå¯ä»¥ä½ä¸ºåæ°ååä¼ éã&lt;/p&gt;
&lt;h2 id=&#34;type-erasure-and-generic-type-checks&#34;&gt;Type erasure and generic type checks&lt;/h2&gt;
&lt;p&gt;Java ä¸­æ³ååªå¨ç¼è¯æ¶ä½¿ç¨ï¼ç¼è¯å¨ç¡®ä¿ææç±»åç¸å³çæä½é½å¯ä»¥å®å¨çè¿è¡ãå¨è¿è¡æ¶ï¼æ³åç±»åçå®ä¾å¹¶ä¸ææå®éç±»åçä¿¡æ¯ï¼&lt;a href=&#34;https://kotlinlang.org/docs/reference/typecasts.html#type-erasure-and-generic-type-checks&#34;&gt;ç±»åæ¦é¤&lt;/a&gt;ï¼ï¼æ¯å¦ &lt;code&gt;List&amp;lt;Foo&amp;gt;&lt;/code&gt; ä¼æ¦é¤ä¸º &lt;code&gt;List&amp;lt;*&amp;gt;&lt;/code&gt;ãéå¸¸æ æ³å¨è¿è¡æ¶æ£æ¥å®ä¾æ¯å¦å±äºæç§æ³åç±»åï¼ä¸è¿å¨ Kotlin ä¸­æä»¬å¯ä»¥éè¿ &lt;code&gt;inline + reified&lt;/code&gt; çç»åå®ç°è¿è¡æ¶ç±»åå¤æ­ã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Aquarium&lt;/span&gt;&amp;lt;T : WaterSupply&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; waterSupply: T) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addWater&lt;/span&gt;(cleaner: Cleaner&amp;lt;T&amp;gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (waterSupply.needsProcessing) {
      cleaner.clean(waterSupply)
    }
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Water added!&amp;#34;&lt;/span&gt;)
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Declare the function inline, and make the type reified.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;reified R : WaterSupply&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isOfType&lt;/span&gt;(): Boolean = waterSupply &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; R
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;æä»¬å¨ Aquarium ç±»ä¸­æ·»å  &lt;code&gt;isOfType&lt;/code&gt; æ¹æ³ï¼éè¿ &lt;code&gt;inline&lt;/code&gt; å£°ææ¹æ³ï¼å°æ³åç±»åæ è®°ä¸º &lt;code&gt;reified&lt;/code&gt;åï¼&lt;code&gt;is&lt;/code&gt; å³é®å­å¯ä»¥å¨è¿è¡æ¶åæ³åç±»åæ£æ¥ã&lt;/p&gt;
&lt;h3 id=&#34;make-extension-functions&#34;&gt;Make extension functions&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;reified T: WaterSupply&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Aquarium&lt;/span&gt;&amp;lt;*&amp;gt;.isOfType() = waterSupply &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/generics.html#star-projections&#34;&gt;Star-projections&lt;/a&gt; å¾å Java ç¼ç¨ä¸­ç raw typesï¼ä¸è¿æ´å å®å¨ã&lt;/p&gt;
&lt;h2 id=&#34;inline-functions&#34;&gt;inline functions&lt;/h2&gt;
&lt;p&gt;Lambdas åé«é¶å½æ°é½å¾æç¨ï¼ä½æä»¬åºè¯¥äºè§£ä¸ä¸ªäºå®ï¼Lambda æ¯å¯¹è±¡ãLambda è¡¨è¾¾å¼æ¯ &lt;code&gt;Function&lt;/code&gt; æ¥å£çå®ä¾ï¼&lt;code&gt;Function&lt;/code&gt; æ¥å£æ¯ &lt;code&gt;Object&lt;/code&gt; çå­ç±»ã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * èªå®ä¹ with å½æ°ï¼æ¥æ¶ [name] å­ç¬¦ä¸²ï¼æ§è¡ name.block() å½æ°
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;customWith&lt;/span&gt;(name: String, block: String.() -&amp;gt; Unit) {
  name.block()
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * è°ç¨ customWith å½æ°ï¼å¹¶å° fish.name é¦å­æ¯å¤§å
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
customWith(fish.name) {
  capitalize()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ä¸é¢è°ç¨ &lt;code&gt;customWith&lt;/code&gt; å½æ°å®éçå®ç°åè¿æ ·ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;customWith(fish.name, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;: Function1&amp;lt;String, Unit&amp;gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;invoke&lt;/span&gt;(name: String) {
    name.capitalize()
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;éå¸¸è¿ä¸æ¯é®é¢ï¼å ä¸ºåå»ºå¯¹è±¡åè°ç¨å½æ°ä¸ä¼äº§çå¤ªå¤çå¼éãä¸è¿åå¦ &lt;code&gt;customWith&lt;/code&gt; å½æ°å¨éå¸¸å¤çå°æ¹é½æè°ç¨ï¼é£ä¹å¼éå°±ä¼å¤èµ·æ¥ã&lt;/p&gt;
&lt;p&gt;Kotlin æä¾ &lt;code&gt;inline&lt;/code&gt; ä½ä¸ºå¤çè¿ç§æåµçä¸ç§æ¹å¼ï¼éè¿å¢å ç¼è¯å¨çå·¥ä½æ¥åå°è¿è¡æ¶çå¼éãå°å½æ°æ è®°ä¸º &lt;code&gt;inline&lt;/code&gt; æå³çæ¯æ¬¡è°ç¨è¯¥å½æ°æ¶ï¼ç¼è¯å¨å®éä¸ä¼å°æºç è½¬æ¢ä¸ºåèå½æ°ã&lt;/p&gt;
&lt;p&gt;æ¯å¦æä»¬å¨ä½¿ç¨ &lt;code&gt;customWith&lt;/code&gt; æ¶æ è®°ä¸º &lt;code&gt;inline&lt;/code&gt;ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; customWith(fish.name) {
  capitalize()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å®è½¬æ¢ååè¿æ ·ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;fish.name.capitalize()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;éè¦æ³¨æçæ¯ï¼åèå¤§åå½æ°ä¼å¢å ä»£ç å¤§å°ï¼å æ­¤ &lt;code&gt;inline&lt;/code&gt; éç¨äºå¤æ¬¡ä½¿ç¨çç®åçå½æ°ï¼å¦ &lt;code&gt;customWith&lt;/code&gt;ã&lt;/p&gt;
&lt;h2 id=&#34;sam&#34;&gt;SAM&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Single Abstract Method(SAM)&lt;/em&gt; å³è¡¨ç¤ºåªæä¸ä¸ªæ¹æ³çæ¥å£ãå¨ Java ç¼å API æ¶éå¸¸å¸¸è§ï¼æ¯å¦ &lt;code&gt;Runnable&lt;/code&gt; æ¥å£ï¼åªå®ä¹äºä¸ä¸ª &lt;code&gt;run()&lt;/code&gt; æ¹æ³ï¼&lt;code&gt;Callable&lt;/code&gt; æ¥å£ï¼å®ä¹äºä¸ä¸ª &lt;code&gt;call()&lt;/code&gt; æ¹æ³ã&lt;/p&gt;
&lt;p&gt;æä»¬å®ä¹ä¸ª SAMï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JavaRun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Runnable runnable&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    runnable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¨ Kotlin ä¸­è°ç¨è¯¥å½æ°ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; runnable = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;: Runnable {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() {
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;m a Runnable&amp;#34;&lt;/span&gt;)
  }
}

JavaNow.runNow(runnable)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin æä¾ç SAM æºå¶ä¼æç¤ºç¼©åä»£ç ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;JavaNow.runNow {
  println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lambda as a Runnable&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SAM çæ¨¡çåè¿æ ·ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;Class.singleAbstractMethod {lambda_of_override}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Interface Delegation</title>
      <link>https://zacash.cn/post/interface-delegation/</link>
      <pubDate>Tue, 11 Aug 2020 20:42:28 +0800</pubDate>
      
      <guid>https://zacash.cn/post/interface-delegation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/kotlin-bootcamp-classes/#7&#34;&gt;æ¥å£å§æï¼Interface delegationï¼&lt;/a&gt; æ¯ä¸ç§&amp;quot;é«çº§&amp;quot;ææ¯ï¼æ¥å£çæ¹æ³ç± helper æ delegate å¯¹è±¡å®ç°ï¼ç¶åç»å«çç±»ä½¿ç¨ãå½æä»¬å¨ä¸ç³»åä¸ç¸å³çç±»ä¸­ä½¿ç¨æ¥å£æ¶ï¼è¿é¡¹ææ¯ä¼å¾æç¨ï¼æä»¬å°éè¦ä½¿ç¨çæ¥å£çå½æ°æ·»å å°åç¬ç helper ç±»ä¸­ï¼å«çç±»ä½¿ç¨ helper ç±»çå®ä¾æ¥å®ç°è¿ä¸ªå½æ°ã&lt;/p&gt;
&lt;h2 id=&#34;define-interface&#34;&gt;Define interface&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Define fish action interface.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FishAction&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eat&lt;/span&gt;()
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Define fish color interface.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FishColor&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; color: String
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Plecostomus class implement [FishAction] and [FishColor] interface.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Plecostomus&lt;/span&gt;: FishAction, FishColor {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gold&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eat&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eat algae&amp;#34;&lt;/span&gt;)
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Shark class implement [FishAction] and [FishColor] interface.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Shark&lt;/span&gt;: FishAction, FishColor {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eat&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eat fish&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;make-a-singleton-class&#34;&gt;Make a singleton class&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Creat a singleton for gold fish color.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GoldColor&lt;/span&gt;: FishColor {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; color = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gold&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Create printing fish action.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrintingFishAction&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; food: String): FishAction {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eat&lt;/span&gt;() {
        println(food)
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Plecostomus use interface delegation mechanism, and all overrides
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * are handled by interface delegation.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Plecostomus&lt;/span&gt;(fishColor: FishColor = GoldColor): FishAction &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; PrintingFishAction(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eat algae&amp;#34;&lt;/span&gt;), FishColor &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; fishColor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Interface delegation is powerful, and you should generally consider how to use it whenever you might use an abstract class in another language. It lets you use composition to plug in behaviors, instead of requiring lots of subclasses, each specialized in a different way.&lt;/p&gt;
&lt;p&gt;æ¥å£å§æå¾æç¨ï¼éå¸¸æ¯å½æä»¬å¨ä½¿ç¨å¦ä¸ç§è¯­è¨çæ½è±¡ç±»æ¶é½åºè¯¥èèä½¿ç¨å®ãå®ä½¿æä»¬å¯ä»¥ä½¿ç¨ç»åæ¥æå¥ behaviorï¼èä¸æ¯éè¦å¤§éåæç¹è²çå­ç±»ã&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Indigo</title>
      <link>https://zacash.cn/post/introducing-indigo/</link>
      <pubDate>Mon, 10 Aug 2020 09:00:00 -0400</pubDate>
      
      <guid>https://zacash.cn/post/introducing-indigo/</guid>
      <description>&lt;p&gt;Indigo is a lightweight theme for &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; with &lt;a href=&#34;https://indieweb.org&#34;&gt;IndieWeb&lt;/a&gt; features baked in. It&amp;rsquo;s great for longer-form blogging, placing its focus on distraction-free reading and beautiful typefaces.&lt;/p&gt;
&lt;h2 id=&#34;indieweb-features&#34;&gt;IndieWeb features&lt;/h2&gt;
&lt;p&gt;A key feature of this theme is its support for IndieWeb features, including microformats and web sign-in.&lt;/p&gt;
&lt;h3 id=&#34;web-sign-in&#34;&gt;Web sign-in&lt;/h3&gt;
&lt;p&gt;Indigo handles web sign-in by setting the &lt;code&gt;authorization_endpoint&lt;/code&gt; to &lt;a href=&#34;https://indieauth.com&#34;&gt;IndieAuth.com&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IndieAuth.com is part of the &lt;a href=&#34;https://indieweb.org/why&#34;&gt;IndieWeb movement&lt;/a&gt; to take back control of your online identity. Instead of logging in to websites as &amp;ldquo;you on Twitter&amp;rdquo; or &amp;ldquo;you on Facebook&amp;rdquo;, &lt;strong&gt;you should be able to log in as just &amp;ldquo;you&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This allows you to sign in to certain services simply by providing your site&amp;rsquo;s domain name.&lt;/p&gt;
&lt;h3 id=&#34;microformats&#34;&gt;microformats&lt;/h3&gt;
&lt;p&gt;Indigo marks up content with appropriate &lt;a href=&#34;http://microformats.org&#34;&gt;microformats&lt;/a&gt;, which provides semantic definitions of your content to other software. Posts are marked up with &lt;code&gt;h-entry&lt;/code&gt; classes, like &lt;code&gt;p-name&lt;/code&gt;, &lt;code&gt;p-author&lt;/code&gt;, and &lt;code&gt;e-content&lt;/code&gt;, while the author bio is marked up with &lt;code&gt;h-card&lt;/code&gt; classes, including &lt;code&gt;u-photo&lt;/code&gt;, &lt;code&gt;u-url&lt;/code&gt;, &lt;code&gt;p-locality&lt;/code&gt;/&lt;code&gt;p-country-name&lt;/code&gt;, and &lt;code&gt;p-note&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;open-typefaces&#34;&gt;Open typefaces&lt;/h2&gt;
&lt;p&gt;Indigo uses a combination of three beautiful typefaces to render your words.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bboxtype.com/typefaces/FiraSans/#!layout=specimen&#34;&gt;Fira Sans&lt;/a&gt; for heading text&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://practicaltypography.com/charter.html&#34;&gt;Charter&lt;/a&gt; for body text&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; for monospaced text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Licenses are included in the themeâs &lt;code&gt;static/fonts&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Have a look at a couple of paragraphs of placeholder text using the wonderfully readable Charter:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer eleifend nulla ac elit venenatis posuere. Sed id aliquam arcu, et malesuada lectus. &lt;strong&gt;Donec et dignissim massa. Pellentesque in laoreet nibh. Pellentesque sagittis, libero quis vestibulum aliquam, ante risus imperdiet magna, at ornare dolor libero quis nunc.&lt;/strong&gt; Donec quis tempus purus. Cras ornare magna ac facilisis tristique. Nulla aliquet purus quis massa rutrum interdum ac at magna. Cras fermentum magna id orci viverra facilisis. Ut vitae lobortis nisl.&lt;/p&gt;
&lt;p&gt;Sed interdum tincidunt venenatis. Sed hendrerit dictum nisi, at dignissim orci consectetur quis. Aenean sed nisl et nisl placerat euismod. Proin hendrerit nulla at rhoncus molestie. Cras eu gravida erat, vestibulum ornare diam. &lt;em&gt;Praesent nunc arcu, ultrices et risus sed, dictum mattis dui. Maecenas vitae nisl at massa porta pellentesque&lt;/em&gt;. Donec eget urna eget nisl imperdiet scelerisque eget a mauris. Nam fringilla sem id vehicula rhoncus. Curabitur tincidunt massa mauris, facilisis placerat odio eleifend sit amet. Etiam nec vehicula sapien, at dignissim risus. Sed elit erat, lacinia eu vulputate at, semper eu nulla. Quisque a urna sed nulla viverra egestas nec quis nunc. Curabitur iaculis elit in orci sollicitudin suscipit.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;And code snippets look great with Fira Code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;article&amp;gt;
    &amp;lt;header&amp;gt;
    {{ if .Title }}
    &amp;lt;h2 class=&amp;quot;list-title&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
    &amp;lt;p class=&amp;quot;list-post-date&amp;quot;&amp;gt;
        &amp;lt;time datetime=&amp;quot;{{ .Date.Format &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot; | safeHTML }}&amp;quot;&amp;gt;
        {{ .PublishDate.Format &amp;quot;2 January, 2006 at 15:04 MST&amp;quot; }}
        &amp;lt;/time&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;div&amp;gt;
    {{ .Summary | plainify | safeHTML }}
    &amp;lt;/div&amp;gt;
    {{ if .Truncated }}
    &amp;lt;p&amp;gt;&amp;lt;a class=&amp;quot;read-more&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;Read more &amp;amp;rarr;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
    {{ end }}
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;contributions-welcome&#34;&gt;Contributions welcome&lt;/h2&gt;
&lt;p&gt;Indigo is distributed under the &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/blob/master/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;, so feel free to fork the repository and make it your own! If you&amp;rsquo;ve got ideas on how to improve the theme, let me know by &lt;a href=&#34;issue&#34;&gt;opening an issue in GitHub&lt;/a&gt; â but please be sure to review the documentation on &lt;a href=&#34;https://github.com/AngeloStavrow/indigo/blob/master/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lambdas and High-order Functions</title>
      <link>https://zacash.cn/post/lambdas-and-high-order-functions/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/post/lambdas-and-high-order-functions/</guid>
      <description>&lt;p&gt;é¤äºä¼ ç»å½åçå½æ°å¤ï¼Kotlin è¿æ¯æ &lt;a href=&#34;https://kotlinlang.org/docs/reference/lambdas.html&#34;&gt;lambdas&lt;/a&gt;. &lt;em&gt;lambda&lt;/em&gt; æ¯ç»æå½æ°çè¡¨è¾¾å¼ï¼ä¸ä¸ªæ²¡æåç§°çå½æ°ãlambda è¡¨è¾¾å¼å¯ä»¥ä½ä¸ºæ°æ®ä¼ éãå¨å¶ä»è¯­è¨ä¸­ï¼lambda è¢«ç§°ä¸º &lt;em&gt;å¿åå½æ°ï¼anonymous functionï¼&lt;/em&gt;ï¼&lt;em&gt;å½æ°å­é¢éï¼function literalsï¼&lt;/em&gt; æç±»ä¼¼åç§°ã&lt;/p&gt;
&lt;h3 id=&#34;high-order-functions&#34;&gt;High-order functions&lt;/h3&gt;
&lt;p&gt;æä»¬å¯ä»¥éè¿ä¼ é lambda å°å¦ä¸ä¸ªå½æ°ï¼æ¥åå»º &lt;em&gt;é«é¶å½æ°ï¼high-order functionï¼&lt;/em&gt;ã&lt;code&gt;map&lt;/code&gt; æ¯ä¸ä¸ªé«é¶å½æ°ï¼ä½ ä¼ å¥ç lambda è¡¨è¾¾å¼æ¯éè¦ &lt;em&gt;åºç¨çè½¬æ¢ï¼transformation to applyï¼&lt;/em&gt;ã&lt;/p&gt;
&lt;h3 id=&#34;create-lambdas&#34;&gt;Create lambdas&lt;/h3&gt;
&lt;p&gt;ä¸å½åå½æ°ä¸æ ·ï¼lambda ä¹å¯ä»¥æå¥åãä¾å¦ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; waterFilter = { dirty: Int -&amp;gt; dirty / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ä½äº &lt;code&gt;-&amp;gt;&lt;/code&gt; å·¦ä¾§çä¸ºå¥ååå¥åç±»åï¼&lt;code&gt;-&amp;gt;&lt;/code&gt; å³ä¾§å³ä¸ºéè¦æ§è¡çä»£ç ãå° lambda è¡¨è¾¾å¼èµå¼ç»åéåï¼æä»¬å°±å¯ä»¥åå½æ°ä¸æ ·è°ç¨å®ã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(waterFilter(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;// print =&amp;gt; 10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin çå½æ°è¯­æ³ä¸ lambdas è¯­æ³ç´§å¯ç¸å³ï¼æä»¬å¯ä»¥ä½¿ç¨è¿ç§è¯­æ³æç¡®å£°æä¸ä¸ªåå«å½æ°çåéï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; waterFilter: (Int) -&amp;gt; Int = {dirty -&amp;gt; dirty / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-high-order-function&#34;&gt;Create high-order function&lt;/h3&gt;
&lt;p&gt;æä»¬å¯ä»¥ä½¿ç¨ lambdas æ¥åå»ºé«é¶å½æ°ï¼å³å½æ°çå¥åæ¯å¦ä¸ä¸ªå½æ°ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateDirty&lt;/span&gt;(dirty: Int, operation: (Int) -&amp;gt; Int): Int {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; operation(dirty)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;æä»¬åå»ºäºä¸ä¸ª &lt;code&gt;updateDirty&lt;/code&gt; å½æ°ï¼è¿ä¸ªå½æ°çç¬¬äºä¸ªåæ°æ¯å¦ä¸ä¸ªå½æ° &lt;code&gt;operation&lt;/code&gt;ï¼&lt;code&gt;operation&lt;/code&gt; å½æ°æ¥æ¶ä¸ä¸ª &lt;code&gt;Int&lt;/code&gt; ç±»åçå¥åå¹¶è¿å &lt;code&gt;Int&lt;/code&gt;ç±»åçå¼ãå½æ°ä½å°ç¬¬ä¸ä¸ªåæ°ä½ä¸ºå¥åï¼è°ç¨äºä¼ å¥çå½æ°ã&lt;/p&gt;
&lt;p&gt;å¯¹äº &lt;code&gt;updateDirty&lt;/code&gt; å½æ°çä½¿ç¨ï¼æä»¬å¯ä»¥ a).åå»ºä¸ä¸ª lambda ä¼ å¥ï¼å¦ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; waterFilter: (Int) -&amp;gt; Int = {dirty -&amp;gt; dirty / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}
println(updateDirty(&lt;span style=&#34;color:#ae81ff&#34;&gt;20.&lt;/span&gt; waterFilter))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;é¤äºåå»º lambda å¤ï¼æä»¬è¿å¯ä»¥ b).ä¼ å¥å¸¸è§çå½åå½æ°ï¼åªæ¯ä¸ç´æ¥ lambda åéä¸åï¼æä»¬éè¦ä½¿ç¨ &lt;code&gt;::&lt;/code&gt; æä½ç¬¦æ¥ä¼ å¥å½åå½æ°çå¼ç¨ã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;waterFilter&lt;/span&gt;(dirty: Int): Int = dirty / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
println(updateDirty(&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;waterFilter))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;è¿ç§åè¡çå½æ°ä¹ç§°ä¸º &lt;em&gt;compat functions&lt;/em&gt; æ &lt;em&gt;single-expression functions&lt;/em&gt;ï¼å¯ä»¥å¢å ä»£ç å¯è¯»æ§ã&lt;/p&gt;
&lt;h3 id=&#34;last-parameter-call-syntax&#34;&gt;Last parameter call syntax&lt;/h3&gt;
&lt;p&gt;Kotlin å¾åäºå°å¸¦æå½æ°çä»»æåæ°ä½ä¸ºæåä¸ä¸ªå¥åãå¨ä½¿ç¨é«é¶å½æ°æ¶ï¼Kotlin æä¸ç§ç¹æ®çè¯­æ³ï¼ç§°ä¸º &lt;a href=&#34;https://kotlinlang.org/docs/reference/lambdas.html#passing-a-lambda-to-the-last-parameter&#34;&gt;last parameter call syntax&lt;/a&gt; å¯ä»¥ä½¿ä»£ç æ´å ç®æ´ãè¿ç§æåµä¸ï¼æä»¬å¯ä»¥ä¼ å¥ä¸ä¸ª lambda èæ éæ¾å¥æ¬å·åï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; dirty = &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
dirty = updateDirty(dirty) { dirty -&amp;gt; dirty / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; }
println(dirty)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Threads and Locks</title>
      <link>https://zacash.cn/post/threads-and-locks/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/post/threads-and-locks/</guid>
      <description>&lt;p&gt;Threads are created and managed by the classes Thread and ThreadGroup. Creating a Thread object creates a thread, and that is the only way to create a thread. When the thread is created, it is not yet active; it begins to run when its start method is called.&lt;/p&gt;
&lt;h2 id=&#34;813-locks-and-synchronization&#34;&gt;8.13 Locks and Synchronization&lt;/h2&gt;
&lt;p&gt;There is a lock associated with every object. The Java programming language does not provide a way to perform separate lock and unlock operations; instead, they are implicitly performed by high-level constructs that always arrange to pair such operations correctly. (The Java virtual machine, however, provides separate monitorenter and monitorexit instructions that implement the lock and unlock operations.)&lt;/p&gt;
&lt;p&gt;æ¯ä¸ªå¯¹è±¡é½æä¸ä¸ªéãJava æ²¡æåç¬æä¾éå®åè§£éçæ¹æ³ï¼ç¸åå®ä»¬ç±å§ç»å®æåç¡®éå¯¹æä½çé«é¶æé éå¼æ§è¡ãJvm æä¾äºåç¬ç &lt;em&gt;monitorenter&lt;/em&gt; å &lt;em&gt;monitorexit&lt;/em&gt; æä»¤ï¼ç¨äºå®ç°éå®åè§£éæä½ã&lt;/p&gt;
&lt;p&gt;The synchronized statement computes a reference to an object; it then attempts to perform a lock operation on that object and does not proceed further until the lock operation has successfully completed. (A lock operation may be delayed because the rules about locks can prevent the main memory from participating until some other thread is ready to perform one or more unlock operations.) After the lock operation has been performed, the body of the synchronized statement is executed. Normally, a compiler for the Java programming language ensures that the lock operation implemented by a monitorenter instruction executed prior to the execution of the body of the synchronized statement is matched by an unlock operation implemented by a monitorexit instruction whenever the synchronized statement completes, whether completion is normal or abrupt.&lt;/p&gt;
&lt;p&gt;åæ­¥è¯­å¥è®¡ç®å¯¹è±¡çå¼ç¨ï¼å®å°è¯å¯¹è¯¥å¯¹è±¡æ§è¡éå®æä½ï¼å¹¶ä¸å¨éå®æä½å®æåä¸ä¼è¿ä¸æ­¥çæä½ãï¼éå®æä½å¯è½å»¶è¿ï¼å ä¸ºæå³éå®çè§åå¯è½é»æ­¢ä¸»åå­åä¸ï¼ç´å°çº¿ç¨åå¤ä¸ä¸ªæå¤ä¸ªè§£éæä½ä¸ºæ­¢ãï¼æå®éå®æä½åï¼å°æ§è¡åæ­¥è¯­å¥çä¸»ä½ãéå¸¸ï¼Java ç¼è¯å¨å¯ä»¥ç¡®ä¿ï¼ç± &lt;em&gt;monitorenter&lt;/em&gt; æä»¤ï¼å¨æ§è¡åæ­¥è¯­å¥çä¸»ä½ä¹åæ§è¡ï¼å®ç°çéå®æä½åç± &lt;em&gt;monitorexit&lt;/em&gt; æä»¤å®ç°çè§£éæä½ç¸å¹éï¼èä¸ç®¡åæ­¥è¯­å¥æ¯å¦æ§è¡å®ææææ­ã&lt;/p&gt;
&lt;p&gt;A synchronized method automatically performs a lock operation when it is invoked; its body is not executed until the lock operation has successfully completed. If the method is an instance method, it locks the lock associated with the instance for which it was invoked (that is, the object that will be known as this during execution of the method&amp;rsquo;s body). If the method is static, it locks the lock associated with the Class object that represents the class in which the method is defined. If execution of the method&amp;rsquo;s body is ever completed, either normally or abruptly, an unlock operation is automatically performed on that same lock.&lt;/p&gt;
&lt;p&gt;åæ­¥æ¹æ³å¨è¢«è°ç¨æ¶ä¼èªå¨æ§è¡éå®æä½ãå¨éå®æä½å®æåä¸ä¼æ§è¡æ¹æ³ä¸»ä½ãå¦æè¯¥æ¹æ³æ¯å®ä¾æ¹æ³ï¼åå®å°ä¸è°ç¨è¯¥æ¹æ³çå®ä¾éå®ãå¦æè¯¥æ¹æ³æ¯éæçï¼åå®å°ä¸å®ä¹è¯¥æ¹æ³ç Class å¯¹è±¡ç¸å³èçç±»éå®ãå¦ææ¹æ³ä¸»ä½æ­£å¸¸æ§è¡æçªç¶ä¸­æ­ï¼åä¸è¯¥ééå¯¹è§£éæä½å°èªå¨æ§è¡ã&lt;/p&gt;
&lt;p&gt;Best practice is that if a variable is ever to be assigned by one thread and used or assigned by another, then all accesses to that variable should be enclosed in synchronized methods or synchronized statements.&lt;/p&gt;
&lt;p&gt;æä½³å®è·µæ¯å¯¹äºæä¸ªåéç±ä¸ä¸ªçº¿ç¨ &lt;em&gt;assign&lt;/em&gt; å¹¶ç±å¦ä¸ä¸ªçº¿ç¨ &lt;em&gt;use&lt;/em&gt; æ &lt;em&gt;assign&lt;/em&gt;ï¼åå¯¹è¯¥åéçææè®¿é®é½åºè¯¥æ¾å¨ &lt;em&gt;synchronized&lt;/em&gt; æ¹æ³æ &lt;em&gt;synchronized&lt;/em&gt; è¯­å¥ä¸­ã&lt;/p&gt;
&lt;p&gt;Although a compiler for the Java programming language normally guarantees structured use of locks (see Section 7.14, &amp;ldquo;Synchronization&amp;rdquo;), there is no assurance that all code submitted to the Java virtual machine will obey this property. Implementations of the Java virtual machine are permitted but not required to enforce both of the following two rules guaranteeing structured locking.&lt;/p&gt;
&lt;p&gt;Let T be a thread and L be a lock. Then:&lt;/p&gt;
&lt;p&gt;The number of lock operations performed by T on L during a method invocation must equal the number of unlock operations performed by T on L during the method invocation whether the method invocation completes normally or abruptly.&lt;/p&gt;
&lt;p&gt;At no point during a method invocation may the number of unlock operations performed by T on L since the method invocation exceed the number of lock operations performed by T on L since the method invocation.
In less formal terms, during a method invocation every unlock operation on L must match some preceding lock operation on L.
Note that the locking and unlocking automatically performed by the Java virtual machine when invoking a synchronized method are considered to occur during the calling method&amp;rsquo;s invocation.&lt;/p&gt;
&lt;h2 id=&#34;714-synchronizationsynchronized&#34;&gt;7.14 &lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se6/html/Compiling.doc.html#6530&#34;&gt;Synchronization&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Java virtual machine provides explicit support for synchronization through its monitorenter and monitorexit instructions. For code written in the Java programming language, however, perhaps the most common form of synchronization is the synchronized method.&lt;/p&gt;
&lt;p&gt;Jvm éè¿ &lt;em&gt;monitorenter&lt;/em&gt; å &lt;em&gt;monitorexit&lt;/em&gt; æä»¤ä¸ºåæ­¥æä½æä¾æ¯æãä½å¯¹äº Java ç¼åçä»£ç ï¼æå¸¸è§çåæ­¥å½¢å¼å¯è½æ¯ &lt;em&gt;synchronized&lt;/em&gt; æ¹æ³ã&lt;/p&gt;
&lt;p&gt;A synchronized method is not normally implemented using monitorenter and monitorexit. Rather, it is simply distinguished in the runtime constant pool by the ACC_SYNCHRONIZED flag, which is checked by the method invocation instructions. When invoking a method for which ACC_SYNCHRONIZED is set, the current thread acquires a monitor, invokes the method itself, and releases the monitor whether the method invocation completes normally or abruptly. During the time the executing thread owns the monitor, no other thread may acquire it. If an exception is thrown during invocation of the synchronized method and the synchronized method does not handle the exception, the monitor for the method is automatically released before the exception is rethrown out of the synchronized method.&lt;/p&gt;
&lt;p&gt;Jvm éå¸¸ä¸ä½¿ç¨ &lt;em&gt;monitorenter&lt;/em&gt; å &lt;em&gt;monitorexit&lt;/em&gt; å®ç°åæ­¥æ¹æ³ï¼èæ¯å¨è¿è¡æ¶å¸¸éæ± éè¿ &lt;em&gt;ACC_SYNCHRONIZED&lt;/em&gt; æ è®°å ä»¥åºåï¼è¯¥æ è®°ç±æ¹æ³è°ç¨æä»¤æ ¡éªãå½è°ç¨æ è®°ä¸º &lt;em&gt;ACC_SYNCHRONIZED&lt;/em&gt; çæ¹æ³æ¶ï¼å½åçº¿ç¨è·å monitorï¼è°ç¨è¿ä¸ªæ¹æ³èªèº«ï¼å¹¶éæ¾ monitorï¼ä¸ç®¡æ¹æ³è°ç¨æ¯æ­£å¸¸å®ææçªç¶ä¸­æ­ã&lt;/p&gt;
&lt;p&gt;æ­£å¨æ§è¡ççº¿ç¨æ¥æ monitor æ¶ï¼å«ççº¿ç¨æ æ³è·åå®ãå¦æå¨è°ç¨åæ­¥æ¹æ³æ¶æåºå¼å¸¸ï¼ä¸åæ­¥æ¹æ³æ æ³å¤çè¯¥å¼å¸¸ï¼åå¨å¼å¸¸ä»åæ­¥æ¹æ³æåºæ§è¡ï¼èªå¨éæ¾è¯¥æ¹æ³ç monitor.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;monitorenter&lt;/em&gt; and &lt;em&gt;monitorexit&lt;/em&gt; instructions exist to support synchronized statements. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onlyMe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Foo f&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        doSomething&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is compiled to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;Method void onlyMe(Foo)
   0 	aload_1				// Push f	
   1 	astore_2			// Store it in local variable 2
   2 	aload_2				// Push local variable 2 (f)
   3 	monitorenter		// Enter the monitor associated with f
   4 	aload_0				// Holding the monitor, pass this and...
   5 	invokevirtual #5 	// ...call Example.doSomething()V
   8	aload_2				// Push local variable 2 (f)
   9	monitorexit			// Exit the monitor associated with f
  10	return				// Return normally
  11 	aload_2				// In case of any throw, end up here
  12 	monitorexit			// Be sure to exit monitor...
  13 	athrow				// ...then rethrow the value to the invoker
Exception table:
   	From	To 	Target 		Type
    4     	8   11   		any
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;volatile&#34;&gt;Volatile&lt;/h2&gt;
&lt;p&gt;The rules for volatile variables effectively require that main memory be touched exactly once for each use or assign of a volatile variable by a thread, and that main memory be touched in exactly the order dictated by the thread execution semantics. However, such memory operations are not ordered with respect to read and write operations on nonvolatile variables.&lt;/p&gt;
&lt;h2 id=&#34;thread-pool&#34;&gt;Thread Pool&lt;/h2&gt;
&lt;p&gt;Most of the executor implementations in &lt;em&gt;java.util.concurrent&lt;/em&gt; use thread pools, which consist of &lt;em&gt;worker threads&lt;/em&gt;. This kind of thread exists separately from the &lt;em&gt;Runnable&lt;/em&gt; and &lt;em&gt;Callable&lt;/em&gt; tasks it executes and is often used to execute multiple tasks.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;java.util.concurrent&lt;/em&gt; åä¸­å¤§é¨å executor å®ç°é½ä½¿ç¨çº¿ç¨æ± ï¼è¿äºçº¿ç¨æ± ç± &lt;em&gt;work threads&lt;/em&gt; ç»æãè¿äºçº¿ç¨ä¸å®æ§è¡ç &lt;em&gt;Runnable&lt;/em&gt; å &lt;em&gt;Callable&lt;/em&gt; ä»»å¡åå¼ï¼éå¸¸ç¨äºæ§è¡å¤ä¸ªä»»å¡ã&lt;/p&gt;
&lt;p&gt;Using &lt;em&gt;worker threads&lt;/em&gt; minimizes the overhead due to thread creation. Thread objects use a significant amount of memory, and in a large-scale application, allocating and deallocating many thread objects creates a significant memory management overhead.&lt;/p&gt;
&lt;p&gt;ä½¿ç¨ &lt;em&gt;worker threads&lt;/em&gt; å¯ä»¥æå¤§éåº¦åå°çº¿ç¨åå»ºæå¸¦æ¥çå¼éãçº¿ç¨å¯¹è±¡å ç¨å¤§éåå­ï¼å¹¶ä¸å¨å¤§è§æ¨¡ App ä¸­ï¼åéååæ¶åéè®¸å¤çº¿ç¨ä¼äº§çå¤§éåå­ç®¡ççå¼éã&lt;/p&gt;
&lt;p&gt;One common type of thread pool is the &lt;em&gt;fixed thread pool&lt;/em&gt;. This type of pool always has a specified number of threads running; if a thread is somehow terminated while it is still in use, it is automatically replaced with a new thread. Tasks are submitted to the pool via an &lt;em&gt;internal queue&lt;/em&gt;, which holds extra tasks whenever there are more active tasks than threads.&lt;/p&gt;
&lt;p&gt;çº¿ç¨æ± çä¸ç§å¸¸è§ç±»åæ¯ &lt;em&gt;fixed thread pool&lt;/em&gt;ãè¿ç§ç±»åççº¿ç¨æ± å§ç»ææå®æ°éççº¿ç¨å¨è¿è¡ï¼å¦æä¸ä¸ªçº¿ç¨å¨ä½¿ç¨æ¶è¢«æç§æ¹å¼çªç¶ç»æ­¢ï¼åçº¿ç¨æ± ä¼èªå¨åå»ºæ°ççº¿ç¨æ¿æ¢ç»æ­¢ççº¿ç¨ãä»»å¡éè¿åé¨éåæäº¤å°çº¿ç¨æ± ä¸­ï¼&lt;em&gt;è¯¥åé¨éåå¨æ´»å¨ä»»å¡å¤äºçº¿ç¨æ°æ¶å®¹çº³é¢å¤çä»»å¡ã&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An important advantage of the fixed thread pool is that applications using it degrade gracefully. To understand this, consider a web server application where each HTTP request is handled by a separate thread. If the application simply creates a new thread for every new HTTP request, and the system receives more requests than it can handle immediately, the application will suddenly stop responding to all requests when the overhead of all those threads exceed the capacity of the system. With a limit on the number of the threads that can be created, the application will not be servicing HTTP requests as quickly as they come in, but it will be servicing them as quickly as the system can sustain.&lt;/p&gt;
&lt;p&gt;åºå®çº¿ç¨æ± çä¸ä¸ªéè¦ä¼å¿æ¯ä½¿ç¨è¯¥çº¿ç¨æ± ç App å¯ä»¥æ­£å¸¸éçº§ãèèä¸ä¸ª Web æå¡åºç¨ï¼æ¯ä¸ª HTTP è¯·æ±åç±åç¬ççº¿ç¨å¤çãå¦æè¯¥åºç¨ä»ç®åéå¯¹æ¯ä¸ª HTTP è¯·æ±åå»ºæ°ççº¿ç¨ï¼
å¹¶ä¸ç³»ç»æ¶å°çè¯·æ±è¶åºäºå¶ç«å³å¤ççæ°éï¼å½è¿äºçº¿ç¨çææå¼éè¶åºç³»ç»çå®¹éæ¶ï¼åºç¨ä¼çªç¶åæ­¢ååºææè¯·æ±ãç±äºå¯ä»¥åå»ºççº¿ç¨æ°éåå°éå¶ï¼å æ­¤åºç¨å¯ä»¥ä¸å°½å¿«çå¤ç HTTP è¯·æ±ï¼ä½
å¯ä»¥æ ¹æ®ç³»ç»è½åå°½å¿«æå¡è¿äºè¯·æ±ã&lt;/p&gt;
&lt;p&gt;A simple way to create an executor that uses a fixed thread pool is to invoke the &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool-int-&#34;&gt;newFixedThreadPool&lt;/a&gt; factory method in &lt;em&gt;java.util.concurrent.Executors&lt;/em&gt; This class also provides the following factory methods:&lt;/p&gt;
&lt;p&gt;è°ç¨ &lt;em&gt;java.util.concurrent.Executors&lt;/em&gt; ä¸­ç newFixedThreadPool å·¥åæ¹æ³å¯ä»¥åå»ºåºå®çº¿ç¨æ± ç executorãæ­¤ç±»è¿æä¾å¦ä¸å·¥åæ¹æ³ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newCachedThreadPool-int-&#34;&gt;newCachedThreadPool&lt;/a&gt; method creates an executor with an expandable thread pool. This executor is suitable for applications that launch many short-lived tasks.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;newCachedThreadPool&lt;/em&gt; ä½¿ç¨å¯æ©å±ççº¿ç¨æ± åå»º executorãæ­¤ç±»çº¿ç¨æ± éç¨äºå¯å¨è®¸å¤ç­æä»»å¡çåºç¨ç¨åºã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newSingleThreadExecutor-int-&#34;&gt;newSingleThreadExecutor&lt;/a&gt; method creates an executor that executes a single task at a time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;newSingleThreadExecutor&lt;/em&gt; åå»ºç executor æ¯æ¬¡åªæ§è¡ä¸ä¸ªä»»å¡ã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Several factory methods are &lt;em&gt;ScheduledExecutorService&lt;/em&gt; versions of the above executors.&lt;/p&gt;
&lt;p&gt;ä¸è¿° executor ç &lt;em&gt;ScheduledExecutorService&lt;/em&gt; çæ¬æå ç§å·¥åæ¹æ³ã&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If none of the executors provided by the above factory methods meet your needs, constructing instances of &lt;em&gt;java.util.concurrent.ThreadPoolExecutor&lt;/em&gt; or &lt;em&gt;java.util.concurrent.ScheduledThreadPoolExecutor&lt;/em&gt; will give you additional options.&lt;/p&gt;
&lt;p&gt;é¤äºä¸é¢è¿äºåå»º executor çæ¹æ³ï¼&lt;em&gt;java.util.concurrent.ThreadPoolExecutor&lt;/em&gt; å &lt;em&gt;java.util.concurrent.ScheduledThreadPoolExecutor&lt;/em&gt; ä¹ä¼æä¾é¢å¤çæ¹æ³ã&lt;/p&gt;
&lt;h2 id=&#34;processes-and-threads&#34;&gt;Processes and Threads&lt;/h2&gt;
&lt;p&gt;In concurrent programming, there are two basic units of execution: &lt;em&gt;processes&lt;/em&gt; and &lt;em&gt;threads&lt;/em&gt;. In the Java programming language, concurrent programming is mostly concerned with threads. However, processes are also important.&lt;/p&gt;
&lt;p&gt;å¨å¹¶åç¼ç¨ä¸­ï¼æä¸¤ä¸ªåºæ¬çæ§è¡ååï¼è¿ç¨åçº¿ç¨ãJava å¹¶åç¼ç¨ä¸»è¦åçº¿ç¨æå³ï¼ä¸è¿è¿ç¨ä¹å¾éè¦ã&lt;/p&gt;
&lt;p&gt;A computer system normally has many active processes and threads. This is true even in systems that only have a single execution core, and thus only have one thread actually executing at any given moment. Processing time for a single core is shared among processes and threads through an OS feature called &lt;em&gt;time slicing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;è®¡ç®æºç³»ç»éå¸¸æå¾å¤æ´»è·çè¿ç¨åçº¿ç¨ãè¿å¨åªæä¸ä¸ªæ§è¡æ ¸å¿ä»¥è³äºä»»ä½æ¶å»é½åªæä¸ä¸ªçº¿ç¨å®éæ§è¡çç³»ç»ä¹æ¯å¦æ­¤ãéè¿ç§°ä¸º &lt;em&gt;æ¶é´åç&lt;/em&gt; ç OS åè½ï¼è¿ç¨åçº¿ç¨å¯ä»¥å±äº«åä¸ªåæ ¸çå¤çæ¶é´ã&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s becoming more and more common for computer systems to have multiple processors or processors with multiple execution cores. This greatly enhances a system&amp;rsquo;s capacity for concurrent execution of processes and threads â but concurrency is possible even on simple systems, without multiple processors or execution cores.&lt;/p&gt;
&lt;p&gt;å·æå¤ä¸ªå¤çå¨æå¤ä¸ªæ§è¡æ ¸å¿çå¤çå¨çè®¡ç®æºç³»ç»æ­£å¨åå¾è¶æ¥è¶æ®éãè¿æå¤§å¢å¼ºäºå¹¶åæ§è¡å¤è¿ç¨åå¤çº¿ç¨çè½åââå³ä½¿æ¯å¨æ²¡æå¤æ ¸å¤çå¨çç®åç³»ç»ä¸ï¼å¹¶åä¹æ¯å¯è½çã&lt;/p&gt;
&lt;h3 id=&#34;processes&#34;&gt;Processes&lt;/h3&gt;
&lt;p&gt;A process has a self-contained execution environment. A process generally has a complete, private set of basic run-time resources; in particular, each process has its own memory space.&lt;/p&gt;
&lt;p&gt;è¿ç¨å·æç¬ç«çæ§è¡ç¯å¢ãè¿ç¨éå¸¸å·æä¸ç»å®æ´çãç§æçåºæ¬è¿è¡æ¶èµæºï¼æ¯ä¸ªè¿ç¨æèªå·±çåå­ç©ºé´ã&lt;/p&gt;
&lt;p&gt;Processes are often seen as synonymous with programs or applications. However, what the user sees as a single application may in fact be a set of cooperating processes. To facilitate communication between processes, most operating systems support &lt;em&gt;Inter Process Communication&lt;/em&gt; (IPC) resources, such as pipes and sockets. IPC is used not just for communication between processes on the same system, but processes on different systems.&lt;/p&gt;
&lt;p&gt;è¿ç¨éå¸¸è¢«è§ä¸ºç¨åºæåºç¨çä»£åè¯ãä½å®éä¸ç¨æ·çè§çåä¸ªåºç¨å¯è½ä¸ç»åä½è¿ç¨ãä¸ºäºä¿è¿è¿ç¨é´çéä¿¡ï¼å¤§å¤æ°æä½ç³»ç»é½æ¯æ &lt;em&gt;è¿ç¨é´éä¿¡&lt;/em&gt;ï¼IPCï¼èµæºï¼æ¯å¦ç®¡éï¼pipesï¼åsockets. IPC ä¸ä»å¯ä»¥ç¨å¨åä¸ç³»ç»çè¿ç¨é´éä¿¡ï¼è¿å¯ç¨äºä¸åç³»ç»ä¸çè¿ç¨ã&lt;/p&gt;
&lt;p&gt;Most implementations of the Java virtual machine run as a single process. A Java application can create additional processes using a &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ProcessBuilder.html&#34;&gt;ProcessBuilder&lt;/a&gt; object. Multiprocess applications are beyond the scope of this lesson.&lt;/p&gt;
&lt;p&gt;å¤§å¤æ°ç Jvm å®ç°é½æ¯ä»¥åä¸ªè¿ç¨è¿è¡çãJava åºç¨å¯ä»¥ä½¿ç¨ &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ProcessBuilder.html&#34;&gt;ProcessBuilder&lt;/a&gt; åå»ºæ°çè¿ç¨ï¼ä¸è¿å¤è¿ç¨åºç¨ä¸å¨è¿éçè®¨è®ºèå´ã&lt;/p&gt;
&lt;h3 id=&#34;threads&#34;&gt;Threads&lt;/h3&gt;
&lt;p&gt;Threads are sometimes called &lt;em&gt;lightweight processes&lt;/em&gt;. Both processes and threads provide an execution environment, but creating a new thread requires fewer resources than creating a new process.&lt;/p&gt;
&lt;p&gt;çº¿ç¨éå¸¸è¢«ç§°ä¸º &lt;em&gt;è½»éçº§è¿ç¨&lt;/em&gt;ãè¿ç¨åçº¿ç¨é½å¯ä»¥æä¾æ§è¡ç¯å¢ï¼ä½åå»ºçº¿ç¨è¦æ¯åå»ºè¿ç¨éè¦æ´å°çèµæºã&lt;/p&gt;
&lt;p&gt;Threads exist within a process â every process has at least one. Threads share the process&amp;rsquo;s resources, including memory and open files. This makes for efficient, but potentially problematic, communication.&lt;/p&gt;
&lt;p&gt;çº¿ç¨å­å¨äºè¿ç¨ä¸­ ââ æ¯ä¸ªè¿ç¨è³å°æä¸ä¸ªãçº¿ç¨åäº«è¿ç¨èµæºï¼åæ¬åå­åæå¼çæä»¶ãè¿æ ·å¯ä»¥è¿è¡é«æçãä½åæ¶åå¯è½æé®é¢çéä¿¡ã&lt;/p&gt;
&lt;p&gt;Multithreaded execution is an essential feature of the Java platform. Every application has at least one thread â or several, if you count &amp;ldquo;system&amp;rdquo; threads that do things like memory management and signal handling. But from the application programmer&amp;rsquo;s point of view, you start with just one thread, called the main thread. This thread has the ability to create additional threads, as we&amp;rsquo;ll demonstrate in the next section.&lt;/p&gt;
&lt;p&gt;å¤çº¿ç¨æ§è¡æ¯ Java å¹³å°åºç¡çåè½ãæ¯ä¸ªåºç¨è³å°æä¸ä¸ª ââ å¦æç®ä¸æ§è¡åå­ç®¡çåä¿¡å·å¤ççç³»ç»çº¿ç¨ï¼åæå¤ä¸ªãä½ä»åºç¨ç¨åºåçè§åº¦æ¥çï¼æä»¬ä»ä¸ä¸ªçº¿ç¨å¼å§ï¼ç§°ä¸º&lt;em&gt;ä¸»çº¿ç¨ï¼main threadï¼&lt;/em&gt;ï¼è¿ä¸ªçº¿ç¨æè½ååå»ºå«ççº¿ç¨ã&lt;/p&gt;
&lt;h4 id=&#34;thread-objects&#34;&gt;Thread Objects&lt;/h4&gt;
&lt;p&gt;æ¯ä¸ªçº¿ç¨é½ä¸ä¸ä¸ª &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html&#34;&gt;Thread&lt;/a&gt; ç¸å³ãæä¸¤ç§ç­ç¥ä½¿ç¨ &lt;em&gt;Thread&lt;/em&gt; å¯¹è±¡åå»ºå¹¶ååºç¨ã&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ç´æ¥æ§å¶çº¿ç¨çåå»ºåç®¡çï¼æ¯æ¬¡åºç¨éè¦å¯å¨å¼æ­¥ä»»å¡æ¶ï¼åªéå®ä¾å &lt;em&gt;Thread&lt;/em&gt;ã&lt;/li&gt;
&lt;li&gt;è¦ä»åºç¨çå¶ä»é¨åæ½è±¡çº¿ç¨ç®¡çï¼å°åºç¨çä»»å¡ä¼ éç» &lt;em&gt;executor&lt;/em&gt;ã&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>WebSocket åé¿è½®è¯¢</title>
      <link>https://zacash.cn/post/websocket-and-long-polling/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/post/websocket-and-long-polling/</guid>
      <description>&lt;p&gt;å®¢æ·ç«¯çç½ç»è¯·æ±å¤§é¨åé½å»ºç«å¨è¯·æ±/ååºæ¨¡å¼ç HTTP/HTTPS åè®®ä¹ä¸ï¼AJAX ææ¯ä½¿é¡µé¢çèµ·æ¥æ´å å¨æãå°½ç®¡å¦æ­¤ï¼ææç HTTP è¿æ¥ä»ç±å®¢æ·ç«¯æ§å¶ï¼éè¦ç¨æ·äº¤äºæå®æ¶è½®è¯¢ï¼periodic pollingï¼æè½ä»æå¡ç«¯å è½½æ°æ°æ®ã&lt;/p&gt;
&lt;p&gt;éè¿é¿è½®è¯¢ï¼å®¢æ·ç«¯æå¼ä¸æå¡ç«¯ç HTTP è¿æ¥ï¼å¹¶ä¿æè¿æ¥ç´å°æå¡ç«¯è¿åååºï¼åªè¦æå¡ç«¯ææ°çæ°æ®ï¼å®å°±ä¼åéååºãç¶èè¿äºææ¯æå±åçé®é¢ï¼å®ä»¬å¸¦æ HTTP çå¼éï¼å¹¶ä¸éåä½å»¶æ¶åºç¨çéæ±ã&lt;/p&gt;
&lt;h2 id=&#34;websocket-ç®ä»&#34;&gt;WebSocket ç®ä»&lt;/h2&gt;
&lt;p&gt;WebSocket è§èå®ä¹äºä¸ä¸ª APIï¼å¨å®¢æ·ç«¯åæå¡ç«¯ä¹é´å»ºç« &lt;em&gt;socket&lt;/em&gt; è¿æ¥ãç®èè¨ä¹ï¼å®¢æ·ç«¯åæå¡ç«¯ä¹é´å»ºç«æä¹è¿æ¥ï¼åæ¹é½å¯ä»¥éæ¶åéæ°æ®ã&lt;/p&gt;
&lt;h2 id=&#34;ä½¿ç¨-okhttp-å®ç°-websocket&#34;&gt;ä½¿ç¨ OkHttp å®ç° WebSocket&lt;/h2&gt;
&lt;h3 id=&#34;æ·»å ä¾èµ&#34;&gt;æ·»å ä¾èµ&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// network
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;implementation&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.squareup.okhttp3:okhttp:4.8.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
implementation&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.squareup.okhttp3:mockwebserver:4.8.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;å®¢æ·ç«¯åå»º-websocket-è¿æ¥&#34;&gt;å®¢æ·ç«¯åå»º WebSocket è¿æ¥&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * è¿æ¥ WebSocket æå¡
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param hostname æå¡ç«¯ååå°å
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param port WebSocket æå¡ç«¯å£å·
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connectWebSocket&lt;/span&gt;(hostname: String,port: Int) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; httpClient = OkHttpClient.Builder()
      .pingInterval(PING_INTERVAL, TimeUnit.SECONDS)
      .build()

  &lt;span style=&#34;color:#75715e&#34;&gt;// Android 9 å·²ç¦æ­¢ææä¼ è¾ç½ç»æ°æ®ï¼æ­¤å¤ä½¿ç¨ wsï¼å¯ä»¥åèï¼https://stackoverflow.com/a/50834600
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; url = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ws://${hostname}:${port}&amp;#34;&lt;/span&gt;
  Logger.i(TAG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connectWebSocket&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connect url -&amp;gt; $url&amp;#34;&lt;/span&gt;)

  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; request = Request.Builder()
      .url(url)
      .build()

  httpClient.newWebSocket(request, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WebSocketListener&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onOpen&lt;/span&gt;(
      webSocket: WebSocket,
      response: Response
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onOpen(webSocket, response)
      Logger.i(TAG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onOpen&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;response -&amp;gt; ${response.message}&amp;#34;&lt;/span&gt;)
      &lt;span style=&#34;color:#75715e&#34;&gt;// While web socket is opened create our interval work
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      createIntervalWork(webSocket)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onMessage&lt;/span&gt;(
      webSocket: WebSocket,
      text: String
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onMessage(webSocket, text)
      Logger.i(TAG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onMessage&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text -&amp;gt; $text&amp;#34;&lt;/span&gt;)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (text.isNotEmpty()) {
        mHandler.post {
          mAdapter.addMessage(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pong -&amp;gt; $text&amp;#34;&lt;/span&gt;)
        }
      }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onMessage&lt;/span&gt;(
      webSocket: WebSocket,
      bytes: ByteString
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onMessage(webSocket, bytes)
      Logger.i(TAG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onMessage&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes -&amp;gt; $bytes&amp;#34;&lt;/span&gt;)
      mHandler.post {
        mAdapter.addMessage(bytes.toString())
      }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClosed&lt;/span&gt;(
      webSocket: WebSocket,
      code: Int,
      reason: String
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onClosed(webSocket, code, reason)
      Logger.i(TAG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onClosed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reason -&amp;gt; $reason&amp;#34;&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClosing&lt;/span&gt;(
      webSocket: WebSocket,
      code: Int,
      reason: String
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onClosing(webSocket, code, reason)
      Logger.i(TAG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onClosing&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reason -&amp;gt; $reason&amp;#34;&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onFailure&lt;/span&gt;(
      webSocket: WebSocket,
      t: Throwable,
      response: Response?
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onFailure(webSocket, t, response)
      Logger.i(TAG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onFailure&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${t.message}&amp;#34;&lt;/span&gt;)
    }
  })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;å®¢æ·ç«¯-mock-websocket-æå¡&#34;&gt;å®¢æ·ç«¯ Mock WebSocket æå¡&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Mock websocket server
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mockWebServer&lt;/span&gt;(): MockWebServer? {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mockWebServer: MockWebServer? = MockWebServer()

  mockWebServer&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;enqueue(MockResponse().withWebSocketUpgrade(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WebSocketListener&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onOpen&lt;/span&gt;(
      webSocket: WebSocket,
      response: Response
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onOpen(webSocket, response)
      Logger.i(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MockWebServer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onOpen&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;response -&amp;gt; ${response.message}&amp;#34;&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onMessage&lt;/span&gt;(
      webSocket: WebSocket,
      text: String
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onMessage(webSocket, text)
      Logger.i(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MockWebServer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onMessage&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text -&amp;gt; $text&amp;#34;&lt;/span&gt;)
      &lt;span style=&#34;color:#75715e&#34;&gt;// send back message to client
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      webSocket.send(text)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onMessage&lt;/span&gt;(
      webSocket: WebSocket,
      bytes: ByteString
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onMessage(webSocket, bytes)
      Logger.i(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MockWebServer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onMessage&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes -&amp;gt; $bytes&amp;#34;&lt;/span&gt;)
      &lt;span style=&#34;color:#75715e&#34;&gt;// send back message to client
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      webSocket.send(bytes)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClosed&lt;/span&gt;(
      webSocket: WebSocket,
      code: Int,
      reason: String
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onClosed(webSocket, code, reason)
      Logger.i(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MockWebServer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onClosed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reason -&amp;gt; $reason&amp;#34;&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClosing&lt;/span&gt;(
      webSocket: WebSocket,
      code: Int,
      reason: String
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onClosing(webSocket, code, reason)
      Logger.i(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MockWebServer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onClosing&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reason -&amp;gt; $reason&amp;#34;&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onFailure&lt;/span&gt;(
      webSocket: WebSocket,
      t: Throwable,
      response: Response?
    ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onFailure(webSocket, t, response)
      Logger.i(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MockWebServer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onFailure&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exception -&amp;gt; ${t.message}&amp;#34;&lt;/span&gt;)
    }
  }))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mockWebServer
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JVM Architecture in A Nutshell</title>
      <link>https://zacash.cn/post/jvm-arch-in-a-nutshell/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/post/jvm-arch-in-a-nutshell/</guid>
      <description>&lt;p&gt;è·¨å¹³å°çæ¬è´¨æ¯å ä¸ºæ±ç¼æä»¤çä¸å.&lt;/p&gt;
&lt;h2 id=&#34;classloader&#34;&gt;ClassLoader&lt;/h2&gt;
&lt;h3 id=&#34;what-is-it&#34;&gt;What is it&lt;/h3&gt;
&lt;p&gt;ç±»å è½½å¨è´è´£å¨è¿è¡æ¶å° Java ç±»å¨æå è½½å° JVMï¼æ¯ JRE çä¸é¨åï¼ç±äºæäºç±»å è½½å¨ï¼JVM æ éäºè§£åºå±æä»¶ææä»¶ç³»ç»å³å¯è¿è¡Javaç¨åºã&lt;/p&gt;
&lt;p&gt;ç±»å è½½å¨ä¸ä¼ä¸æ¬¡å°å¨é¨ç±»å è½½å°åå­éï¼èæ¯å¨ç¨åºéè¦æ¶å è½½ã&lt;/p&gt;
&lt;h3 id=&#34;built-in-class-loaders-types&#34;&gt;Built-in class loaders types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bootstrap class loader&lt;/p&gt;
&lt;p&gt;æ¯ä¸ª JVM å®ç°å¿é¡»æä¸ä¸ª bootstrap ç±»å è½½å¨ãå®å è½½ &lt;em&gt;JAVA_HOME/jre/lib&lt;/em&gt; ç®å½ä¸çæ ¸å¿ Java API ç±»ï¼è¯¥è·¯å¾éå¸¸è¢«ç§°ä¸ºå¼å¯¼è·¯å¾(bootstrap path)ãè¯¥ç±»å è½½å¨ç± C/C++ è¯­è¨å®ç°ã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extension class loader&lt;/p&gt;
&lt;p&gt;Bootstrap çå­ç±»å è½½å¨ï¼å®å è½½æ©å±ç®å½ &lt;em&gt;JAVA_HOME/jre/lib/ext&lt;/em&gt; æ &lt;strong&gt;java.ext.dirs&lt;/strong&gt; æå®è·¯å¾ä¸çç±»ãå®ç± Java å¨ &lt;code&gt;sun.misc.Launcher$ExtClassLoader&lt;/code&gt; ç±»ä¸­å®ç°ã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System/Application class loader&lt;/p&gt;
&lt;p&gt;Extension çå­ç±»å è½½å¨ãå®è´è´£ä» app è·¯å¾å è½½ç±»ï¼å®å è½½å¨ &lt;em&gt;classpath&lt;/em&gt; ç¯å¢åéã&lt;em&gt;-classpath&lt;/em&gt;ã-cp å½ä»¤è¡éé¡¹ä¸­æ¾å°çæä»¶ãå®åæ ·ç± Java å¨ &lt;code&gt;sun.misc.Launcher$AppClassLoader&lt;/code&gt; ç±»ä¸­å®ç°ã&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;
&lt;p&gt;ç±»å è½½å¨æ¯ JRE çä¸é¨åãå½ JVM è¯·æ±ä¸ä¸ªç±»æ¶ï¼ç±»å è½½å¨å°è¯å®ä½è¯¥ç±»ï¼å¹¶ä½¿ç¨&lt;em&gt;å®å¨éå®çç±»å(fully qualified class name)&lt;/em&gt; å°&lt;em&gt;ç±»å®ä¹(class definition)&lt;/em&gt; å è½½å°è¿è¡æ¶ç¯å¢ä¸­ã&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java.lang.ClassLoader.loadClass()&lt;/code&gt; æ¹æ³è´è´£å°ç±»å®ä¹å è½½å°è¿è¡æ¶ç¯å¢ä¸­ãå¦æè¯·æ±çç±»å°æªå è½½ï¼åå®å°è¯·æ±å§æ´¾ç»ç¶ç±»å è½½å¨ï¼æ­¤è¿ç¨éå½è¿è¡ãå¦æç¶ç±»å è½½å¨æ¾ä¸å°è¯¥ç±»ï¼åå­ç±»å è½½å¨è°ç¨ &lt;code&gt;java.net.URLClassLoader.findClass()&lt;/code&gt; æ¹æ³å¨æä»¶ç³»ç»ä¸­æ¥æ¾ç±»ãæç»ï¼å¦æå­ç±»å è½½å¨æªæ¾å°è¯¥ç±»ï¼åå®å°æåº &lt;code&gt;java.lang.NoClassDefFoundError&lt;/code&gt; æ &lt;code&gt;java.lang.ClassNotFoundException&lt;/code&gt;ã&lt;/p&gt;
&lt;h3 id=&#34;class-loader-features&#34;&gt;Class loader features&lt;/h3&gt;
&lt;h4 id=&#34;ä»£çæ¨¡ådelegation-model&#34;&gt;ä»£çæ¨¡åï¼Delegation Modelï¼&lt;/h4&gt;
&lt;p&gt;ç±»å è½½å¨éµå¾ªä»£çæ¨¡åï¼å¨è¯¥æ¨¡åä¸­ï¼ClassLoader ä¼æ ¹æ®è¯·æ±æ¥æ¾çç±»æèµæºï¼å°æç´¢ç±»æèµæºçå·¥ä½å§æç»ç¶å è½½å¨å¤çãä»å½ bootstrap class loader å extension class loader é½æªè½å è½½è¯¥ç±»æ¶ï¼system class loader æä¼å°è¯èªå·±å è½½è¯¥ç±»ã&lt;/p&gt;
&lt;h4 id=&#34;å¯ä¸ç±»unique-classes&#34;&gt;å¯ä¸ç±»ï¼Unique classesï¼&lt;/h4&gt;
&lt;p&gt;ä½ä¸ºä»£çæ¨¡åçç»æï¼å¾å®¹æç¡®ä¿å¯ä¸çç±»ï¼å ä¸ºæä»¬å§ç»åä¸å§æã&lt;/p&gt;
&lt;h4 id=&#34;å¯è§æ§visibility&#34;&gt;å¯è§æ§ï¼Visibilityï¼&lt;/h4&gt;
&lt;p&gt;å­ç±»å è½½å¨å¯¹å¶ç¶ç±»å è½½å¨å è½½çç±»å®å¨å¯è§ï¼ç¶ç±»å è½½å¨åå¯¹å­ç±»å è½½å¨å è½½çç±»ä¸å¯è§ã&lt;/p&gt;
&lt;h3 id=&#34;custom-classloader&#34;&gt;Custom ClassLoader&lt;/h3&gt;
&lt;p&gt;å¨éè¦ä»æ¬å°æç½ç»å è½½ç±»çåºæ¯ï¼æä»¬å¯è½éè¦ä½¿ç¨èªå®ä¹ç±»å è½½å¨ã&lt;/p&gt;
&lt;h4 id=&#34;ä½¿ç¨åºæ¯&#34;&gt;ä½¿ç¨åºæ¯&lt;/h4&gt;
&lt;p&gt;èªå®ä¹ç±»å è½½å¨ä¸ä»å¯¹å¨è¿è¡æ¶å è½½ç±»æå¸®å©ï¼è¿åæ¬ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ä¿®æ¹ç°æå­èç ï¼å¦ç»å¥ä»£ç&lt;/li&gt;
&lt;li&gt;å¨æåå»ºéåç¨æ·éæ±çç±»ãå¦ JDBC ä¸­ï¼éè¿å¨æç±»å è½½å®æä¸åé©±å¨å®ç°(driver implementations)ä¹é´çåæ¢ã&lt;/li&gt;
&lt;li&gt;å®ç°ç±»çæ¬æ§å¶æºå¶ï¼å¦ä¸ºå·æç¸ååç§°åååçç±»å è½½ä¸åçå­èç ï¼ç­ä¿®å¤ï¼ãè¿å¯ä»¥éè¿ URL ç±»å è½½å¨æèªå®ä¹å è½½å¨å®æã&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;æä»¬å¯ä»¥èªå®ä¹ç±»å è½½å¨å®ç°æå®ç±»çå è½½ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; com.zac4j.system.util

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; java.io.ByteArrayOutputStream
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; java.io.File
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; java.io.IOException

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Custom ClassLoader sample
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author: zac
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @date: 2020/7/19
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; {
  @JvmStatic &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; classLoader = CustomClassLoader()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; clazz = classLoader.loadClass(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.zac4j.system.util.Utils&amp;#34;&lt;/span&gt;)
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom classloader:${clazz.canonicalName}&amp;#34;&lt;/span&gt;)
  }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * èªå®ä¹ ClassLoaderï¼å è½½æå®ç±»æä»¶ã
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomClassLoader&lt;/span&gt; : ClassLoader() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findClass&lt;/span&gt;(name: String): Class&amp;lt;*&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; b = loadClassFromFile(name)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; defineClass(name, b, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, b.size)
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * æ ¹æ®ç±»åå è½½ç±»æä»¶
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loadClassFromFile&lt;/span&gt;(filename: String): ByteArray {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; inStream = javaClass.classLoader&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;getResourceAsStream(
        filename.replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, File.separatorChar) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.class&amp;#34;&lt;/span&gt;
    ) &lt;span style=&#34;color:#f92672&#34;&gt;?:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; byteArrayOf()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; outStream = ByteArrayOutputStream()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (inStream.read() != -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nextVal = inStream.read()
        outStream.write(nextVal)
      }
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (e: IOException) {

    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; outStream.toByteArray()
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;responsibility&#34;&gt;Responsibility&lt;/h3&gt;
&lt;p&gt;Class Loader ç³»ç»ä¸»è¦æ&lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se6/html/ConstantPool.doc.html#67960&#34;&gt;3ç§åè½&lt;/a&gt;ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loading&lt;/li&gt;
&lt;li&gt;Linking&lt;/li&gt;
&lt;li&gt;Initialization&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;loading&#34;&gt;Loading&lt;/h4&gt;
&lt;p&gt;ç±»å è½½å¨è¯»å &lt;em&gt;.class&lt;/em&gt; æä»¶ï¼çæå¯¹åºçäºè¿å¶æ°æ®å¹¶ä¿å­å° JVM æ¹æ³åºãå¯¹æ¯ä¸ª &lt;em&gt;.class&lt;/em&gt; æä»¶ï¼æ¹æ³åºä¿å­è¿äºä¿¡æ¯ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;å®å¨éå®åç§°çå è½½ç±»åå¶ç´å±ç¶ç±»&lt;/li&gt;
&lt;li&gt;&lt;em&gt;.class&lt;/em&gt; æä»¶æ¯å¦ä¸ Class æ Interface æ Enum æå³&lt;/li&gt;
&lt;li&gt;ä¿®é¥°ç¬¦ï¼Modifierï¼ãåéåæ¹æ³ä¿¡æ¯ç­ã&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;å è½½ &lt;em&gt;.class&lt;/em&gt; æä»¶åï¼JVM å¨å ä¸­åå»ºè¯¥æä»¶å¯¹åºç Class ç±»åå¯¹è±¡ãå¼åèå¯ä»¥ä½¿ç¨æ­¤ Class å¯¹è±¡æ¥è·åç±»çº§å«ï¼class levelï¼çä¿¡æ¯ï¼å¦ç±»åãç¶ç±»åãæ¹æ³ï¼&lt;code&gt;Class.getdeclaredMethods()&lt;/code&gt;ï¼ååéä¿¡æ¯ï¼&lt;code&gt;Class.getDeclaredFields()&lt;/code&gt;ï¼ç­ã&lt;/p&gt;
&lt;h4 id=&#34;linking&#34;&gt;Linking&lt;/h4&gt;
&lt;p&gt;æ§è¡ VerificationãPreparation å Resolutionã&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verificationï¼éè¿æ£æ¥ &lt;em&gt;.class&lt;/em&gt; æä»¶æ¯å¦æ­£ç¡®çæ ¼å¼ååæ¯å¦ç±ææçç¼è¯å¨çæï¼ç¡®ä¿è¯¥æä»¶çæ­£ç¡®æ§ãå¦æéªè¯å¤±è´¥ï¼å°æåºè¿è¡æ¶å¼å¸¸ï¼&lt;em&gt;java.lang.VerifyError&lt;/em&gt;ã&lt;/li&gt;
&lt;li&gt;Preparationï¼JVM ä¸ºç±»åéåéåå­ï¼å¹¶å°åå­åå§åä¸ºé»è®¤å¼ã&lt;/li&gt;
&lt;li&gt;Resolutionï¼è¿æ¯ç¨ç´æ¥å¼ç¨(direct references)æ¿æ¢ç±»åä¸­çç¬¦å·å¼ç¨(symbolic references)çè¿ç¨ãéè¿æç´¢æ¹æ³åºåä»¥æ¾å°å¼ç¨çå®ä½æ¥å®ææ­¤æä½ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;initialization&#34;&gt;Initialization&lt;/h4&gt;
&lt;p&gt;è¿ä¸ªé¶æ®µå°ä¸ºææéæåéåéå¨ä»£ç æéæä»£ç åä¸­å®ä¹çå¼ãå¨ç±»ä¸­ä»é¡¶è³åºï¼from top to bottomï¼æ§è¡ï¼å¨ç±»å±çº§ä¸­ä»ç¶ç±»å°å­ç±»ï¼from parent to childï¼æ§è¡ãç±»å è½½å¨çåå§åï¼Bootstrap class loader -&amp;gt; Extension class loader -&amp;gt; App class loader.&lt;/p&gt;
&lt;h2 id=&#34;run-time-data-areas&#34;&gt;Run-Time Data Areas&lt;/h2&gt;
&lt;p&gt;åºæ¬ç»æ.jpg&lt;/p&gt;
&lt;h3 id=&#34;the-pc-register&#34;&gt;The pc Register&lt;/h3&gt;
&lt;p&gt;JVM å¯ä»¥æ¯æå¤ä¸ªçº¿ç¨åæ¶è¿è¡ï¼æ¯ä¸ªçº¿ç¨é½æèªå·±ç¬ç«ç PC å¯å­å¨(program counter register)ãå¨ä»»ææ¶é´ç¹ï¼ä»»ä¸çº¿ç¨å¨æ§è¡æä¸ªæ¹æ³çä»£ç ï¼è¢«ç§°ä½è¯¥çº¿ç¨ç&lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.6&#34;&gt;å½åæ¹æ³(current method)&lt;/a&gt;ã&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;å¦æè¯¥æ¹æ³æ¯ &lt;em&gt;native&lt;/em&gt; çï¼pc å¯å­å¨çå¼æ¯ &lt;em&gt;undefined&lt;/em&gt;ã&lt;/li&gt;
&lt;li&gt;å¦æè¯¥æ¹æ³ä¸æ¯ &lt;em&gt;native&lt;/em&gt; çï¼pc å¯å­å¨åå«å½åæ­£å¨æ§è¡æä»¤çå°åã&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JVM ç pc å¯å­å¨å®¹éè¶³å¤å¨ç¹å®å¹³å°ä¸ä¿å­ &lt;em&gt;returnAddress&lt;/em&gt; æ &lt;em&gt;native&lt;/em&gt; æéã&lt;/p&gt;
&lt;h3 id=&#34;jvm-stacks&#34;&gt;JVM Stacks&lt;/h3&gt;
&lt;p&gt;å¯¹æ¯ä¸ªçº¿ç¨ï¼JVM å¨åå»ºçº¿ç¨æ¶é½ä¼åå»ºä¸ä¸ªç§æçå æ ãJVM ä»å¯¹å æ è¿è¡ä¸¤ç§æä½ï¼æ¨å¥(push)åå¼¹åº(pop)æ å¸§(frames)ãJVM å æ çåå­&lt;strong&gt;ä¸å¿æ¯è¿ç»­ç&lt;/strong&gt;ã&lt;/p&gt;
&lt;p&gt;çº¿ç¨æ§è¡çæ¯ä¸ªæ¹æ³è°ç¨(method calls)é½å­å¨å¨å¯¹åºçå æ ä¸­ï¼åæ¬å¥åãå±é¨åéãä¸­é´è®¡ç®åå¶ä»æ°æ®ãæ¹æ³å®æåï¼JVM å°ä»å æ ä¸­å é¤å¯¹åºçæ¡ç®ï¼å®æææçæ¹æ³è°ç¨åï¼å æ å°åä¸ºç©ºï¼å¹¶ä¸å¨ç»æ­¢çº¿ç¨åï¼éæ¯è¯¥å æ ã&lt;/p&gt;
&lt;p&gt;å­å¨å¨å æ ä¸­çæ°æ®ä»éç¨äºå¯¹åºçº¿ç¨ï¼å¯¹å«ççº¿ç¨ä¸éç¨ãå æ­¤ï¼å¯ä»¥è¯´å±é¨æ°æ®æ¯çº¿ç¨å®å¨çãå æ ä¸­æ¯ä¸ªæ¡ç®é½ç§°ä¸º &lt;em&gt;å æ å¸§(Stack Frame)&lt;/em&gt; æ &lt;em&gt;æ¿æ´»è®°å½(Activation Record)&lt;/em&gt;ã&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ç¬¬ä¸çç Java èææºè§è &lt;em&gt;The JavaÂ® Virtual Machine Specification&lt;/em&gt;, &lt;em&gt;JVM å æ (Java Virtual Machine stack)&lt;/em&gt; è¢«ç§°ä¸º &lt;em&gt;Java æ (Java stack)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JVM è§èåè®¸Javaèææºå æ å·æåºå®å¤§å°ï¼æèæ ¹æ®è®¡ç®è¦æ±å¨æä¼¸ç¼©ã å¦æJavaèææºå æ çå¤§å°åºå®ï¼åå¨åå»ºæ¯ä¸ªJavaèææºå æ æ¶å¯ä»¥ç¬ç«éæ©å®ä»¬çå¤§å°ã&lt;/p&gt;
&lt;p&gt;å³èçå¼å¸¸ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;å¦æçº¿ç¨ä¸­çè®¡ç®éè¦æ¯åè®¸ç JVM æ´å¤§çå æ ï¼å JVM å°æåº &lt;strong&gt;StackOverflowError&lt;/strong&gt;ã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;å¦æå¯ä»¥å¨ææ©å± JVM å æ å®¹éï¼å¹¶ä¸å°è¯è¿è¡å¨ææ©å±ï¼ä½å¤é¨ç¯å¢æ æ³æä¾è¶³å¤çåå­èµæºï¼ææ²¡æè¶³å¤çåå­èµæºä¸ºæ°çº¿ç¨åå»º JVM å æ ï¼å JVM ä¼æåº &lt;strong&gt;OutOfMemoryError&lt;/strong&gt;ã&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;heap&#34;&gt;Heap&lt;/h3&gt;
&lt;p&gt;å æ¯è¿è¡æ¶æ°æ®åºåä¸ºææç±»å®ä¾åæ°ç»åéåå­çé¨åï¼æ¯å±äº«èµæºã&lt;/p&gt;
&lt;p&gt;å å¨èææºå¯å¨æ¶åå»ºï¼&lt;em&gt;åå¾åæ¶å¨(garbage collector)&lt;/em&gt; å¯ä»¥åæ¶å¯¹è±¡å å å­å¨ï¼å¯¹è±¡æ°¸è¿ä¸ä¼æ¾å¼éæ¾åå­ãå çå¤§å°åæ ·å¯ä»¥æ¯åºå®çï¼æèæ ¹æ®è®¡ç®è¦æ±å¨æä¼¸ç¼©ãå åå­&lt;strong&gt;ä¸å¿æ¯è¿ç»­ç&lt;/strong&gt;ã&lt;/p&gt;
&lt;p&gt;ç¨æ·å¯ä»¥æ§å¶å åºå®åå§å¤§å°ï¼æå¨æä¼¸ç¼©åºæ¯æ§å¶å çæå¤§/æå°å¼ã&lt;/p&gt;
&lt;p&gt;å³èçå¼å¸¸ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;è®¡ç®éè¦çå åå­å¤äºç³»ç»å¯ä»¥æä¾çåå­èµæºï¼ JVM ä¼æåº &lt;strong&gt;OutOfMemoryError&lt;/strong&gt;ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;method-area&#34;&gt;Method Area&lt;/h3&gt;
&lt;p&gt;æ¹æ³åºå­å¨æ¯ä¸ªç±»çç»æï¼å¦&lt;em&gt;è¿è¡æ¶å¸¸éæ± (run-time constant pool)&lt;/em&gt;ï¼&lt;em&gt;å­æ®µ(field)&lt;/em&gt;ï¼å&lt;em&gt;æ¹æ³æ°æ®(method data)&lt;/em&gt;ï¼ä»¥åæ¹æ³åæé å½æ°çä»£ç ï¼æ¯å±äº«èµæºã&lt;/p&gt;
&lt;p&gt;æ¹æ³åºåæ ·æ¯å¨ JVM å¯å¨æ¶åå»ºãå°½ç®¡æ¹æ³åºå¨é»è¾ä¸æ¯å çä¸é¨åï¼ä½ JVM å®ç°å¯ä»¥éæ©ä¸å¯¹å¶è¿è¡åå¾åæ¶æåç¼©ã&lt;/p&gt;
&lt;p&gt;æ¹æ³åºå¯ä»¥æ¯åºå®å¤§å°ï¼ææ ¹æ®è®¡ç®éæ±è¿è¡å¨æä¼¸ç¼©ãæ¹æ³åºåå­åæ ·&lt;strong&gt;ä¸å¿æ¯è¿ç»­ç&lt;/strong&gt;ã&lt;/p&gt;
&lt;p&gt;å³èçå¼å¸¸ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;æ¹æ³åºéè¦åéçåå­å¤äºç³»ç»å¯æä¾çåå­èµæºï¼JVM ä¼æåº &lt;strong&gt;OutOfMemoryError&lt;/strong&gt;ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;native-method-stacks&#34;&gt;Native Method Stacks&lt;/h3&gt;
&lt;p&gt;JVM å¯ä»¥ä½¿ç¨ä¼ ç»çå æ ï¼ä¿ç§° âC æ âï¼æ¥æ¯æ &lt;em&gt;native&lt;/em&gt; æ¹æ³ã&lt;em&gt;native&lt;/em&gt; æ¹æ³æ å¯ä»¥ç¨äº JVM Cè¯­è¨æä»¤éçè§£éå¨ãJVM ä¸è½å è½½ &lt;em&gt;native&lt;/em&gt; æ¹æ³ï¼å¹¶ä¸å®æ¬èº«ä¸ä¾èµäºä¼ ç»å æ ï¼ä¸éè¦æä¾ &lt;em&gt;native&lt;/em&gt; æ¹æ³æ ãå¦ææä¾ï¼éå¸¸å¨åå»ºçº¿ç¨æ¶ä¸ºæ¯ä¸ªçº¿ç¨æä¾ &lt;em&gt;native&lt;/em&gt; æ¹æ³æ ã&lt;/p&gt;
&lt;p&gt;JVM è§èåè®¸ &lt;em&gt;native&lt;/em&gt; æ¹æ³å æ å·æåºå®å¤§å°ï¼æèæ ¹æ®è®¡ç®è¦æ±å¨ææ©å±åæ¶ç¼©ãå¦ææ¬æºæ¹æ³å æ çå¤§å°åºå®ï¼åå¨åå»ºæ¯ä¸ª &lt;em&gt;native&lt;/em&gt; æ¹æ³æ çå¤§å°æ¶å¯ä»¥ç¬ç«éæ©ã&lt;/p&gt;
&lt;p&gt;&lt;em&gt;native&lt;/em&gt; æ¹æ³æ å³èçå¼å¸¸ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;å¦æçº¿ç¨ä¸­çè®¡ç®æéç &lt;em&gt;native&lt;/em&gt; æ¹æ³æ å®¹éè¶åºåè®¸çèå´ï¼å JVM ä¼æåº &lt;strong&gt;StackOverflowError&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;å¦æ &lt;em&gt;native&lt;/em&gt; æ¹æ³æ å®¹éå°è¯å¨ææ©å±ï¼ä½å¤é¨ç¯å¢æ æ³æä¾è¶³å¤çåå­èµæºï¼ææ²¡æè¶³å¤çåå­èµæºä¸ºæ°çº¿ç¨åå»º &lt;em&gt;native&lt;/em&gt; æ¹æ³æ ï¼å JVM ä¼æåº &lt;strong&gt;OutOfMemoryError&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;run-time-constant-pool&#34;&gt;Run-Time Constant Pool&lt;/h3&gt;
&lt;p&gt;è¿è¡æ¶å¸¸éæ± æ¯æ¯ä¸ªç±»ææ¥å£ç &lt;em&gt;class&lt;/em&gt; æä»¶ä¸­ &lt;em&gt;constant_pool&lt;/em&gt; è¡¨çè¿è¡æ¶è¡¨ç¤ºå½¢å¼ãå®ä¸»è¦åå«ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ç¼è¯æ¶æ°å­æå­&lt;/li&gt;
&lt;li&gt;è¿è¡æ¶æ¹æ³åå­æ®µå¼ç¨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;è¿è¡æ¶å¸¸éæ± åè½ç±»ä¼¼äºå¸¸è§ç¼ç¨è¯­è¨çç¬¦å·è¡¨ãå°½ç®¡å®åå«çæ°æ®èå´æ¯å¸åçç¬¦å·è¡¨æ´å¤§ã&lt;/p&gt;
&lt;p&gt;æ¯ä¸ªè¿è¡æ¶å¸¸éæ± é½æ¯ä» JVM æ¹æ³å»åéçï¼å½ JVM åå»ºç±»ææ¥å£æ¶ï¼å°ä¸ºè¯¥ç±»æç»ææé è¿è¡æ¶å¸¸éæ± ã&lt;/p&gt;
&lt;p&gt;è¿è¡æ¶å¸¸éæ± ä¼å³èå¦ä¸å¼å¸¸ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;åå»ºç±»æç¼å£æ¶ï¼å¦æè¿è¡æ¶å¸¸éæ± æé æéçåå­è¶è¿ JVM æ¹æ³åºçå¯ç¨åå­ï¼å JVM ä¼æåº &lt;strong&gt;OutOfMemoryError&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;execution-engine&#34;&gt;Execution Engine&lt;/h2&gt;
&lt;p&gt;æ§è¡å¼ææ§è¡ &lt;em&gt;.class(bytecode)&lt;/em&gt;.å®éè¡è¯»åå­èç ï¼ä½¿ç¨åä¸ªå­å¨åºçæ°æ®åä¿¡æ¯å¹¶æ§è¡æä»¤ï¼å®å¯ä»¥åæä¸é¨åï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interpreterï¼éè¡è§£éå­èç ç¶åæ§è¡ãç¼ºç¹æ¯å½å¤å¤è°ç¨ä¸ä¸ªæ¹æ³æ¶ï¼æ¯æ¬¡é½éè¦è§£éæ­¥éª¤ã&lt;/li&gt;
&lt;li&gt;Just-in-Time Compiler(HotSpot)ï¼ç¨äºæé«è§£éå¨çæçï¼å®ç¼è¯æ´ä¸ªå­èç å¹¶å°å¶è½¬æ¢ä¸º &lt;em&gt;native&lt;/em&gt; ä»£ç ï¼æ¯å½è§£éå¨éè§éå¤çæ¹æ³è°ç¨æ¶ï¼JIT é½ä¼ä¸ºè¯¥é¨åæä¾ &lt;em&gt;native&lt;/em&gt; ä»£ç ï¼å æ­¤ä¸ç¨è§£éå¨éå¤è§£éï¼ä»èæé«äºæçã&lt;/li&gt;
&lt;li&gt;Garbage Collectorï¼éæ¯æªå¼ç¨çå¯¹è±¡ï¼åæ¶åå­ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-native-interfacejni&#34;&gt;Java Native Interfaceï¼JNIï¼&lt;/h2&gt;
&lt;p&gt;JNI æ¯ä¸ &lt;em&gt;native&lt;/em&gt; æ¹æ³åºäº¤äºçæ¥å£ï¼å®ä½¿ JVM å¯ä»¥è°ç¨ C/C ++ åºã&lt;/p&gt;
&lt;h2 id=&#34;native-method-libraries&#34;&gt;Native Method Libraries&lt;/h2&gt;
&lt;p&gt;ä¾æ§è¡å¼æéè¦ç &lt;em&gt;native&lt;/em&gt; ä»£ç åºã&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;JVM Run-Time Data Areas: &lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4&#34;&gt;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4&lt;/a&gt;
JVM architecture: &lt;a href=&#34;https://www.geeksforgeeks.org/jvm-works-jvm-architecture/&#34;&gt;https://www.geeksforgeeks.org/jvm-works-jvm-architecture/&lt;/a&gt;
Class Loader: &lt;a href=&#34;https://www.baeldung.com/java-classloaders&#34;&gt;https://www.baeldung.com/java-classloaders&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM Mechanics</title>
      <link>https://zacash.cn/post/jvm-mechanics/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/post/jvm-mechanics/</guid>
      <description>&lt;p&gt;Class æä»¶çç»æ&lt;/p&gt;
&lt;h2 id=&#34;class-file&#34;&gt;Class File&lt;/h2&gt;
&lt;h3 id=&#34;classfile-structure&#34;&gt;ClassFile structure&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-class&#34; data-lang=&#34;class&#34;&gt;ClassFile {
    u4 magic;
    u2 minor_version;
    u2 major_version;
    u2 constant_pool_count;
    cp_info constant_pool[constant_pool_count-1];
    u2 access_flags;
    u2 this_class;
    u2 super_class;
    u2 interfaces_count;
    u2 interfaces[interfaces_count];
    u2 fields_count;
    field_info fields[fields_count];
    u2 methods_count;
    method_info methods[methods_count];
    u2 attributes_count;
    attribute_info attributes[attributes_count];
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;The constant_pool is a table of structures representing various string constants, class and interface names, field names, and other constants that are referred to within the ClassFile structure and its substructures. The format of each constant_pool table entry is indicated by its first &amp;ldquo;tag&amp;rdquo; byte.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;constant_pool&lt;/em&gt; æ¯ä¸ä¸ªç»æè¡¨ï¼è¡¨ç¤ºå­ç¬¦ä¸²å¸¸éãclass å interface åç§°ãfield åç§°ä»¥å ClassFile ç»æåå¶å­ç»æä¸­å¼ç¨çå¸¸éãæ¯ä¸ª &lt;em&gt;constant_pool&lt;/em&gt; è¡¨æ¡ç®çæ ¼å¼ç±å¶ &amp;ldquo;tag&amp;rdquo; å­èæ è¯ã&lt;/p&gt;
&lt;h4 id=&#34;constant-pool&#34;&gt;constant pool&lt;/h4&gt;
&lt;p&gt;Jvm æä»¤ä¸ä¾èµäºç±»ï¼æ¥å£ï¼ç±»å®ä¾ææ°ç»ï¼ç¸åï¼æä»¤å¼ç¨äº constant_pool è¡¨ä¸­çç¬¦å·ä¿¡æ¯ï¼symbolic infoï¼ãå¸¸éæ± ä¸­çæ¡ç®æå¦ä¸çç»æï¼&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-class&#34; data-lang=&#34;class&#34;&gt;cP_info {
    u1 tag;
    u1 info[];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tag è¡¨ç¤ºå¸¸éçç±»åï¼info å­å¨å¸¸éçå¼&lt;/p&gt;
&lt;p&gt;tag ç±»ååå¯¹åºçå¼ï¼&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Constant Type&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_Class&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_Fieldref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_Methodref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_InterfaceMethodref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_String&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_Integer&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_Float&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_Long&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_Double&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_NameAndType&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONSTANT_Utf8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;field_info&lt;/em&gt; çç»æï¼&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-class&#34; data-lang=&#34;class&#34;&gt;field_info {
    u2 access_flags;
    u2 name_index;
    u2 descriptor_index;
    u2 attributes_count;
    attribute_info attributes[attributes_count];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;field-access_flags&#34;&gt;Field access_flags&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Interpretation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ACC_PUBLIC&lt;/td&gt;
&lt;td&gt;0x0001&lt;/td&gt;
&lt;td&gt;Declared public; may be accessed from outside its package.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_PRIVATE&lt;/td&gt;
&lt;td&gt;0x0002&lt;/td&gt;
&lt;td&gt;Declared private; usable only within the defining class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_PROTECTED&lt;/td&gt;
&lt;td&gt;0x0004&lt;/td&gt;
&lt;td&gt;Declared protected; may be accessed within subclasses.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_STATIC&lt;/td&gt;
&lt;td&gt;0x0008&lt;/td&gt;
&lt;td&gt;Declared static.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_FINAL&lt;/td&gt;
&lt;td&gt;0x0010&lt;/td&gt;
&lt;td&gt;Declared final; no further assignment after initialization.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_VOLATILE&lt;/td&gt;
&lt;td&gt;0x0040&lt;/td&gt;
&lt;td&gt;Declared volatile; cannot be cached.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_TRANSIENT&lt;/td&gt;
&lt;td&gt;0x0080&lt;/td&gt;
&lt;td&gt;Declared transient; not written or read by a persistent object manager.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;method_info&lt;/em&gt; çç»æï¼&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-class&#34; data-lang=&#34;class&#34;&gt;method_info {
    u2 access_flags;
    u2 name_index;
    u2 descriptor_index;
    u2 attributes_count;
    attribute_info attributes[attributes_count];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;method-access_flags&#34;&gt;Method access_flags&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Interpretation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ACC_PUBLIC&lt;/td&gt;
&lt;td&gt;0x0001&lt;/td&gt;
&lt;td&gt;Declared public; may be accessed from outside its package.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_PRIVATE&lt;/td&gt;
&lt;td&gt;0x0002&lt;/td&gt;
&lt;td&gt;Declared private; accessible only within the defining class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_PROTECTED&lt;/td&gt;
&lt;td&gt;0x0004&lt;/td&gt;
&lt;td&gt;Declared protected; may be accessed within subclasses.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_STATIC&lt;/td&gt;
&lt;td&gt;0x0008&lt;/td&gt;
&lt;td&gt;Declared static.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_FINAL&lt;/td&gt;
&lt;td&gt;0x0010&lt;/td&gt;
&lt;td&gt;Declared final; may not be overridden.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_SYNCHRONIZED&lt;/td&gt;
&lt;td&gt;0x0020&lt;/td&gt;
&lt;td&gt;Declared synchronized; invocation is wrapped in a monitor lock.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_NATIVE&lt;/td&gt;
&lt;td&gt;0x0100&lt;/td&gt;
&lt;td&gt;Declared native; implemented in a language other than Java.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_ABSTRACT&lt;/td&gt;
&lt;td&gt;0x0400&lt;/td&gt;
&lt;td&gt;Declared abstract; no implementation is provided.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACC_STRICT&lt;/td&gt;
&lt;td&gt;0x0800&lt;/td&gt;
&lt;td&gt;Declared strictfp; floating-point mode is FP-strict&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;interpreter-vs-compilers&#34;&gt;Interpreter vs Compilers&lt;/h2&gt;
&lt;h3 id=&#34;interpreter&#34;&gt;Interpreter&lt;/h3&gt;
&lt;p&gt;Fetch next bytecode, execute, repeat&lt;/p&gt;
&lt;h3 id=&#34;compilers&#34;&gt;Compilers&lt;/h3&gt;
&lt;p&gt;HotSpot has two compilers: JIT compiler and server compiler&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert entire methods into native code&lt;/li&gt;
&lt;li&gt;Optimize(inlining, unboxing, loop optimization, etc)&lt;/li&gt;
&lt;li&gt;Code calls back to &amp;ldquo;runtime&amp;rdquo; when necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;compiling-for-jvm&#34;&gt;Compiling for JVM&lt;/h3&gt;
&lt;p&gt;ç¼è¯æ¯å° Java æºç ç¼è¯æ Jvm æä»¤éï¼instruction setï¼çè¿ç¨ï¼ç¼è¯å¨ï¼compilerï¼æ¯å®ç°è¿ä¸è¿ç¨çå·¥å·ï¼æäºåºæ¯ç¼è¯å¨æä»£å° Jvm æä»¤éè½¬å°å°ç¹å® CPU æä»¤éçå·¥å·ã&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to HashMap</title>
      <link>https://zacash.cn/post/intro-to-hashmap/</link>
      <pubDate>Wed, 15 Jul 2020 15:11:27 +0800</pubDate>
      
      <guid>https://zacash.cn/post/intro-to-hashmap/</guid>
      <description>&lt;p&gt;Hash table based implementation of the Map interface.  This implementation provides all of the optional map operations, and permits null values and the null key.&lt;/p&gt;
&lt;h2 id=&#34;hashmap-ä»ç»&#34;&gt;HashMap ä»ç»&lt;/h2&gt;
&lt;p&gt;The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls. This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time.&lt;/p&gt;
&lt;p&gt;HashMap å HashTable å¤§è´ç­æï¼é¤äº HashMap æ¯éåæ­¥çï¼ä»¥ååè®¸ç©ºå¼ãæ æ³ä¿è¯é¡ºåºéçæ¶é´çæ¨ç§»ä¿æä¸åã&lt;/p&gt;
&lt;p&gt;This implementation provides &lt;strong&gt;constant-time&lt;/strong&gt; performance for the basic operations (get and put),assuming the hash function disperses the elements properly among the buckets.&lt;/p&gt;
&lt;p&gt;åè®¾ hash å½æ°å°åç´ åæ£å¨æ­£ç¡®ç bucket ä¸­ï¼HashMap å¯¹äºåºæ¬æä½(get æ put) ä¼æä¾æå®æ¶é´çæ§è½ã&lt;/p&gt;
&lt;h3 id=&#34;ä½ä¸º-constant-time&#34;&gt;ä½ä¸º constant time&lt;/h3&gt;
&lt;p&gt;constant time æ¯è¡¨ç¤ºæ¶é´å¤æåº¦çä¸ä¸ªç¤ºä¾ï¼å¸¸è§æ¶é´å¤æåº¦çæè¿°ï¼&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time complexity&lt;/th&gt;
&lt;th&gt;Time description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;Constant time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(log n)&lt;/td&gt;
&lt;td&gt;Logarithmic time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;Linear time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;td&gt;Pseudo-linear time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n^c)&lt;/td&gt;
&lt;td&gt;Polynomial time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(c^n)&lt;/td&gt;
&lt;td&gt;Exponential time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n!)&lt;/td&gt;
&lt;td&gt;Factorial time&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Iteration over collection views requires time proportional to the &amp;ldquo;capacity&amp;rdquo; of the HashMap instance (the number of buckets) plus its size (the number of key-value mappings).&lt;/p&gt;
&lt;p&gt;ä»éåè§è§çï¼è¿­ä»£æéçæ¶é´ä¸ HashMap å®ä¾çâå®¹éâï¼ bucket æ°é ï¼åå¶å¤§å°ï¼é®-å¼æ å°æ°ï¼ææ­£æ¯ã&lt;/p&gt;
&lt;p&gt;Thus, it&amp;rsquo;s very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important.&lt;/p&gt;
&lt;p&gt;å æ­¤ï¼å¦æè¿­ä»£æ§è½å¾éè¦ï¼é£ä¹ä¸è¦å°åè¯å®¹éè®¾ç½®è¿é«ï¼æè´è½½å å­è®¾ç½®è¿ä½ï¼ï¼è¿å¾å³é®ã&lt;/p&gt;
&lt;p&gt;An instance of HashMap has two parameters that affect its performanceï¼&lt;/p&gt;
&lt;p&gt;æä¸¤ä¸ªåæ°ä¼å½±å HashMap å®ä¾çæ§è½ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initial capacity åå§å®¹é&lt;/li&gt;
&lt;li&gt;load factor è´è½½å å­&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The capacity is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. The load factor is a measure of how full the hash table is allowed to get before its capacity is automatically increased.&lt;/p&gt;
&lt;p&gt;å®¹éæ¯åå¸è¡¨ä¸­ bucket çæ°éï¼åå§å®¹éå³æ¯åå»ºåå¸è¡¨æ¶çå®¹éãè´è½½å å­ç¨æ¥è¯ä¼°åå¸è¡¨å¡«æ»¡çç¨åº¦ï¼ä»¥èªå¨å¢é¿å®¹éã&lt;/p&gt;
&lt;p&gt;When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.&lt;/p&gt;
&lt;p&gt;å½åå¸è¡¨ä¸­çæ¡ç®æ°è¶è¿è´è½½å å­åå½åå®¹éçä¹ç§¯æ¶ï¼åå¸è¡¨å°è¢«éæ°æ å°ï¼å³åé¨æ°æ®ç»æå°è¢«éå»ºï¼ï¼ä»¥ä½¿åå¸è¡¨ç bucket æ°å¤§çº¦ä¸ºä¸¤åã&lt;/p&gt;
&lt;p&gt;As a general rule, the default load factor (0.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the HashMap class, including get and put).&lt;/p&gt;
&lt;p&gt;éå¸¸ï¼é»è®¤è´è½½å å­ï¼0.75ï¼å¨æ¶é´åç©ºé´ææ¬ä¹é´æä¾äºä¸ä¸ªå¾å¥½çæè¡¡ãè¾é«çå¼ä¼åå°ç©ºé´å¼éï¼ä½ä¼å¢å æ¥æ¾ææ¬ï¼ååºå¨ HashMap ç±»çå¤§å¤æ°æä½ä¸­ï¼åæ¬ get å putï¼ã&lt;/p&gt;
&lt;p&gt;The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the number of rehash operations.&lt;/p&gt;
&lt;p&gt;è®¾ç½®å¶åå§å®¹éæ¶ï¼åºèè map ä¸­çé¢ææ¡ç®æ°åå¶è´è½½å å­ï¼ä»¥æå¤§ç¨åº¦å°åå°éæ°æ å°æä½çæ¬¡æ°ã&lt;/p&gt;
&lt;p&gt;If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur.&lt;/p&gt;
&lt;p&gt;å¦æåå§å®¹éå¤§äºæå¤§æ¡ç®æ°é¤ä»¥è´è½½å å­ï¼åå°ä¸ä¼åçä»»ä½æ å°æä½ã&lt;/p&gt;
&lt;p&gt;If many mappings are to be stored in a HashMap instance, creating it with a sufficiently large capacity will allow the mappings to be stored more efficiently than letting it perform automatic rehashing as needed to grow the table.&lt;/p&gt;
&lt;p&gt;å¦æå°è®¸å¤æ å°å³ç³»å­å¨å¨ HashMap å®ä¾ä¸­ï¼åå»ºè¶³å¤å¤§å®¹éç map å°æ¯è®©å¶æéèªå¨å¢é¿åå¸è¡¨éæ°æ å°ï¼æ´ææçå­å¨æ å°ã&lt;/p&gt;
&lt;p&gt;Note that using many keys with the same {@code hashCode()} is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are {@link Comparable}, this class may use comparison order among keys to help break ties.&lt;/p&gt;
&lt;p&gt;æ³¨æï¼ä½¿ç¨è®¸å¤å·æç¸å hashCode çé®æ¯éä½ä»»ä½åå¸è¡¨æ§è½çæ¹æ³ãä¸ºäºæ¹åå½±åï¼å½é®æ¯å¯æ¯è¾æ¶(Comparable)æ¶ï¼æ­¤ç±»å¯ä»¥ä½¿ç¨é®ä¹é´çæ¯è¾é¡ºåºæ¥å¸®å©æç ´å¹³è¡¡ã&lt;/p&gt;
&lt;p&gt;Note that this implementation is not synchronized. If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map.&lt;/p&gt;
&lt;p&gt;æ³¨æï¼è¿ä¸ªå®ç°å¹¶ä¸æ¯åæ­¥çãå¦æå¤çº¿ç¨åæ¶è®¿é® hash mapï¼å¹¶ä¸è³å°æä¸ä¸ªçº¿ç¨å¨ç»æä¸ä¿®æ¹äº mapï¼åå¿é¡»å¨å¤é¨è¿è¡åæ­¥ãï¼ç»æåä¿®æ¹æ¯æå¢å ä¸ä¸ªæå¤ä¸ªæ å°å³ç³»ï¼æ´æ°æä¸ª key å¯¹åºçå¼å¹¶ä¸æ¯ç»æåä¿®æ¹ï¼ãéå¸¸æ¯å¯¹å°è£ map çæä¸ªå¯¹è±¡å åæ­¥æ¥å®ç°ã&lt;/p&gt;
&lt;p&gt;If no such object exists, the map should be &amp;ldquo;wrapped&amp;rdquo; using the {@link Collections#synchronizedMap Collections.synchronizedMap} method.  This is best done at creation time, to prevent accidental unsynchronized access to the map: Map m = Collections.synchronizedMap(new HashMap(&amp;hellip;));&lt;/p&gt;
&lt;p&gt;å¦ææ²¡æè¿æ ·çå¯¹è±¡å­å¨ï¼ååºè¯¥ä½¿ç¨ Collections.synchronizedMap æ¹æ³æ¥åè£ mapï¼æå¥½æ¯å¨åå»ºæ¶å®æï¼ä»¥é¿åæå¤ä¸åæ­¥å°è®¿é® mapï¼&lt;code&gt;Map m = Collections.synchronizedMap(new HashMap(...));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The iterators returned by all of this class&amp;rsquo;s &amp;ldquo;collection view methods&amp;rdquo; are fail-fast: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator&amp;rsquo;s own remove method, the iterator will throw a {@link ConcurrentModificationException}.  Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.&lt;/p&gt;
&lt;p&gt;æ­¤ç±»çææâéåè§è§æ¹æ³âè¿åçè¿­ä»£å¨é½æ¯ &lt;a href=&#34;https://whatis.techtarget.com/definition/fail-fast&#34;&gt;fast fail&lt;/a&gt; çï¼å¨åå»ºè¿­ä»£å¨ä¹åä»»ä½æ¶å»å¯¹ map ç»æè¿è¡äºä¿®æ¹ï¼é¤äºéè¿è¿­ä»£å¨èªå·²ç remove æ¹æ³ä»¥å¤ï¼è¯¥è¿­ä»£å¨é½ä¼æåº ConcurrentModificationExceptionãå æ­¤ï¼é¢å¯¹å¹¶åä¿®æ¹ï¼è¿­ä»£å¨ä¼å¿«éå¹²åç failï¼èä¸æ¯å¨æªæ¥çä¸ç¡®å®æ¶é´åçä»»æï¼ä¸ç¡®å®è¡ä¸ºçé£é©ã&lt;/p&gt;
&lt;h3 id=&#34;ä½ä¸º-fast-fail&#34;&gt;ä½ä¸º fast fail&lt;/h3&gt;
&lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification.  Fail-fast iterators throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: the fail-fast behavior of iterators should be used only to detect bugs.&lt;/p&gt;
&lt;p&gt;æ³¨æä¸è½ä¿è¯è¿­ä»£å¨ç fast fail è¡ä¸ºï¼ä¸è¬æ¥è¯´ï¼å¨å­å¨ä¸åæ­¥çå¹¶åä¿®æ¹æåµä¸ï¼ä¸å¯è½ä½åºä»»ä½ä¸¥æ ¼çä¿è¯ãå æ­¤ï¼ç¼åä¾èµäºæ­¤å¼å¸¸çç¨åºçæ­£ç¡®æ§æ¯éè¯¯çï¼è¿­ä»£å¨ç fast fail è¡ä¸ºä»ç¨äºéè¯¯æ£æµã&lt;/p&gt;
&lt;p&gt;This class is a member of the Java Collections Framework&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/collections/index.html&#34;&gt;jcf&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Are Touch Events Delivered</title>
      <link>https://zacash.cn/post/how-are-touch-events-delivered/</link>
      <pubDate>Sat, 11 Jul 2020 08:37:45 +0800</pubDate>
      
      <guid>https://zacash.cn/post/how-are-touch-events-delivered/</guid>
      <description>&lt;p&gt;æ ¹æ®ä¾å­æ¥çè§£ Android çäºä»¶ä¼ é&lt;/p&gt;
&lt;p&gt;é¡µé¢çå¸å±ç»æ&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;layout&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;data&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;variable&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;viewModel&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.zac4j.system.data.TouchViewModel&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;com.zac4j.system.ui.widget.CustomLayout&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@id/touch_sample_container&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Button&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@id/touch_sample_btn&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;style=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@style/Widget.AppCompat.Button.Colored&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Touch Me&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintTop_toTopOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/com.zac4j.system.ui.widget.CustomLayout&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;touchevent-çä¼ é&#34;&gt;TouchEvent çä¼ é&lt;/h2&gt;
&lt;p&gt;æä»¬éå¸¸å¯¹ Button åå»ºç¹å»äºä»¶:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;touchSampleBtn.setOnClickListener {
    Logger.i(TAG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setOnClickListener&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sampleBtn clicked&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¯ä»¥åçä¸ View.dispatchTouchEvent() çå®ç°:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; boolean dispatchTouchEvent(MotionEvent event) {
    ...
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (onFilterTouchEventForSecurity(event)) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((mViewFlags &amp;amp; ENABLED_MASK) == ENABLED &amp;amp;&amp;amp; handleScrollBarDragging(event)) {
            result = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#75715e&#34;&gt;//noinspection SimplifiableIfStatement
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ListenerInfo li = mListenerInfo;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (li != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; li.mOnTouchListener != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
                &amp;amp;&amp;amp; (mViewFlags &amp;amp; ENABLED_MASK) == ENABLED
                &amp;amp;&amp;amp; li.mOnTouchListener.onTouch(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, event)) {
            result = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!result &amp;amp;&amp;amp; onTouchEvent(event)) {
            result = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
        }
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¯ä»¥çå° &lt;code&gt;View.mOnTouchListener.onTouch()&lt;/code&gt; ä¼å¨ &lt;code&gt;View.onTouchEvent()&lt;/code&gt; åå¤æ­æ¯å¦æ§è¡ï¼åå¦ &lt;code&gt;View.mOnTouchListener.onTouch()&lt;/code&gt; è¿å true(æ¶è´¹è¯¥äºä»¶) çè¯ï¼&lt;code&gt;View.onTouchEvent()&lt;/code&gt; å°ä¸ä¼æ§è¡ã&lt;/p&gt;
&lt;p&gt;&lt;code&gt;View.mTouchListener.onTouch()&lt;/code&gt; çæ§è¡æ¡ä»¶æ¯:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mTouchListener ä¸ä¸ºç©º(å³è®¾ç½® &lt;code&gt;View.setOnTouchListener()&lt;/code&gt; æ¹æ³)&lt;/li&gt;
&lt;li&gt;View æ¯ enable ç¶æ(æªè®¾ç½® &lt;code&gt;View.setEnable(false)&lt;/code&gt; æ¹æ³)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;viewgrouponintercepttouchevent&#34;&gt;ViewGroup.onInterceptTouchEvent&lt;/h2&gt;
&lt;p&gt;è®¾ç½® &lt;code&gt;CustomLayout.onInterceptTouchEvent()&lt;/code&gt; è¿å falseï¼ç¹å» touchSamleBtn æé®.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;# MotionEvent.ACTION_DOWN äºä»¶
I/ZacLog: Page -&amp;gt; TouchFragment, View -&amp;gt; CustomLayout, Method -&amp;gt; dispatchTouchEvent, Msg -&amp;gt; MotionEvent::ACTION_DOWN
I/ZacLog: Page -&amp;gt; TouchFragment, View -&amp;gt; CustomLayout, Method -&amp;gt; onInterceptTouchEvent, Msg -&amp;gt; MotionEvent::ACTION_DOWN
I/ZacLog: Page -&amp;gt; TouchFragment, View -&amp;gt; touchSampleBtn::AppCompatButton, Method -&amp;gt; setOnTouchListener, Msg -&amp;gt; MotionEvent::ACTION_DOWN
# MotionEvent.ACTION_UP äºä»¶
I/ZacLog: Page -&amp;gt; TouchFragment, View -&amp;gt; CustomLayout, Method -&amp;gt; dispatchTouchEvent, Msg -&amp;gt; MotionEvent::ACTION_UP
I/ZacLog: Page -&amp;gt; TouchFragment, View -&amp;gt; CustomLayout, Method -&amp;gt; onInterceptTouchEvent, Msg -&amp;gt; MotionEvent::ACTION_UP
I/ZacLog: Page -&amp;gt; TouchFragment, View -&amp;gt; touchSampleBtn::AppCompatButton, Method -&amp;gt; setOnTouchListener, Msg -&amp;gt; MotionEvent::ACTION_UP
# View.onClick äºä»¶
I/ZacLog: Page -&amp;gt; TouchFragment, View -&amp;gt; touchSampleBtn::AppCompatButton, Method -&amp;gt; setOnClickListener, Msg -&amp;gt; clicked
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;äºä»¶çä¼ é: CustomLayout.dispatchTouchEvent() -&amp;gt; CustomLayout.onInterceptTouchEvent() -&amp;gt; View.mOnTouchListener.onTouch()&lt;/p&gt;
&lt;p&gt;åæ¶ MotionEvent.ACTION_DOWN + MotionEvent.ACTION_DOWN -&amp;gt; View.mOnClickListener.onClick()&lt;/p&gt;
&lt;p&gt;è®¾ç½® &lt;code&gt;CustomLayout.onInterceptTouchEvent()&lt;/code&gt; è¿å trueï¼ç¹å» touchSampleBtn.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;I/ZacLog: Page -&amp;gt; TouchFragment, View -&amp;gt; CustomLayout, Method -&amp;gt; onInterceptTouchEvent, Msg -&amp;gt; MotionEvent::ACTION_DOWN
I/ZacLog: Page -&amp;gt; TouchFragment, View -&amp;gt; touchSampleContainer::CustomLayout, Method -&amp;gt; setOnTouchListener, Msg -&amp;gt; MotionEvent::ACTION_DOWN
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;æä»¬çä¸ ViewGroup.dispatchTouchEvent() çå®ç°ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dispatchTouchEvent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MotionEvent ev&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mInputEventConsistencyVerifier &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        mInputEventConsistencyVerifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onTouchEvent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ev&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// If the event targets the accessibility focused view and this is it, start
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// normal event dispatch. Maybe a descendant is what will handle the click.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isTargetAccessibilityFocus&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; isAccessibilityFocusedViewOrHost&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setTargetAccessibilityFocus&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; handled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;onFilterTouchEventForSecurity&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ev&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; actionMasked &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; action &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; MotionEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Handle an initial down.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;actionMasked &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_DOWN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// Throw away all previous state when starting a new touch gesture.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// The framework may have dropped the up or cancel event for the previous gesture
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// due to an app switch, ANR, or some other state change.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            cancelAndClearTouchTargets&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ev&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            resetTouchState&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Check for interception.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; intercepted&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;actionMasked &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_DOWN&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; mFirstTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; disallowIntercept &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mGroupFlags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FLAG_DISALLOW_INTERCEPT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;disallowIntercept&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                intercepted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; onInterceptTouchEvent&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ev&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;action&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// restore action in case it was changed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                intercepted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// There are no touch targets and this action is not an initial down
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// so this view group continues to intercept touches.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            intercepted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// If intercepted, start normal event dispatch. Also if there is already
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// a view that is handling the gesture, do normal event dispatch.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;intercepted &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; mFirstTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setTargetAccessibilityFocus&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Check for cancelation.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; canceled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resetCancelNextUpFlag&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; actionMasked &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_CANCEL&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Update list of touch targets for pointer down, if needed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; split &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mGroupFlags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FLAG_SPLIT_MOTION_EVENTS&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        TouchTarget newTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; alreadyDispatchedToNewTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;canceled &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;intercepted&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

            &lt;span style=&#34;color:#75715e&#34;&gt;// If the event is targeting accessibility focus we give it to the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// view that has accessibility focus and if it does not handle it
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// we clear the flag and dispatch the event to all children as usual.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// We are looking up the accessibility focused host to avoid keeping
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// state since these events are very rare.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            View childWithAccessibilityFocus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isTargetAccessibilityFocus&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; findChildWithAccessibilityFocus&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;actionMasked &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_DOWN&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;split &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; actionMasked &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_POINTER_DOWN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; actionMasked &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_HOVER_MOVE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; actionIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getActionIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// always 0 for down
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idBitsToAssign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPointerId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;actionIndex&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ALL_POINTER_IDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

                &lt;span style=&#34;color:#75715e&#34;&gt;// Clean up earlier touch targets for this pointer id in case they
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// have become out of sync.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                removePointersFromTouchTargets&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;idBitsToAssign&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

                &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; childrenCount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mChildrenCount&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; childrenCount &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getX&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;actionIndex&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;actionIndex&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;// Find a child that can receive the event.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;// Scan children from front to back.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;View&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; preorderedList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buildTouchDispatchChildList&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; customOrder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; preorderedList &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; isChildrenDrawingOrderEnabled&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; View&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; children &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mChildren&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; childrenCount &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;--)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; childIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getAndVerifyPreorderedIndex&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                                childrenCount&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; customOrder&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; View child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getAndVerifyPreorderedView&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                                preorderedList&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; children&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; childIndex&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

                        &lt;span style=&#34;color:#75715e&#34;&gt;// If there is a view that has accessibility focus we want it
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// to get the event first and if not handled we will perform a
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// normal dispatch. We may do a double iteration but this is
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// safer given the timeframe.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;childWithAccessibilityFocus &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;childWithAccessibilityFocus &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                            childWithAccessibilityFocus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                            i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; childrenCount &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;canReceivePointerEvents&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
                                &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;isTransformedTouchPointInView&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setTargetAccessibilityFocus&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

                        newTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getTouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;child&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;// Child is already receiving touch within its bounds.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;// Give it the new pointer in addition to the ones it is handling.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                            newTouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pointerIdBits&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; idBitsToAssign&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

                        resetCancelNextUpFlag&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;child&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dispatchTransformedTouchEvent&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ev&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; idBitsToAssign&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;// Child wants to receive touch within its bounds.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                            mLastTouchDownTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDownTime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;preorderedList &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                                &lt;span style=&#34;color:#75715e&#34;&gt;// childIndex points into presorted list, find original index
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; childrenCount&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;children&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;childIndex&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; mChildren&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                                        mLastTouchDownIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                                        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                                mLastTouchDownIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; childIndex&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                            mLastTouchDownX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getX&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                            mLastTouchDownY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                            newTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addTouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;child&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; idBitsToAssign&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                            alreadyDispatchedToNewTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

                        &lt;span style=&#34;color:#75715e&#34;&gt;// The accessibility focus didn&amp;#39;t handle the event, so clear
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// the flag and do a normal dispatch to all children.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setTargetAccessibilityFocus&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;preorderedList &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; preorderedList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mFirstTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;// Did not find a child to receive the event.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;// Assign the pointer to the least recently added target.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    newTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mFirstTouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newTouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        newTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newTouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                    newTouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pointerIdBits&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; idBitsToAssign&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Dispatch to touch targets.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mFirstTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// No touch targets so treat this as an ordinary view.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            handled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dispatchTransformedTouchEvent&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ev&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; canceled&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                    TouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ALL_POINTER_IDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// Dispatch to touch targets, excluding the new touch target if we already
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// dispatched to it.  Cancel touch targets if necessary.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            TouchTarget predecessor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            TouchTarget target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mFirstTouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;target &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; TouchTarget next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alreadyDispatchedToNewTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; newTouchTarget&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    handled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; cancelChild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resetCancelNextUpFlag&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; intercepted&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dispatchTransformedTouchEvent&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ev&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cancelChild&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                            target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pointerIdBits&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        handled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cancelChild&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;predecessor &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            mFirstTouchTarget &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            predecessor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                        target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;recycle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                        target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                predecessor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Update list of touch targets for pointer up or cancel, if needed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;canceled
                &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; actionMasked &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_UP&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; actionMasked &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_HOVER_MOVE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            resetTouchState&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;split &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; actionMasked &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_POINTER_UP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; actionIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getActionIndex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idBitsToRemove &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPointerId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;actionIndex&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            removePointersFromTouchTargets&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;idBitsToRemove&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;handled &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mInputEventConsistencyVerifier &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        mInputEventConsistencyVerifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onUnhandledEvent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ev&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; handled&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Intro to Hybrid App</title>
      <link>https://zacash.cn/post/intro-to-hybrid-app/</link>
      <pubDate>Sat, 04 Jul 2020 15:45:14 +0800</pubDate>
      
      <guid>https://zacash.cn/post/intro-to-hybrid-app/</guid>
      <description>&lt;h2 id=&#34;hybrid-app-çå ç§æ¹æ¡&#34;&gt;Hybrid App çå ç§æ¹æ¡&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PhoneGap/Cordova&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WebView ä½ä¸ºç¨æ·çé¢ï¼ä»¥ Javascript ä½ä¸ºåºæ¬é»è¾ï¼ä»¥ååä¸­é´ä»¶éä¿¡ï¼åç±ä¸­é´ä»¶è®¿é®åºå± API çæ¹å¼ï¼è¿è¡ App å¼åã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;React Native/Weex&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ä½¿ç¨åç«¯ææ¯å¼åï¼éè¿ JSBridge å° Javascript ä»£ç è§£æç Virtual DOM ä¼ éå° Native å¹¶ä½¿ç¨åçè¿è¡æ¸²æã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Native/H5 æ··åå¼å&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;å¨åççæ¶æåºç¡ä¸ï¼åµå¥ WebView ä¸å¡é»è¾ï¼ä¸è¬æ Native å Web åç«¯å¼åäººåç»æãNative åå¥½åºæ¬çæ¶æä»¥å API è®© Web å¼åäººåå¼åé¡µé¢ä»¥åå¤§é¨åæ¸²æã&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;phonegapcordova&#34;&gt;PhoneGap/Cordova&lt;/h2&gt;
&lt;p&gt;PhoneGap ç± Apache æ¥ç®¡åæ¹åä¸º Cordovaï¼å®éä¸æ¯ä¸ä¸ªé¡¹ç®ãCordova å¶å®ä¸åºè¯¥ç§°ä¸º Hybrid æ¹æ¡ãå ä¸ºï¼å®çç®æ æ¯å¨é¢ä½¿ç¨åç«¯ææ¯å¼åç§»å¨åºç¨ï¼èä¸æ¯åç«¯ååçæ··åä½¿ç¨ãä¸è¿ï¼è¿äºæ¡æ¶å React Native çç®æ æ¯ä¸è´çï¼ä½¿ç¨åç«¯ææ¯å¼åç§»å¨åºç¨ï¼æé«å·¥ç¨æçã&lt;/p&gt;
&lt;p&gt;Cordova è®©åç«¯ææ¯å°½å¯è½å¤çå®æå¼åå·¥ä½ï¼åªæå¨åç«¯æ æ³ç´æ¥è°ç¨çåçç³»ç»åè½æ¹é¢æä¾äºåç«¯å¯ç¨çæ¥å£ãä¸»æµç Cordova é¡¹ç®é½å°ä¸å¡é»è¾å®ç°å¨ä¸ä¸ª WebView ä¸­ï¼ç®æ æ¯è®©å¼åèä½¿ç¨åç«¯ææ¯å°±è½å®æä¸ä¸ªåºç¨å¼åãè¿ç§åæ³éè¦ä¸ä¸ªåæââåç«¯ææ¯å¯ä»¥è§£å³ç§»å¨å¼åçææéæ±ã&lt;/p&gt;
&lt;h3 id=&#34;cordova-æ¶æå¾&#34;&gt;Cordova æ¶æå¾&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2018/7/23/164c7814e247d497?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;cordova arch&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web App æ¯å¼åäººåç¼åä»£ç çå°æ¹ï¼åºç¨ä»¥ç½é¡µçå½¢å¼åç°ï¼å¨ä¸ä¸ª index.html çæ¬å°é¡µé¢æä»¶ä¸­å¼ç¨æéè¦çåç§ Web èµæºï¼å¦ CSSãJavascriptãå¾çåå½±é³æä»¶ç­ãApp çéç½®ä¿å­å¨ config.xml æä»¶ä¸­ã&lt;/li&gt;
&lt;li&gt;WebView å±ç¨æ¥åç° UIã&lt;/li&gt;
&lt;li&gt;Plugin ä¸»è¦ç¨äºå¨ Javascript ä»£ç ä¸­è°ç¨åå¹³å°ç native åè½ãCordova é¡¹ç®å·²åå«ä¸äºæ ¸å¿çæä»¶ï¼å¦çµæ± ãæåå¤´ãéè®¯å½ç­ãå¼åäººåä¹å¯ä»¥èªå®ä¹æä»¶ï¼å¶åçå°±æ¯ Native è·å Javascript ç¯å¢ä¸ä¸æï¼å¹¶ç´æ¥å¨ä¸é¢æå¨å¯¹è±¡æèæ¹æ³ï¼&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cordova-çä¼ç¼ºç¹&#34;&gt;Cordova çä¼ç¼ºç¹&lt;/h3&gt;
&lt;h4 id=&#34;ä¼ç¹&#34;&gt;ä¼ç¹&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;å¿«éæå»ºUIï¼å¨ Web å¼åä¸å®ç¨åº¦ä¸æå©äº Web åç«¯äººåå¿«éå¼åã&lt;/li&gt;
&lt;li&gt;æ ·å¼ç»ä¸ï¼å¨ä¸åå¹³å°å¯ä»¥è·å¾ç¸åçäº¤äºåå±ç¤ºã&lt;/li&gt;
&lt;li&gt;ä¾¿äºè°è¯ï¼å¯ä»¥å¨æµè§å¨ä¸è¿è¡è°è¯ï¼å·¥å·ä¸°å¯ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ç¼ºç¹&#34;&gt;ç¼ºç¹&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;å¼å®¹æ§ï¼é¨ååç«¯æ¡æ¶æè¯­æ³å¨ä½çæ¬ Android ææºä¸æ æ³æ§è¡ã&lt;/li&gt;
&lt;li&gt;åè½æå±éæ§ï¼åªéç¨äºå¯UIåºæ¯ï¼ä¸åºå±äº¤äºéè¦åå¤æçå¤çã&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nativeh5-æ··åå¼å&#34;&gt;Native/H5 æ··åå¼å&lt;/h2&gt;
&lt;h3 id=&#34;åçåºç¡æ¶æ-infra&#34;&gt;åçåºç¡æ¶æ Infra&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hybrid-Navigatorï¼ä½¿ç¨ URL æ¥æ è¯æ¯ä¸ªé¡µé¢ï¼å¨ App ä¸­ææ URL è·³è½¬å°æ­¤é¡µé¢ãæä»¥éè¦ä¸ä¸ªè·¯ç±è¡¨ï¼æ ¹æ® URL æ¾å°ã&lt;/li&gt;
&lt;li&gt;Hybrid-Routerï¼å¯ä»¥ä¼ éå¤æå¯¹è±¡ï¼CRUD åè½ã&lt;/li&gt;
&lt;li&gt;Hybrid-Schemeï¼ä½¿ç¨ Scheme æ è¯ web è°ç¨åççåè½ï¼æ¯å¦ä¿®æ¹ WebView æ é¢æ åç¶ææ é¢è²ï¼è·å user_code ç­ã&lt;/li&gt;
&lt;li&gt;Hybrid-Containerï¼js ä»£ç è¿è¡å®¹å¨ãå®å¶å®æ¯ä¸ä¸ªååµæµè§å¨ï¼WebViewï¼ï¼Container éè¦æä¾ä¸äºå¿è¦çåçæ¯æï¼æ¯å¦ Cookieï¼OAuth ææï¼å¾çç¼å­ç­ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nativeh5-ææ¯åçjsbridge&#34;&gt;Native/H5 ææ¯åçââJsBridge&lt;/h3&gt;
&lt;h4 id=&#34;h5-å¦ä½è°åçæ¹æ³&#34;&gt;H5 å¦ä½è°åçæ¹æ³&lt;/h4&gt;
&lt;p&gt;åºäº WebView çæºå¶åå¼åç APIï¼ä¸»è¦æä¸ç§æ¹å¼ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API æ³¨å¥ï¼åçå°±æ¯ Native è·å Javascript ç¯å¢çä¸ä¸æï¼å¹¶å¨ä¸é¢æè½½å¯¹è±¡æèæ¹æ³ï¼ä½¿ js å¯ä»¥ç´æ¥è°ç¨ã&lt;/li&gt;
&lt;li&gt;WebView ååº js prompt/console/alert æ¹æ³ï¼å¯¹åº WebChromeClient ä¸­ç &lt;code&gt;onJsPrompt()&lt;/code&gt;/&lt;code&gt;onJsConsole()&lt;/code&gt;/&lt;code&gt;onJsAlert()&lt;/code&gt; æ¹æ³ã&lt;/li&gt;
&lt;li&gt;WebView æ¦æª URL Schemeï¼å¯¹åº WebViewClient ä¸­ç &lt;code&gt;shouldOverrideUrlLoading()&lt;/code&gt; æ¹æ³ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;native-å¦ä½è°-h5-å½æ°&#34;&gt;Native å¦ä½è° H5 å½æ°&lt;/h4&gt;
&lt;p&gt;åç WebView å¯ä»¥ç´æ¥æ§è¡ js ä»£ç &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;iOS:stringByEvaluatingJavaScriptFromString&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webview.stringByEvaluatingJavaScriptFromString(&amp;quot;alert(&#39;NativeCall&#39;)&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Android 4.4 ä»¥ä¸&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mWebView.loadUrl(&amp;quot;javascript:JSBridge.trigger(&#39;NativeCall&#39;)&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Android 4.4+&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;mWebView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;evaluateJavascript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JSBridge.trigger(&amp;#39;NativeCall&amp;#39;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ValueCallback&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onReceiveValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// js callback
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;å®ä¹æ¦æªè§å&#34;&gt;å®ä¹æ¦æªè§å&lt;/h4&gt;
&lt;p&gt;æä»¬æ ¹æ®å¬å¸ä¸å¡ä¼å¶å®ä¸å¥ URL scheme è§åï¼æ¯è¾ç±»ä¼¼å¸¸ç¨ç &lt;code&gt;https://&lt;/code&gt; æ &lt;code&gt;file:///&lt;/code&gt;ï¼ä¸è¿æä»¬èªå®ä¹ç scheme å¯ä»¥æ¯ä»»ææ ·å¼ï¼æ¯å¦ï¼&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zapp://action?param1=xxx&amp;amp;param2=xxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;è¿æ ·å®ä¹å¥½ç schemeï¼h5 éè¿åå»º iframe æ¹å¼åéè¯·æ±ã&lt;/p&gt;
&lt;h4 id=&#34;scheme-çæ¦æª&#34;&gt;Scheme çæ¦æª&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;iOS ä¸ï¼shouldStartLoadWithRequest&lt;/li&gt;
&lt;li&gt;Android: &lt;code&gt;WebViewClient.shouldOverrideUrlLoading()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;scheme-çåè°&#34;&gt;Scheme çåè°&lt;/h4&gt;
&lt;p&gt;ä¸è¬ Native æ¦æª scheme ï¼å¤çå®æåï¼è°ç¨ Bridge ç callback æ¹æ³ã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;mWebView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;evaluateJavascript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JSBridge.trigger(&amp;#39;NativeCall&amp;#39;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ValueCallback&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onReceiveValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// js callback
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;react-native-å®ç°åç&#34;&gt;React Native å®ç°åç&lt;/h2&gt;
&lt;p&gt;React Native å¹¶æ²¡æè¿è¡å¨æµè§å¨å¼æï¼WebView/V8ï¼ä¸­ãä¸åå¤§é¨ååç«¯æ¡æ¶æ¯ç®å DOM æ çå¤çï¼React Native å DOM æ²¡æå³ç³»ãReact Native éåäºå¤§é¨åç³»ç» UI ç»ä»¶ï¼å¹¶å¨æ¡æ¶åå¤çå¥½äº Javascript ååçç»ä»¶ä¹é´çè°ç¨åéä¿¡ãå¼åèå¯ä»¥éè¿ React é£æ ¼ç Javascript ä»£ç ä½¿ç¨è¿äº React Native UI ç»ä»¶æ¥æå»ºåºç¨çUIãå¯ä»¥è®¤ä¸º React Native å®ç°äºä¸ä¸ªæ¸²æå¼æï¼ä½¿ç¨ React ä½ä¸ºæ¸²æå¼æçç¼ç¨è¯­è¨ã&lt;/p&gt;
&lt;h2 id=&#34;é¡µé¢è°ç¨æ¹æ¡&#34;&gt;é¡µé¢è°ç¨æ¹æ¡&lt;/h2&gt;
&lt;p&gt;ç®åçé¡µé¢è·³è½¬ï¼ä» MainScreen è·³è½¬å° SecondaryScreen&lt;/p&gt;
&lt;p&gt;Android ä¸­çå®ç°ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;startActivity(Intent(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, SecondaryScreen.&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;iOS ä¸­çå®ç°ï¼&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-oc&#34; data-lang=&#34;oc&#34;&gt;SecondaryViewController *secondaryViewController = [[SecondaryViewController alloc] init];
[self.navigationController pushViewController:secondViewController animated:YES];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;éçé¡¹ç®éæ¸å¢å¤§ï¼æä»¬éè¦åä¸äºæ¨¡ååçå·¥ä½ãæ¨¡åååºæ¬çè¦æ±æ¯è§£é¤æ¨¡åé´çä¾èµï¼æä»¬éè¦ä¸ä¸ªé´æ¥çè°ç¨ç®æ é¡µé¢çæ¹æ¡ã&lt;/p&gt;
&lt;h3 id=&#34;openurl-æ¹æ¡&#34;&gt;openURL æ¹æ¡&lt;/h3&gt;
&lt;p&gt;å¨è¿äºé´æ¥æ¹æ¡ä¸­ï¼æå¾å¤æ¯åºäº iOS æä¾ç UIApplicationDelegate ä¸­çç¨äºååº URL è°ç¨çé©å­æ¹æ³ã&lt;/p&gt;
&lt;p&gt;å¨ iOS 8 ä¸­ï¼è¯¥æ¹æ³ä¸ºï¼&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-oc&#34; data-lang=&#34;oc&#34;&gt;application:openURL:sourceApplication:annotation:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;iOS 9 ä¸­è¯¥æ¹æ³è¢«æ è®°ä¸º Deprecatedï¼å¹¶æä¾äºä¸ä¸ªæ¿ä»£æ¹æ³ï¼&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-oc&#34; data-lang=&#34;oc&#34;&gt;application:openURL:options:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;æä»¬å°è¿ä¸¤ä¸ªæ¹æ³ç§°ä¸º &lt;code&gt;openURL&lt;/code&gt; é©å­æ¹æ³ã&lt;/p&gt;
&lt;p&gt;å¦æåºç¨æ³¨åäºä¸ä¸ª URL schemeãä»»ä½ç¬¬ä¸æ¹åºç¨ï¼ä»¥ååºç¨èªèº«å¯¹è¯¥ URL çè°ç¨ï¼é½ä¼è°èµ·ä»¥ä¸ &lt;code&gt;openURL&lt;/code&gt; é©å­æ¹æ³ãè¿å°±æä¾äºä¸ä¸ªå¨åºç¨é´éä¿¡çæ¹æ³ãåæ¶è¿ä¹æ¯ç®åä¸ºæ­¢ï¼iOS ç³»ç»ä¸­ï¼åºç¨é´éä¿¡çå¯ä¸æ¹å¼ã&lt;/p&gt;
&lt;h2 id=&#34;react-native&#34;&gt;React Native&lt;/h2&gt;
&lt;p&gt;React Native éè¦çææ¯æ æ¯è¾ç¹å«ï¼æ¯è¾éå Web ç»éªç¹å«ä¸°å¯ï¼åç«¯å·¥ç¨å¸ç¹å«ä¼ç§ï¼ä½åç¼ºä¹ä¼ç§çå®¢æ·ç«¯å·¥ç¨å¸çæåµï¼React Native æ¯ä¸ä¸ªå¿«éåå¥ç§»å¨åºç¨å¸åºçææ¯éæ©ã&lt;/p&gt;
&lt;h2 id=&#34;å¸¸è§é®é¢&#34;&gt;å¸¸è§é®é¢&lt;/h2&gt;
&lt;h3 id=&#34;åå­ç®¡ç&#34;&gt;åå­ç®¡ç&lt;/h3&gt;
&lt;p&gt;æ ¹æ® adb shell æ¥ç app å ç¨åå­ä¿¡æ¯&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# æ¥ç app åºæ¬ä¿¡æ¯&lt;/span&gt;
Zac:Sample Zac$ adb shell ps | grep com.guotai.dazhihui
u0_a674       &lt;span style=&#34;color:#ae81ff&#34;&gt;9858&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2205104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;268448&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.guotai.dazhihui
u0_a674      &lt;span style=&#34;color:#ae81ff&#34;&gt;10039&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1973628&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101852&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.guotai.dazhihui:remote
u0_a674      &lt;span style=&#34;color:#ae81ff&#34;&gt;10129&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1988412&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113528&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.guotai.dazhihui:pushservice

&lt;span style=&#34;color:#75715e&#34;&gt;# æªå¼å¯ WebView æ¶çåå­å ç¨ä¿¡æ¯&lt;/span&gt;
Zac:Sample Zac$ adb shell dumpsys meminfo com.guotai.dazhihui
Applications Memory Usage &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;in Kilobytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
...
App Summary
                       Pss&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                        ------
           Java Heap:    &lt;span style=&#34;color:#ae81ff&#34;&gt;21264&lt;/span&gt;
         Native Heap:    &lt;span style=&#34;color:#ae81ff&#34;&gt;35988&lt;/span&gt;
                Code:    &lt;span style=&#34;color:#ae81ff&#34;&gt;15648&lt;/span&gt;
               Stack:       &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;
            Graphics:    &lt;span style=&#34;color:#ae81ff&#34;&gt;72324&lt;/span&gt;
       Private Other:     &lt;span style=&#34;color:#ae81ff&#34;&gt;4528&lt;/span&gt;
              System:    &lt;span style=&#34;color:#ae81ff&#34;&gt;18578&lt;/span&gt;

               TOTAL:   &lt;span style=&#34;color:#ae81ff&#34;&gt;168382&lt;/span&gt;       TOTAL SWAP PSS:      &lt;span style=&#34;color:#ae81ff&#34;&gt;420&lt;/span&gt;
...

&lt;span style=&#34;color:#75715e&#34;&gt;# å¼å¯ WebView ä¹åçåå­å ç¨&lt;/span&gt;
...
App Summary
                       Pss&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                        ------
           Java Heap:    &lt;span style=&#34;color:#ae81ff&#34;&gt;25136&lt;/span&gt;
         Native Heap:    &lt;span style=&#34;color:#ae81ff&#34;&gt;55420&lt;/span&gt;
                Code:    &lt;span style=&#34;color:#ae81ff&#34;&gt;51480&lt;/span&gt;
               Stack:       &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;
            Graphics:    &lt;span style=&#34;color:#ae81ff&#34;&gt;74704&lt;/span&gt;
       Private Other:     &lt;span style=&#34;color:#ae81ff&#34;&gt;6244&lt;/span&gt;
              System:    &lt;span style=&#34;color:#ae81ff&#34;&gt;29544&lt;/span&gt;

               TOTAL:   &lt;span style=&#34;color:#ae81ff&#34;&gt;242580&lt;/span&gt;       TOTAL SWAP PSS:      &lt;span style=&#34;color:#ae81ff&#34;&gt;376&lt;/span&gt;

åå­
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Intro to Service</title>
      <link>https://zacash.cn/post/intro-to-service/</link>
      <pubDate>Sat, 04 Jul 2020 11:08:11 +0800</pubDate>
      
      <guid>https://zacash.cn/post/intro-to-service/</guid>
      <description>&lt;h2 id=&#34;æ¥çè¿ç¨åºæ¬ä¿¡æ¯&#34;&gt;æ¥çè¿ç¨åºæ¬ä¿¡æ¯&lt;/h2&gt;
&lt;p&gt;ä½¿ç¨ &lt;code&gt;adb shell ps|grep com.tencent.mobileqq&lt;/code&gt; å¯ä»¥æ¥ç QQ åºç¨è¿ç¨ç¸å³çåºæ¬ä¿¡æ¯&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Zac:tivi Zac$ adb shell ps | grep com.tencent.mobileqq
&lt;span style=&#34;color:#75715e&#34;&gt;# curr_user   pid                                                 process name&lt;/span&gt;
u0_a163       &lt;span style=&#34;color:#ae81ff&#34;&gt;6779&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1638852&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27152&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.tencent.mobileqq:MSF
u0_a163      &lt;span style=&#34;color:#ae81ff&#34;&gt;22001&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1915536&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;224004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.tencent.mobileqq
u0_a163      &lt;span style=&#34;color:#ae81ff&#34;&gt;27829&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;669&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1670960&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;236668&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; S com.tencent.mobileqq:qzone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;è¿ç¨çåå&#34;&gt;è¿ç¨çåå&lt;/h2&gt;
&lt;p&gt;ä¸ºäºç¡®å®å¨åå­ä¸è¶³æ¶ kill åªäºè¿ç¨ï¼Android ä¼ä¾æ®è¿ç¨ä¸­è¿è¡çç»ä»¶ï¼Activity/Service/BroadcastReceiverï¼åè¿äºç»ä»¶çç¶æï¼ååæ¯ä¸ªè¿ç¨çéè¦å±æ¬¡ç»æï¼importance hierarchyï¼ãè¿äºè¿ç¨æéè¦æ§æåº:&lt;/p&gt;
&lt;h3 id=&#34;åå°è¿ç¨foreground-process&#34;&gt;åå°è¿ç¨ï¼foreground processï¼&lt;/h3&gt;
&lt;p&gt;åå°è¿ç¨æ¯ç¨æ·å½åæ­£å¨æ§è¡çæä½æå¿é¡»çè¿ç¨ï¼åºç¨è¿ç¨åçç»ä»¶å¯è½ä»¥ä¸åå½¢å¼è®©å¶å¤äºåå°ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity å¤äºç¨æ·æ­£å¨äº¤äºç¶æï¼onResume() æ¹æ³å·²è°ç¨ï¼&lt;/li&gt;
&lt;li&gt;BroadcastReceiver æ­£å¨è¿è¡ï¼BroadcastReceiver.onReceive() æ¹æ³æ­£å¨æ§è¡ï¼&lt;/li&gt;
&lt;li&gt;Service çåè°æ­£å¨æ§è¡ä»£ç ï¼Service.onCreate(), Service.onStart(), Service.onDestroy()ï¼&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android ç³»ç»ä¸­åªæå°æ°è¿æ ·çè¿ç¨ï¼èä¸åªæå¨åå­å¤ªä½ä¸æ æ³è¿è¡è¿äºè¿ç¨æ¶ï¼æä¼ kill è¿äºè¿ç¨ã&lt;/p&gt;
&lt;h3 id=&#34;å¯è§è¿ç¨visible-process&#34;&gt;å¯è§è¿ç¨ï¼visible processï¼&lt;/h3&gt;
&lt;p&gt;å¯è§è¿ç¨æ­£å¨æ§è¡ç¨æ·æè¯å°çå·¥ä½ï¼å æ­¤ kill è¿ç§è¿ç¨å¯è½å¯¹ç¨æ·ä½éªäº§çè´é¢å½±åãè¿ç§è¿ç¨çç»ä»¶å¯ä»¥æå¦ä¸å½¢å¼ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity å¯è§ä½å¹¶ä¸å¤äºåå°ï¼onPause() æ¹æ³å·²è°ç¨ï¼ï¼å¸¸è§çä¾å­æ¯å¦å¨å½å Activity å±ç¤ºä¸ä¸ªå¼¹çªã&lt;/li&gt;
&lt;li&gt;ä½¿ç¨ &lt;em&gt;Service.startForeground()&lt;/em&gt; æ¹æ³å¯å¨çåå°æå¡ã&lt;/li&gt;
&lt;li&gt;ç¹å®åè½çæå¡ï¼å¦å¨æå£çº¸ï¼è¾å¥æ³æå¡ç­ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;æå¡è¿ç¨service-process&#34;&gt;æå¡è¿ç¨ï¼service processï¼&lt;/h3&gt;
&lt;p&gt;æå¡è¿ç¨æ¯ææç± &lt;em&gt;Service.startService()&lt;/em&gt; æ¹æ³å¯å¨ç Service è¿ç¨ãå°½ç®¡è¿äºè¿ç¨ç¨æ·å¹¶ä¸æ¯ç´æ¥å¯è§ï¼ä½å®åçéå¸¸æ¯ç¨æ·å³å¿çäºæï¼å¦åå°ä¸ä¼ /ä¸è½½ç½ç»æ°æ®ã&lt;/p&gt;
&lt;p&gt;é¿æ¶é´(&amp;gt; 30min)è¿è¡çæå¡å¯è½ä¼è¢«éçº§ï¼å³ä¸é¢ä»ç»çç¼å­åè¡¨ï¼è¿æå©äºé¿åé¿æ¶é´æå¡å ç¨è¿å¤ç³»ç»èµæºï¼å¦åå­æ³æ¼ï¼ã&lt;/p&gt;
&lt;h3 id=&#34;ç¼å­è¿ç¨cached-process&#34;&gt;ç¼å­è¿ç¨ï¼cached processï¼&lt;/h3&gt;
&lt;p&gt;ç¼å­è¿ç¨æ¯å½åä¸éè¦çè¿ç¨ï¼å½å«çå°æ¹éè¦ä½¿ç¨åå­æ¶ï¼ç³»ç»ä¼ä¼å kill æè¿ç§è¿ç¨ãå¨ä¸ä¸ªè¿è¡è¯å¥½çç³»ç»éå¸¸ä¼æå¤ä¸ªå¯ç¨çç¼å­è¿ç¨ï¼å¹¶æ ¹æ®éè¦å®æå é¤æèçè¿ç¨ã&lt;/p&gt;
&lt;p&gt;è¿äºè¿ç¨éå¸¸åå«ä¸ä¸ªæå¤ä¸ªå½åç¨æ·ä¸å¯è§ç Activity å®ä¾ï¼å·²è°ç¨ onStop() æ¹æ³ï¼ï¼åªè¦ App æ­£ç¡®çå®ç° Activity å¯¹åºççå½å¨ææ¹æ³ï¼å½ç³»ç»ç»æ­¢æ­¤ç±»è¿ç¨æ¶ï¼å®ä¸ä¼å½±åç¨æ·è¿åè¯¥ App æ¶çä½éªï¼å¨æ°è¿ç¨ä¸­éæ°åå»ºå³è Activity æ¶ï¼å®å¯ä»¥æ¢å¤ä¹åä¿å­çç¶æï¼ã&lt;/p&gt;
&lt;p&gt;è¿äºè¿ç¨ä¼è¢«è®°å½å¨ç¼å­åè¡¨ä¸­ï¼è¯¥åè¡¨çè¿ç¨ç»æ­¢ç­ç¥ä¾èµå¹³å°çå·ä½å®ç°ï¼ååä¸ä¼åä¿çéè¦è¿ç¨ãå¶ä»çç­ç¥åæ¬éå¶æå¤§è¿ç¨æ°éï¼ä»¥åéå¶è¿ç¨è¿è¡æ¶é´ç­ã&lt;/p&gt;
&lt;h2 id=&#34;ç»æ­¢è¿ç¨low-memory-killer-daemon-lmkd&#34;&gt;ç»æ­¢è¿ç¨ï¼Low Memory Killer Daemon, lmkdï¼&lt;/h2&gt;
&lt;p&gt;Android lmkd è¿ç¨çæ§æ­£å¨è¿è¡çç³»ç»åå­ç¶æï¼å¹¶éè¿ææ­»æä¸éè¦è¿ç¨ï¼least essential processesï¼æ¥åºå¯¹é«åå­ååï¼ä»¥ä½¿ç³»ç»è¿è¡å¨å¯æ¥æ¶çæ°´å¹³ã&lt;/p&gt;
&lt;h3 id=&#34;æ¥çææºçåå­éå¼&#34;&gt;æ¥çææºçåå­éå¼&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# root permission need&lt;/span&gt;
adb shell cat /sys/module/lowmemorykiller/parameters/minfree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;adj&#34;&gt;ADJ&lt;/h3&gt;
&lt;p&gt;Adj å®ä¹å¨ &lt;a href=&#34;https://android.googlesource.com/platform/frameworks/base/+/be4e6aa/services/java/com/android/server/am/ProcessList.java&#34;&gt;frameworks/&amp;hellip;/services/java/com/android/server/am/ProcessList.java&lt;/a&gt; ä¸­ï¼&lt;code&gt;oom_adj&lt;/code&gt; è¡¨ç¤ºè¿ç¨ç adj å¼ï¼ä¸è¬å¨ -17ï½16 é´åå¼ï¼adj å¼è¶å¤§ï¼ä¼åçº§è¶ä½ï¼&lt;code&gt;adj &amp;lt; 0&lt;/code&gt;çè¿ç¨é½æ¯ç³»ç»è¿ç¨ã&lt;code&gt;adj = 0&lt;/code&gt; è¡¨ç¤ºè¿ç¨å¤äºåå°ã&lt;/p&gt;
&lt;p&gt;éè¿å½ä»¤æ¥ç &lt;code&gt;pid = 4061&lt;/code&gt; è¿ç¨ç adj å¼ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# App å¤äºåå°æ¶&lt;/span&gt;
adb shell cat /proc/4061/oom_adj
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# App å¤äºåå°æ¶&lt;/span&gt;
Zac:tivi Zac$ adb shell cat /proc/4061/oom_adj
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;è¿ç¨ç»æ­¢ç­ç¥&#34;&gt;è¿ç¨ç»æ­¢ç­ç¥&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ProcessList&lt;/code&gt; ä¸­å®ä¹ç &lt;code&gt;oomAdj&lt;/code&gt;ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// These are the various interesting memory levels that we will give to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// the OOM killer.  Note that the OOM killer only supports 6 slots, so we
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// can&amp;#39;t give it a different value for every possible kind of process.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; mOomAdj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    FOREGROUND_APP_ADJ&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; VISIBLE_APP_ADJ&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; PERCEPTIBLE_APP_ADJ&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
    BACKUP_APP_ADJ&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; CACHED_APP_MIN_ADJ&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; CACHED_APP_MAX_ADJ
&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¨ç³»ç»åå­ä¸è¶³æ¶ï¼ä¾æ¬¡ä» &lt;code&gt;CACHED_APP_MAX_ADJ -&amp;gt; .. -&amp;gt;  FOREGROUND_APP_ADJ&lt;/code&gt; ç»æ­¢è¿ç¨ã&lt;/p&gt;
&lt;p&gt;çå®è¿ç¨æä»¬åççæå¡&lt;/p&gt;
&lt;h2 id=&#34;service-ççå½å¨æ&#34;&gt;Service ççå½å¨æ&lt;/h2&gt;
&lt;p&gt;Service ççå½å¨ææ¯ Activity çè¦ç®åå¾å¤ãä½å³æ³¨å¶å¦ä½åå»ºéæ¯åèæ´å éè¦ï¼å ä¸ºæå¡å¯ä»¥å¨ç¨æ·æ²¡ææè¯å°çæåµä¸å¨åå°è¿è¡ã&lt;/p&gt;
&lt;p&gt;Service ççå½å¨æå¯ä»¥éµå¾ªä¸¤æ¡ä¸åçéå¾ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;å¯å¨æå¡
è¯¥æå¡å¨å¶ä»ç»ä»¶ä¸­è°ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; æ¶åå»ºï¼ç¶åæ éè¿è¡ï¼å¿é¡»éè¿ &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#stopSelf()&#34;&gt;stopSelf()&lt;/a&gt; æ¥èªè¡åæ­¢è¿è¡ãæ­¤å¤ï¼å¶ä»ç»ä»¶ä¹å¯ä»¥éè¿è°ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#stopService(android.content.Intent)&#34;&gt;stopService()&lt;/a&gt; æ¥åæ­¢æå¡ãæå¡åæ­¢åï¼ç³»ç»ä¼å°å¶éæ¯ã&lt;/li&gt;
&lt;li&gt;ç»å®æå¡
è¯¥æå¡å¨å¦ä¸ä¸ªç»ä»¶ï¼å®¢æ·ç«¯ï¼è°ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; æ¶åå»ºãç¶åå®¢æ·ç«¯éè¿ &lt;a href=&#34;https://developer.android.com/reference/android/os/IBinder.html&#34;&gt;IBinder&lt;/a&gt; æ¥å£ä¸ Service è¿è¡è¿è¡éä¿¡ãå®¢æ·ç«¯å¯ä»¥éè¿è°ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#unbindService(android.content.ServiceConnection)&#34;&gt;unbindService()&lt;/a&gt; æ¥å³é­è¿æ¥ãå¤ä¸ªå®¢æ·ç«¯å¯ä»¥ç»å®å°ç¸åæå¡ï¼èä¸å½ææç»å®å¨é¨åæ¶åï¼ç³»ç»ä¼éæ¯è¯¥æå¡ãï¼ä¸å¿è°ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#stopService(android.content.Intent)&#34;&gt;stopService()&lt;/a&gt; æ¥åæ­¢æå¡)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;è¿ä¸¤ç§ç¶æå¹¶éå®å¨ç¬ç«ï¼å®éä¸æ¯ &lt;strong&gt;å¯ä»¥å±å­&lt;/strong&gt; çãä¾å¦å¯ä»¥ä½¿ç¨ Intent è°ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; å¯å¨åå°é³ä¹æå¡ãéåï¼å¯è½ç¨æ·éè¦å å¥æ§å¶æ­æ¾å¨è·åæå³æ­æ¾æ­æ²ä¿¡æ¯æ¶ï¼Activity å¯ä»¥éè¿è°ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; ç»å®å°è¯¥æå¡ãè¿ç§æåµä¸ï¼é¤éææå®¢æ·ç«¯é½åæ¶ç»å®ï¼å¦å &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#stopService(android.content.Intent)&#34;&gt;stopService()&lt;/a&gt; æ &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#stopSelf()&#34;&gt;stopSelf()&lt;/a&gt; ä¸ä¼åæ­¢è¯¥æå¡ã&lt;/p&gt;
&lt;h2 id=&#34;å®ç°-service-çå½å¨æåè°&#34;&gt;å®ç° Service çå½å¨æåè°&lt;/h2&gt;
&lt;p&gt;ä¸ Activity ç±»ä¼¼ï¼Service ä¹æ¥æçå½å¨æåè°æ¹æ³ï¼å¯ä»¥éè¿å®ç°è¿äºæ¹æ³æ¥çæ§Service ç¶æçååï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.app.Service&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.content.Intent&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.os.IBinder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.support.annotation.Nullable&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Created by Zac on 2017/5/23.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SampleService&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Service &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; CHANNEL_NAME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * è¡¨ç¤ºæå¡è¢« kill ä¹åçè¡ä¸º
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mStartMode&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * è¡¨ç¤ºç»å®è¯¥æå¡ç client
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; IBinder mBinder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * è¡¨ç¤ºæ¯å¦åè®¸éæ°ç»å®
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; mAllowReind&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// æå¡è¢«åå»º
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    startForeground&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * åå»ºå®ä¹çéç¥
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Notification&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getNotification&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String title&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String body&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Notification&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;appContext&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; CHANNEL_NAME&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setContentTitle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;title&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setContentText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;body&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setSmallIcon&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;smallIcon&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAutoCancel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IBinder &lt;span style=&#34;color:#a6e22e&#34;&gt;onBind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Intent intent&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// å®¢æ·ç«¯éè¿ bindService() æ¹æ³ç»å®æå¡
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mBinder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onStartCommand&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Intent intent&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; startId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ç»ä»¶è°ç¨ startService() æ¹æ³å¯å¨æå¡
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mStartMode&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onUnbind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Intent intent&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ææç»å®çå®¢æ·ç«¯é½å·²è°ç¨ unbindService() æ¹æ³è§£ç»
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mAllowReind&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onRebind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Intent intent&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// å®¢æ·ç«¯å¨onUnbind() æ¹æ³åè°ä¹åï¼è°ç¨ bindService() æ¹æ³ç»å®æå¡
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onRebind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;intent&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onDestroy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// æå¡ä¸åè¢«ä½¿ç¨å¹¶è¢«éæ¯
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDestroy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1256396-2b2f6bb1c5e9f4c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;service_lifecycle.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;æå¡ççå½å¨æï¼å·¦è¾¹æ¾ç¤ºäºä½¿ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; æåå»ºçæå¡ççå½å¨æï¼å³è¾¹æ¾ç¤ºäº &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; æåå»ºçæå¡ççå½å¨æã&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;éè¿è¿äºæ¹æ³ï¼æä»¬å¯ä»¥çæ§ Service çå½å¨æçä¸¤ä¸ªé¨åï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Service ç &lt;strong&gt;æ´ä¸ªçå½å¨æ&lt;/strong&gt; ä»è°ç¨ onCreate() å¼å§ï¼å° onDestroy() è¿åæ¶ç»æãä¸ Activity ç±»ä¼¼ï¼Service ä¹å¨ onCreate() ä¸­å®æåå§è®¾ç½®ï¼å¹¶å¨ onDestroy() ä¸­éæ¾ææå©ä½èµæºãä¾å¦ï¼é³ä¹æ­æ¾å¨å¯ä»¥å¨ onCreate() ä¸­åå»ºæ­æ¾é³ä¹ççº¿ç¨ï¼ç¶åå¨ onDestroy() ä¸­åæ­¢è¯¥çº¿ç¨ãæ è®º Service æ¯éè¿ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; è¿æ¯ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; æ¹æ³åå»ºï¼é½ä¼è°ç¨ onCreate() å onDestroy() æ¹æ³ã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service ç &lt;strong&gt;ææçå½å¨æ&lt;/strong&gt; ä»è°ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#onStartCommand(android.content.Intent,int,int)&#34;&gt;onStartCommand()&lt;/a&gt; æ &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#onBind(android.content.Intent)&#34;&gt;onBind()&lt;/a&gt; æ¹æ³å¼å§ãæ¯ç§æ¹æ³åæ Intent å¯¹è±¡ï¼è¯¥å¯¹è±¡åå«æ¥èª &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; å &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; ãå¯¹äºå¯å¨æå¡ï¼ææçå½å¨æåæ´ä¸ªçå½å¨æåæ¶ç»æãå¯¹äºç»å®æå¡ï¼ææçå½å¨æå¨ &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#onUnbind(android.content.Intent)&#34;&gt;onUnbind()&lt;/a&gt; è¿åæ¶ç»æã&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;å°½ç®¡å¯å¨æå¡æ¯éè¿ &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#stopSelf()&#34;&gt;stopSelf()&lt;/a&gt; æ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#stopService(android.content.Intent)&#34;&gt;stopService()&lt;/a&gt; æ¥åæ­¢ï¼ä½è¯¥æå¡æ²¡æç¸åºçåè°ï¼æ²¡æ onStop() åè°ï¼ãå æ­¤ï¼é¤éæ¯ç»å®æå¡ï¼å¦åå¨æå¡åæ­¢æ¶ï¼ç³»ç»ä¼å°å¶å¨ onDestroy() ä¸­éæ¯ã&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ä¸å¾è¯´æäºæå¡çå¸ååè°æ¹æ³ãå°½ç®¡è¯¥å¾åå¼ä»ç»éè¿ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; åå»ºçæå¡åéè¿ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; åå»ºçæå¡ï¼ä½æ¯ä¸ç®¡å¯å¨æ¹å¼å¦ä½ï¼ä»»ä½æå¡åæå¯è½åè®¸å®¢æ·ç«¯ä¸å¶ç»å®ãå æ­¤ï¼æåä½¿ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#onStartCommand(android.content.Intent,int,int)&#34;&gt;onStartCommand()&lt;/a&gt;ï¼å®¢æ·ç«¯è°ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService()&lt;/a&gt; ï¼å¯å¨çæå¡ä»æå¯è½æ¥æ¶ &lt;a href=&#34;https://developer.android.com/reference/android/app/Service.html#onBind(android.content.Intent)&#34;&gt;onBind()&lt;/a&gt; çè°ç¨ï¼å®¢æ·ç«¯è°ç¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,android.content.ServiceConnection,int)&#34;&gt;bindService()&lt;/a&gt; æ¶ï¼ã&lt;/p&gt;
&lt;h2 id=&#34;service-ä½¿ç¨æ¶éè¦æ³¨æçé®é¢&#34;&gt;Service ä½¿ç¨æ¶éè¦æ³¨æçé®é¢&lt;/h2&gt;
&lt;h3 id=&#34;ä½æ¶ä½¿ç¨-bounded-service-å-unbounded-server&#34;&gt;ä½æ¶ä½¿ç¨ Bounded service å Unbounded server&lt;/h3&gt;
&lt;p&gt;å®æ¹ææ¡£å¨ &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&#34;&gt;startService&lt;/a&gt; ææè¿°ï¼&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Each call to startService() results in significant work done by the system to manage service lifecycle surrounding the processing of the intent, which can take multiple milliseconds of CPU time. Due to this cost, startService() should not be used for frequent intent delivery to a service, and only for scheduling significant work. Use bound services for high frequency calls.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;å¤§ææ¯æ &lt;code&gt;startService()&lt;/code&gt; æ¹æ³å¼éæ¯è¾å¤§ï¼å æ­¤å¨é«é¢æ¬¡è°ç¨æå¡çåºæ¯ï¼æå¥½ä½¿ç¨ Bounded serviceï¼Unbounded service ä»ç¨äºå®æéè¦å·¥ä½ã&lt;/p&gt;
&lt;h3 id=&#34;android-o-ä»¥ä¸æ¥-illegalstateexception&#34;&gt;Android O ä»¥ä¸æ¥ IllegalStateException&lt;/h3&gt;
&lt;p&gt;Android O å å¼ºäºåå°æ§è¡çéå¶ï¼App å¤äºåå°æ¶ä¸åè®¸éè¿ &lt;code&gt;startService()&lt;/code&gt; çå½¢å¼å¯å¨æå¡ï¼åªè½éè¿ &lt;code&gt;startForegroundService()&lt;/code&gt; æ¹æ³å¯å¨æå¡ï¼èä¸ App å¿é¡»å¨åå»ºæå¡å5såè°ç¨è¯¥æå¡ç &lt;code&gt;startForeground()&lt;/code&gt; æ¹æ³ãå·ä½çå®ç°å¦ä¸ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.O) {
  startForegroundService(new Intent(MainActivity.&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, SampleService.&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;));
}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
  startService(new Intent(MainActivity.&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, SampleService.&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Java Basic</title>
      <link>https://zacash.cn/post/java-basic/</link>
      <pubDate>Fri, 03 Jul 2020 09:28:31 +0800</pubDate>
      
      <guid>https://zacash.cn/post/java-basic/</guid>
      <description>&lt;p&gt;ðç­æ¡çç»ç»ç­ç¥ï¼ç¥éæ¯ä»ä¹ï¼ç¥éä¸ºä»ä¹ï¼ç¥éæä¹ç¨&lt;/p&gt;
&lt;h2 id=&#34;0jdk-å-jre-æä»ä¹åºå«&#34;&gt;0.JDK å JRE æä»ä¹åºå«ï¼&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JDK åå« JREï¼åæ¶è¿åå«ç¼è¯ Java æºç çç¼è¯å¨ javacï¼è¿åå«äºå¾å¤ Java ç¨åºè°è¯ååæçå·¥å·ã&lt;/li&gt;
&lt;li&gt;å åé¡¹ï¼é¤äº javac è¿äºè§£åªäºå½ä»¤è¡å·¥å·ï¼å®ä»¬çç¨éæ¯ä»ä¹ï¼
&lt;ul&gt;
&lt;li&gt;jcmdï¼ç»¼åå·¥å·&lt;/li&gt;
&lt;li&gt;jpsï¼èææºè¿ç¨ç¶åµå·¥å·&lt;/li&gt;
&lt;li&gt;jinfoï¼èææºéç½®ä¿¡æ¯å·¥å·&lt;/li&gt;
&lt;li&gt;jstatï¼èææºç»è®¡ä¿¡æ¯çè§å·¥å·&lt;/li&gt;
&lt;li&gt;jmapï¼Java åå­æ åå·¥å·&lt;/li&gt;
&lt;li&gt;jhatï¼èææºå è½¬å¨å¿«ç§åæå·¥å·&lt;/li&gt;
&lt;li&gt;jstackï¼Java å æ è¿½è¸ªå·¥å·&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;å åé¡¹jstat ç¨è¿åï¼æåªäºåæ°ï¼
&lt;ul&gt;
&lt;li&gt;-classï¼çè§ç±»è£è½½ãå¸è½½æ°éãæ»ç©ºé´åç±»è£è½½æèè´¹çæ¶é´&lt;/li&gt;
&lt;li&gt;-gcï¼çè§ Java å çç¶åµï¼åæ¬ Eden åºï¼ä¸¤ä¸ª survior åºï¼èå¹´ä»£ãæ°¸ä¹ä»£ç­çå®¹éï¼å·²ç¨ç©ºé´ãGC æ¶é´åè®¡ç­ç»è®¡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1equals-å--çå·®å«&#34;&gt;1.equals å == çå·®å«ï¼&lt;/h2&gt;
&lt;p&gt;ä¸¤èé½æ¯å¤æ­ç­ä»·æ§ï¼åºå«è¦ä»å¥åç±»åæ¥çï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;å¯¹äºåºæ¬ç±»åï¼ä»ä»¬æ¯æ¯è¾å¼æ¯å¦ç¸ç­&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;å¯¹äºå¼ç¨ç±»åï¼ä»ä»¬æ¯å¤æ­å¼ç¨çæ¯å¦ä¸ºåä¸å¯¹è±¡&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;èå¯ç¹ï¼equals çæ¦å¿µ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ðå®éè¦æ±ï¼å¹³æ¶å¯¹æºç çæ·±ææè¯å³ææ¯é»ç å&lt;strong&gt;æ¹å¤æ§æç»´&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;èå¯ç®çï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;åºç¡ç¥è¯çæå®ç¨åº¦&lt;/li&gt;
&lt;li&gt;åéäººå¯¹ææ¯çç­æ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2java-ä¸­æä½å­ç¬¦ä¸²æé£äºç±»å®ä»¬ä¹é´æä»ä¹åºå«&#34;&gt;2.Java ä¸­æä½å­ç¬¦ä¸²æé£äºç±»ï¼å®ä»¬ä¹é´æä»ä¹åºå«ï¼&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ä¸»è¦æï¼Stringï¼StringBuilderï¼StringBuffer&lt;/li&gt;
&lt;li&gt;åºå«ï¼StringBuffer å StringBuilder é½ç»§æ¿èª AbstractStringBuilderï¼StringBuffer å·å¤çº¿ç¨å®å¨æ§
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;å åé¡¹&lt;/strong&gt;ï¼String æºç åæ
&lt;ul&gt;
&lt;li&gt;String æ¯ &lt;em&gt;final&lt;/em&gt; å³é®å­ä¿®é¥° -&amp;gt; å¯¹è±¡çå¼ä¸å¯å -&amp;gt; æ¯æ¬¡æä½é½ä¼çææ°çå¯¹è±¡&lt;/li&gt;
&lt;li&gt;StringBuffer å StringBuilder å¯¹è±¡çå¼å¯åï¼ä½æ¼æ¥å­ç¬¦ä¸²å¼éæ¯è¾å°&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;å åé¡¹&lt;/strong&gt;ï¼StringBuffer çº¿ç¨å®å¨æ§åæï¼æ¥æºç ãæ¾ synchronizedãçº¿ç¨éï¼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ä½¿ç¨åºæ¯ï¼å¹¶åå¿é StringBufferï¼è¿­ä»£å¿é StringBuilderï¼æ®éåºæ¯é Stringï¼é¿åä¸­éä¸å¿è¦çç±»åè½¬æ¢å¼é&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3hashmaphashtabletreemap-æä»ä¹åºå«&#34;&gt;3.HashMapãHashTableãTreeMap æä»ä¹åºå«ï¼&lt;/h2&gt;
&lt;p&gt;æ¯ä»ä¹ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ä¸é¢3ç§æ°æ®ç»æé½æ¯æå¸¸è§ç Map æ¥å£çå®ç°ï¼æ¯ä»¥ key-value çå½¢å¼å­å¨åæä½æ°æ®çå®¹å¨ç±»åã&lt;/li&gt;
&lt;li&gt;HashTable æ¯ Java ç±»åºæä¾çä¸ä¸ª hash å®ç°ï¼æ¬èº«æ¯åæ­¥çï¼ä¸æ¯æ null key å null valueï¼ç±äºåæ­¥æ§è½å¼éï¼æä»¥å·²ç»å¾å°æ¨èä½¿ç¨äºã&lt;/li&gt;
&lt;li&gt;HashMap æ¯åºç¨å¹¿æ³çåå¸è¡¨å®ç°ï¼è¡ä¸ºä¸å¤§è´ä¸ HashTable ä¸è´ï¼ä¸»è¦åºå«å¨äº HashMap ä¸æ¯åæ­¥çï¼æ¯æ null key å null value ç­ãéå¸¸æåµä¸ï¼HashMap è¿è¡ get å put æä½å¯ä»¥è¾¾å°&lt;strong&gt;å¸¸æ°æ¶é´çæ§è½&lt;/strong&gt;ãæä»¥å¤§é¨åå©ç¨é®å¼å¯¹å­ååºæ¯çé¦éã&lt;/li&gt;
&lt;li&gt;TreeMap åæ¯åºäºçº¢é»æ çä¸ç§æä¾é¡ºåºè®¿é®ç Mapï¼å®ç getãputãremove ä¹ç±»çæä½é½æ¯ O(logn) æ¶é´å¤æåº¦ï¼å·ä½é¡ºåºç±å¯ä»¥æå®ç Comparator æ¥å³å®ï¼åèæ ¹æ®é®çèªç¶é¡ºåºæ¥å¤æ­ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4åé¨ç±»åéæåµå¥ç±»&#34;&gt;4.åé¨ç±»åéæåµå¥ç±»&lt;/h2&gt;
&lt;h3 id=&#34;inner-class-vs-static-nested-class&#34;&gt;Inner class vs. Static nested class&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OuterClass&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StaticNestedClass&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InnerClass&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;åµå¥ç±»ï¼Nested classï¼å¯ä»¥åä¸ºä¸¤ç±»ï¼éæåééæãå£°æä¸ºéæçåµå¥ç±»ç§°ä¸ºéæåµå¥ç±»ï¼static nested classesï¼ãééæåµå¥ç±»ç§°ä¸ºåé¨ç±»ï¼inner classesï¼ã&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;åµå¥ç±»æ¯å¶å°é­ç±»ï¼enclosing classï¼çæåãåé¨ç±»å¯ä»¥è®¿é®å°é­ç±»çå¶ä»æåï¼å³ä½¿å®ä»¬è¢«å£°æä¸ºç§æçå¯ä»¥è®¿é®ãéæåµå¥ç±»æ æè®¿é®å°é­ç±»çå¶ä»æåãä½ä¸º OuterClass çæåï¼åµå¥ç±»å¯ä»¥å£°æä¸º &lt;em&gt;private&lt;/em&gt;, &lt;em&gt;public&lt;/em&gt;, &lt;em&gt;protected&lt;/em&gt; æ &lt;em&gt;package private&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;why-use-nested-classes&#34;&gt;Why Use Nested Classes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;è¿æ¯ä¸ç§å¯¹ä»å¨ä¸ä¸ªå°æ¹ä½¿ç¨çç±»è¿è¡é»è¾åç»çæ¹æ³&lt;/p&gt;
&lt;p&gt;å¦æä¸ä¸ªç±»Bä»å¯¹å¶ä»ä¸ä¸ªç±»Aæç¨ï¼é£ä¹å°Båµå¥ç±»Aå°æ´åä¹é»è¾ï¼åµå¥å°ä½¿ package æ´ç²¾ç®ã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;å¢å å°è£&lt;/p&gt;
&lt;p&gt;å¯¹äºåä¸å±çº§çç±»Aåç±»Bï¼å¦æç±»Béè¦è®¿é®ç±»Açæåï¼éå¸¸æåµéè¦å®ä¾åAåè°ç¨Açæåãéè¿å°Bå°è£å°Aåï¼Açæåå¯ä»¥å£°æä¸º &lt;em&gt;private&lt;/em&gt;ï¼åæ¶Bå¯ä»¥è°ç¨Açæåãæ­¤å¤Bå¯¹å¤çå®å¨éèã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;å¯ä»¥å¢å ä»£ç å¯è¯»æ§ï¼ä¾¿äºç»´æ¤&lt;/p&gt;
&lt;p&gt;åµå¥ç±»å¯ä»¥ä½¿å®æ´é è¿ä½¿ç¨çä½ç½®ã&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;éæåµå¥ç±»&#34;&gt;éæåµå¥ç±»&lt;/h3&gt;
&lt;p&gt;ä¸ç±»çæ¹æ³ååéä¸æ ·ï¼éæåµå¥ç±»ä¸å¤é¨ç±»ç¸å³èãä¸éææ¹æ³ä¸æ ·ï¼éæåµå¥ç±»ä¸è½ç´æ¥å¼ç¨å°é­ç±»ä¸­å®ä¹çå®ä¾åéææ¹æ³ï¼å®åªè½éè¿å¯¹è±¡çå¼ç¨æ¥ä½¿ç¨å®ä»¬ã&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;éæåµå¥ç±»åå®å¤é¨ç±»çå®ä¾æåè¿è¡äº¤äºï¼å°±åå¯¹å¶ä» top-level ç±»ä¸æ ·ãå®éä¸ï¼éæåµå¥ç±»å¨è¡ä¸ºä¸æ¯é¡¶çº§ç±»ï¼ä¸ºäºåè£æ¹ä¾¿ï¼for packaging convenienceï¼ï¼è¯¥é¡¶çº§ç±»å·²åµå¥å¨å¦ä¸ä¸ªé¡¶çº§ç±»ä¸­ã&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;åå»ºéæåµå¥ç±»éè¿ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;StaticNestedClass&lt;/span&gt; sKlass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;StaticNestedClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;åé¨ç±»&#34;&gt;åé¨ç±»&lt;/h3&gt;
&lt;p&gt;åå®ä¾æ¹æ³ååéä¸æ ·ï¼åé¨ç±»ä¸å¶æå¨ç±»çå®ä¾ç¸å³èï¼å¹¶ä¸å¯ä»¥ç´æ¥è®¿é®è¯¥å¯¹è±¡çæ¹æ³åå­æ®µãå¦å¤ï¼ç±äºåé¨ç±»ä¸å®ä¾ç¸å³èï¼å æ­¤å®æ¬èº«ä¸è½å®ä¹ä»»ä½éææåã&lt;/p&gt;
&lt;p&gt;åé¨ç±»çå®ä¾åªè½å­å¨äºå¤é¨ç±»å®ä¾ä¸­ï¼ä¸å¯ä»¥ç´æ¥è®¿é®å¶å¤é¨ç±»å®ä¾çæ¹æ³åå­æ®µã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;OuterClass outer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Instantiate inner class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;InnerClass&lt;/span&gt; inner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InnerClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Instantiate static nested class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;NestedClass&lt;/span&gt; nested &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OuterClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;NestedClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;å±é¨åé¨ç±»åå¿ååé¨ç±»&#34;&gt;å±é¨åé¨ç±»åå¿ååé¨ç±»&lt;/h4&gt;
&lt;p&gt;å±é¨åé¨ç±»å£°æå¨å«çç±»çå®ä¾æ¹æ³åï¼å¿ååé¨ç±»ä¸å±é¨åé¨ç±»ç¸ä¼¼ï¼ä½åæ³æ¯è¿åä¸æ¬¡æ§å¯¹è±¡çè¡¨è¾¾å¼ã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AnonymousClasses&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greetSomeone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String someone&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sayHello&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;// Local inner class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EnglishGreeting&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; HelloWorld &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                greetSomeone&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greetSomeone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String someone&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; someone&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        HelloWorld englishGreeting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EnglishGreeting&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Anonymous class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        HelloWorld frenchGreeting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HelloWorld&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tout le monde&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                greetSomeone&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tout le monde&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greetSomeone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String someone&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; someone&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Salut &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;åºåå&#34;&gt;åºåå&lt;/h3&gt;
&lt;p&gt;å¼ºçä¸å»ºè®®å¯¹åé¨ç±»ï¼åæ¬æ¬å°åå¿åç±»è¿è¡åºååãå½ Java ç¼è¯å¨ç¼è¯æäºæé æ¶ï¼å®å°åå»º&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/reflect/member/methodparameterreflection.html#implcit_and_synthetic&#34;&gt;åææé &lt;/a&gt;ï¼synthetic constructsï¼ãè¿äºæ¯ç±»ãæ¹æ³ãå­æ®µåå¶ä»å¨æºç ä¸­æ²¡æå¯¹åºæé æ¹æ³çæé ãåææé å¯ä»¥ä½¿ Java ç¼è¯å¨æ éæ´æ¹ JVM å³å¯å®ç°æ°ç Java è¯­è¨åè½ãä½æ¯ï¼åææé å¨ä¸åç Java ç¼è¯å¨ä¸­çå®ç°å¯è½ææä¸åï¼è¿æå³ç .class æä»¶å¨ä¸åçå®ç°ä¸­ä¹å¯è½ææä¸åãå æ­¤ï¼å¦æåºååä¸ä¸ªåé¨ç±»ï¼ç¶åä½¿ç¨å¶ä» JRE å®ç°å¯¹å¶è¿è¡ååºååï¼åå¯è½åºç°å¼å®¹æ§é®é¢ã&lt;/p&gt;
&lt;h2 id=&#34;5referenceref&#34;&gt;5.&lt;a href=&#34;https://community.oracle.com/blogs/enicholas/2006/05/04/understanding-weak-references&#34;&gt;Reference&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Package java.lang.ref æè¿°ï¼
æä¾å¼ç¨-å¯¹è±¡ç±»ï¼è¯¥ç±»æ¯æä¸&lt;em&gt;åå¾åæ¶å¨è¿è¡æéç¨åº¦çäº¤äº&lt;/em&gt;ãç¨åºå¯ä»¥ä½¿ç¨å¼ç¨å¯¹è±¡æ¥ç»´æ¤å¯¹æä¸ªå¯¹è±¡çå¼ç¨ï¼è¿æ ·åå¾åæ¶å¨å¯ä»¥æ¶éåèçå¯¹è±¡ãåå¾åæ¶å¨å¨ç¡®å®ç»å®å¯¹è±¡çå¯è¾¾æ§æ´æ¹åä¼éç¥ç¨åºã&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;å¼ç¨å¯¹è±¡å°è£äºå¯¹æä¸ªå¶ä»å¯¹è±¡çå¼ç¨ï¼å æ­¤è¯¥å¼ç¨æ¬èº«å¯ä»¥åå¶ä»ä»»ä½å¯¹è±¡ä¸æ ·è¿è¡æ£æ¥åæä½ãå¼ç¨å¯¹è±¡æä¾ä¸ç§ç±»åï¼å¼ç¨ä¾æ¬¡åå¼±ï¼soft, weak, å phantomï¼æ¯ç§ç±»åé½å¯¹åºä¸åçº§å«çå¯è¾¾æ§ãè½¯å¼ç¨ç¨äºå®ç°åå­ææåç¼å­**ï¼Android SDK ä¸å»ºè®®è¿æ ·åï¼**ï¼å¼±å¼ç¨ç¨äºå®ç°è§èåæ å°ï¼è¿äºæ å°ä¸ä¼é»æ­¢åæ¶å¶é®æå¼ãèå¼ç¨ç¨äºå®ææ¯ Java ç»æ­¢æºå¶æ´çµæ´»çäºåæ¸çè¡å¨ã&lt;/p&gt;
&lt;h3 id=&#34;strongreference&#34;&gt;StrongReference&lt;/h3&gt;
&lt;p&gt;Strong æ¯æè¿°å®ä»¬å¦ä½ä¸ garbage collector è¿è¡äº¤äºçãå¦æä¸ä¸ªå¯¹è±¡éè¿ä¸ç³»åå¼ºå¼ç¨è®¿é®ï¼å¼ºå¯è¾¾æ§ï¼ï¼é£ä¸ªè¯¥å¯¹è±¡ä¸ç¬¦ååå¾åæ¶çæ¡ä»¶ã&lt;/p&gt;
&lt;h3 id=&#34;softreference&#34;&gt;SoftReference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;å¨èææºå¼å OutOfMemoryError ä¹åï¼ç¡®ä¿æ¸é¤ææè½¯å¼ç¨çå¯¹è±¡ã&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ä¸å»ºè®®ä½¿ç¨è½¯å¼ç¨åç¼å­&lt;/strong&gt;ï¼è¿è¡æ¶å¹¶æ²¡æè¶³å¤çä¿¡æ¯ç¡®å®åªäºå¼ç¨éè¦ä¿çï¼åªäºéè¦æ¸é¤ï¼å¼ç¨å¯¹è±¡æ¸é¤å¤ªæ©é æä¸å¿è¦çå·¥ä½ï¼å¼ç¨æ¸é¤å¤ªæé ææµªè´¹åå­ã&lt;/li&gt;
&lt;li&gt;å¤§å¤æ° App éè¦ä½¿ç¨ LruCache åä»£è½¯å¼ç¨ãLruCache å·æææçéåºç­ç¥ï¼å¹¶åè®¸ç¨æ·è°æ´åéçåå­éã&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;weakreference&#34;&gt;WeakReference&lt;/h3&gt;
&lt;p&gt;å¼±å¼ç¨å¯ä»¥å©ç¨åå¾åæ¶å¨çè½åæ¥ç¡®å®å¯è¾¾æ§ï¼å æ­¤æä»¬ä¸å¿èªå·±åã&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Essential Design Pattern in Android</title>
      <link>https://zacash.cn/post/design-pattern-in-android/</link>
      <pubDate>Sat, 20 Jun 2020 20:22:10 +0800</pubDate>
      
      <guid>https://zacash.cn/post/design-pattern-in-android/</guid>
      <description>&lt;h2 id=&#34;ä»ä¹æ¯è®¾è®¡æ¨¡å¼&#34;&gt;ä»ä¹æ¯è®¾è®¡æ¨¡å¼&lt;/h2&gt;
&lt;p&gt;è®¾è®¡æ¨¡å¼ç&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_design_pattern&#34;&gt;ç»å¸è§£é&lt;/a&gt;ï¼è½¯ä»¶å·¥ç¨ä¸­ï¼è®¾è®¡æ¨¡å¼æ¯éå¯¹è½¯ä»¶è®¾è®¡ä¸­ç»å®ä¸ä¸æçå¸¸è§é®é¢ç&lt;strong&gt;éç¨ãå¯å¤ç¨çè§£å³æ¹æ¡&lt;/strong&gt;ãè®¾è®¡æ¨¡å¼å¹¶éå¯ä»¥ç´æ¥è½¬æ¢ä¸ºæºç ææºå¨ç çæç»è®¾è®¡ãç¸åï¼å®æ¯å¯ä»¥å¨ä¸ååºæ¯ä¸ä½¿ç¨çè§£å³é®é¢çæè¿°ææ¨¡çãè®¾è®¡æ¨¡å¼æ¯ç¨åºåå¨è®¾è®¡ App æç³»ç»æ¶è§£å³å¸¸è§é®é¢çæä½³å®è·µã&lt;/p&gt;
&lt;p&gt;é¢åå¯¹è±¡çè®¾è®¡æ¨¡å¼éå¸¸å±ç¤ºäºç±»åå¯¹è±¡ä¹é´çå³ç³»åäº¤äºï¼èä¸æ¯æå® App çç±»æå¯¹è±¡ã&lt;/p&gt;
&lt;p&gt;è®¾è®¡æ¨¡å¼å¯ä»¥çä½æ¯ä¸ç§ç¼ç¨çç»æåæ¹æ³ï¼ä»äºç¼ç¨èå¼åå·ä½ç®æ³ä¹é´ã&lt;/p&gt;
&lt;p&gt;è®¾è®¡æ¨¡å¼æ ¹æ®å¶è§£å³çé®é¢åä¸ºä¸ä¸ªç±»å«ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;åé åæ¨¡å¼ï¼Creational Patternsï¼ï¼æä¾åå»ºç±»ï¼å¯¹è±¡çæ¹æ³ï¼Singleton, Dependency Inject, Builderç­ï¼ã&lt;/li&gt;
&lt;li&gt;ç»æåæ¨¡å¼ï¼Structural Patternsï¼ï¼æä¾å¯¹è±¡åç±»ä¹é´ç»åçæ¹æ³ï¼Composite, Bridge, Adapter ç­ï¼ã&lt;/li&gt;
&lt;li&gt;è¡ä¸ºåæ¨¡å¼ï¼Bahavioral Patternsï¼ï¼æä¾å¯¹è±¡åç±»ä¹é´ç¸äºäº¤æµçæ¹æ³ï¼Command, Observer, Strategy ç­ï¼ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;åé åæ¨¡å¼&#34;&gt;åé åæ¨¡å¼&lt;/h2&gt;
&lt;p&gt;å½æä»¬ç¨æåºæ¬çå½¢å¼åå»ºåå»ºå¯¹è±¡å¯è½å¯¼è´è®¾è®¡é®é¢ï¼æå¢å è®¾è®¡çå¤ææ§ãåé åè®¾è®¡æ¨¡å¼éè¿&lt;strong&gt;æ§å¶å¯¹è±¡çåå»ºæ¹å¼&lt;/strong&gt;æ¥è§£å³è¿ç§é®é¢ã&lt;/p&gt;
&lt;p&gt;Android å¸¸ç¨çåé åæ¨¡å¼ï¼&lt;/p&gt;
&lt;h3 id=&#34;builder&#34;&gt;Builder&lt;/h3&gt;
&lt;p&gt;Builder æ¨¡å¼ä¸»è¦è§£å³åå»ºå¤æå¯¹è±¡è¿ç¨ä¸­éå°çé®é¢ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ç±»å¦ä½åå»ºå¤æå¯¹è±¡ä¸åçè¡¨ç°å½¢å¼(different presentations)&lt;/li&gt;
&lt;li&gt;å¦ä½ç®ååå«åå»ºå¤æå¯¹è±¡çç±»&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Builder æ¨¡å¼å¨ Android ä¸­å¸¸è§çåºç¨æ¯ AlertDialog çåå»ºè¿ç¨ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;AlertDialog.Builder(context)
 .setTitle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Builder Sample&amp;#34;&lt;/span&gt;)
 .setMessage(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Builder Nessage&amp;#34;&lt;/span&gt;)
 .setNegativeButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cancel&amp;#34;&lt;/span&gt;, {_,_ -&amp;gt; })
 .setPositiveButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK&amp;#34;&lt;/span&gt;, {_, _ -&amp;gt; })
 .show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Builder æ¨¡å¼éè¿è¿ç§æ¹å¼è§£å³é®é¢ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;å°å¤æå¯¹è±¡çåä¸ªé¨åçåå»º(creating)åç»è£(assembling)å°è£å¨ä¸ä¸ªç¬ç«ç Builder å¯¹è±¡ä¸­ã&lt;/li&gt;
&lt;li&gt;ç±»å°å¯¹è±¡çåå»ºå§æç» Builder å¯¹è±¡ï¼èä¸æ¯ç´æ¥åå»ºã&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dependency-injection&#34;&gt;Dependency injection&lt;/h3&gt;
&lt;p&gt;ä¾èµæ³¨å¥ï¼Dependency injection, ç®ç§° Diï¼éå¸¸è¡¨ç¤ºæä¸ªå¯¹è±¡æ¥æ¶(receives)å®ä¾èµçå¯¹è±¡(objects)çææ¯ï¼è¿äºä¾èµçå¯¹è±¡ç§°ä¸ºä¾èµé¡¹(dependencies)ãå¨å¸åçä½¿ç¨å³ç³»ä¸­ï¼æ¥æ¶èè¢«ç§°ä¸ºå®¢æ·ç«¯ï¼clientï¼ï¼ä¼ éçå¯¹è±¡è¢«ç§°ä¸ºæå¡ï¼serviceï¼ãå°æå¡ä¼ éç»å®¢æ·ç«¯çä»£ç å¯è½æå¾å¤ç§ï¼è¢«ç§°ä¸ºæ³¨å¥å¨ï¼injectorï¼, æ³¨å¥å¨æä¾ç»å®¢æ·ç«¯éè¦ä½¿ç¨åªäºæå¡ãæ³¨å¥(injection)æ¯æå°ä¾èµé¡¹ï¼æå¡ï¼ä¼ éç»ä½¿ç¨ä¾èµé¡¹çå¯¹è±¡ï¼å®¢æ·ç«¯ï¼ã&lt;/p&gt;
&lt;p&gt;ä¾èµæ³¨å¥çåºæ¬è¦æ±æ¯å°æå¡ä¼ éç»å®¢æ·ç«¯èä¸æ¯è®©å®¢æ·ç«¯åå»ºææ¾å°è¯¥æå¡ãå®¢æ·ç«¯ä¸éè¦äºè§£æ³¨å¥å¨ï¼æ³¨å¥å¨å®ç°æé æå¡ç¶åå°æå¡æ³¨å¥ï¼ä¼ éï¼å°å®¢æ·ç«¯ï¼å®¢æ·ç«¯ä»éè¦äºè§£å¦ä½ä½¿ç¨è¯¥æå¡ãä¾èµæ³¨å¥çæå¾æ¯å®ç°å¯¹è±¡æé åä½¿ç¨çåç¦»ï¼è¿å¯ä»¥æé«ä»£ç çå¤ç¨åå¯è¯»æ§ã&lt;/p&gt;
&lt;p&gt;ä¾èµæ³¨å¥æ¯&lt;a href=&#34;https://en.wikipedia.org/wiki/Inversion_of_control&#34;&gt;æ§å¶åè½¬&lt;/a&gt;ï¼inversion of control, ç®ç§° IoCï¼çä¸ç§ææ¯å½¢å¼ï¼å¶ä»éµå¾ªæ§å¶åè½¬ååçè¿æåè°ï¼callbacksï¼ï¼è°åº¦å¨ï¼schedulersï¼ç­ã&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top 10 Kotlin Questions in StackOverflow</title>
      <link>https://zacash.cn/post/top-10-kotlin-questions/</link>
      <pubDate>Fri, 19 Jun 2020 22:03:29 +0800</pubDate>
      
      <guid>https://zacash.cn/post/top-10-kotlin-questions/</guid>
      <description>&lt;h4 id=&#34;intarray-vs-arrayint&#34;&gt;IntArray vs. &lt;code&gt;Array&amp;lt;Int&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In java code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IntArray: int[]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array&amp;lt;Int&amp;gt;&lt;/code&gt;: Integer[]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IntArray:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; intArray : IntArray = intArrayOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Array&amp;lt;Int&amp;gt;&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; arrayOfInts : Array&amp;lt;Int&amp;gt; = arrayOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;iterable-vs-sequence&#34;&gt;Iterable vs. Sequence&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Usage&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iterable:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;getPeople()
.filter { it.age &amp;gt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; }
.map { it.name }
.take(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Sequence: start with &lt;code&gt;asSequence()&lt;/code&gt; and end with &lt;code&gt;toList()&lt;/code&gt; or &lt;code&gt;toSet()&lt;/code&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;getPeople().asSequence()
.filter { it.age &amp;gt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; }
.map { it.name }
.take(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
.toList()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iterable: use for small collections by default, might faster than the overhead using a &lt;code&gt;Sequence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sequence: use for &lt;code&gt;very large&lt;/code&gt; collections.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;iterate-a-collection&#34;&gt;Iterate a collection&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;eg.1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;.args.size - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    println(args[i])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.2, use Array&amp;rsquo;s &lt;code&gt;lastIndex&lt;/code&gt; extension property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;.args.lastIndex) {
    println(args[i])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg., use &lt;code&gt;until&lt;/code&gt; to create open ended range.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; until args.size) {
    println(args[i])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.4, use &lt;code&gt;indices&lt;/code&gt; extension property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; args.indices) {
    println(args[i])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.5&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (arg &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; args) {
    println(arg)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.6, use &lt;code&gt;forEach&lt;/code&gt; extension function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;args.forEach { arg -&amp;gt;
    println(arg)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.7, use &lt;code&gt;withIndex&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;((index, arg) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; args.withIndex()) {
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index: $index, arg: $arg&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg.8, use &lt;code&gt;forEachIndexed&lt;/code&gt; functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;args.forEachIndexed { index, arg -&amp;gt;
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index: $index, arg: $arg&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sam-conversion&#34;&gt;SAM conversion&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SAM conversions only work for interfaces, not for abstract classes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This code will work fine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;button.setListener {
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following will not work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* This gives the button a lambda that will create an anonymous instance of an OnClickListener
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* every time the button is clicked, which is then just thrown away (never assigned anywhere,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* never invoked).
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
button.setListener {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;: OnClickListener {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;(button: Button) {
            println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked!&amp;#34;&lt;/span&gt;)
        }
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* This one declares a useless local function in a very simliar fashion
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
button.setListener {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;(button: Button) {
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked!&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/48284994/lambda-implementation-of-interface-in-kotlin&#34;&gt;SAM constructor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * If the interface is defined in Java, but the function that takes an instance of its defined in Kotlin,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * try to use a SAM constructor.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
 button.setListener(OnClickListener {
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked&amp;#34;&lt;/span&gt;)
 })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Explanation
|               | Java interface  | Kotlin interface  |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|
| Java method   | SAM conversion  | Object expression |
| Kotlin method | SAM constructor | Object expression |&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;static-things&#34;&gt;Static things&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If your class has &amp;ldquo;non-static&amp;rdquo; parts as well, put the &amp;ldquo;static&amp;rdquo; parts in a companion object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;() {...}
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;() {...}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If your class is completely static, replace &lt;code&gt;class&lt;/code&gt; with a singleton &lt;code&gt;object&lt;/code&gt; :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;() {...}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;And if you don&amp;rsquo;t want to always scope your calls as &lt;code&gt;Foo.x()&lt;/code&gt; but want to just use &lt;code&gt;x()&lt;/code&gt; instead, use a top level function:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// file Foo.kt
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;() {...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;For function, there has this table:
| Function declaration             | Kotlin usage | Java usage         |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
| Companion object                 | Foo.f()      | Foo.Companion.f(); |
| Companion object with @JvmStatic | Foo.f()      | Foo.f();           |
| Object                           | Foo.f()      | Foo.INSTANCE.f();  |
| Object with @JvmStatic           | Foo.f()      | Foo.f();           |
| Top level function               | f()          | UtilKt.f();        |
| Top level function with @JvmName | f()          | Util.f();          |&lt;/li&gt;
&lt;li&gt;For variable, here&amp;rsquo;s the reference:
| Variable declaration                           | Kotlin usage | Java usage          |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|
| Companion object                               | X.x          | X.Companion.getX(); |
| Companion object with @JvmStatic               | X.x          | X.getX();           |
| Companion object with @JvmField                | X.x          | X.x;                |
| Companion object with const                    | X.x          | X.x();              |
| Object                                         | X.x          | X.INSTANCE.getX();  |
| Object with @JvmStatic                         | X.x          | X.getX();           |
| Object with @JvmField                          | X.x          | X.x;                |
| Object with const                              | X.x          | X.x;                |
| Top level variable                             | x            | ConstKt.getX();     |
| Top level variable with @JvmField              | x            | ConstKt.x;          |
| Top level variable with const                  | x            | ConstKt.x;          |
| Top level variable with @JvmName               | x            | Const.getX();       |
| Top level variable with @JvmName and @JvmField | x            | Const.x;            |
| Top level variable with @JvmName and const     | x            | Const.x;            |&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6smart-cast-on-mutable-properties&#34;&gt;6.Smart cast on mutable properties&lt;/h4&gt;
&lt;p&gt;ä»¥ä¸ä»£ç ä¼æ¥è¿ç§éï¼&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kotlin: Smart cast to &amp;lsquo;Toy&amp;rsquo; is impossible, because &amp;lsquo;toy&amp;rsquo; is a mutable property that could have been changed by this time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; toy: Toy? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (toy != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
            toy.chew()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;åå ï¼
å ä¸º mutable çåé&lt;code&gt;Dog&lt;/code&gt; å®ä¾å¯è½å¨&lt;code&gt;toy!=null&lt;/code&gt;æ£æ¥åå¨å¦ä¸æ¡çº¿ç¨ä¸è¢«ä¿®æ¹ï¼èå¨ &lt;code&gt;toy.chew()&lt;/code&gt;æ§è¡æ¶å¯è½äº§ç NPE.&lt;/p&gt;
&lt;p&gt;å¯ä»¥åä»¥ä¸ä¿®æ¹ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ä½¿ç¨å±é¨åé&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; toy: Toy? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; _toy = toy
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_toy != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
            _toy.chew()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ä¸´æ¶ let æä½ç¬¦ï¼ä½¿ç¨èå´æ´å¹¿æ³ï¼&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; toy: Toy? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;() {
        toy&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;let {
            it.chew()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;?. æä½ç¬¦&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; toy: Toy? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;() {
        toy&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;chew()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;override-java-æ¹æ³&#34;&gt;override Java æ¹æ³&lt;/h4&gt;
&lt;p&gt;åè®¾ Java ä¸­å®ä¹äºæ¥å£ &lt;code&gt;OnClickListener&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnClickListener&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Button button&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¨ Kotlin ä¸­å®ç°è¯¥æ¥å£ï¼å¦æä½¿ç¨IDEAçæï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KtListener&lt;/span&gt;: OnClickListener {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;(button: Button?): Unit {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name = button&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;?:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown button&amp;#34;&lt;/span&gt;
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked $name&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¯¹äºæä»¬ç¥éä¸å¯è½ä¸º &lt;code&gt;null&lt;/code&gt; çåºæ¯ï¼å¯ä»¥è¿æ ·åï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kt&#34; data-lang=&#34;kt&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KtListener&lt;/span&gt;: OnClickListener {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;(button: Button): Unit {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name = button.name
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clicked $name&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Intro to Build System</title>
      <link>https://zacash.cn/post/intro-to-build-system/</link>
      <pubDate>Fri, 05 Jun 2020 14:49:15 +0800</pubDate>
      
      <guid>https://zacash.cn/post/intro-to-build-system/</guid>
      <description>&lt;h3 id=&#34;æå»ºæµç¨build-process&#34;&gt;æå»ºæµç¨ï¼Build processï¼&lt;/h3&gt;
&lt;p&gt;ç®åæ¥è¯´æå»ºæµç¨å°±æ¯æ¶åä¸ç³»åå·¥å·åæ­¥éª¤å°é¡¹ç®è½¬æ¢æ Android Application Package(APK)ãå¸åçæµç¨å¦ä¸å¾æç¤ºï¼&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://developer.android.google.cn/images/tools/studio/build-process_2x.png&#34; alt=&#34;build-process&#34;&gt;&lt;/p&gt;
&lt;p&gt;å¾ä¸­æç¤ºæ4ä¸ªæ­¥éª¤ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ç¼è¯å¨å°æºç è½¬æ¢ä¸º DEX æä»¶(Dalvik å¯æ§è¡æä»¶ï¼åæ¬è¿è¡å¨ Android è®¾å¤çå­èç )ï¼å¹¶å°å¶ä»ææåå®¹è½¬æ¢æç¼è¯åçèµæºæä»¶ã&lt;/li&gt;
&lt;li&gt;APK Packager å° DEX æä»¶åç¼è¯åçèµæºæä»¶åå¹¶å°ä¸ä¸ª APK éã&lt;/li&gt;
&lt;li&gt;APK Packager ä½¿ç¨ keystore ä¸º APK ç­¾åã&lt;/li&gt;
&lt;li&gt;å¨çææç»ç APK æä»¶ä¹åï¼Packager ä¼ä½¿ç¨ &lt;a href=&#34;https://developer.android.com/studio/command-line/zipalign&#34;&gt;zipalign&lt;/a&gt; å·¥å·&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;èªå®ä¹æå»ºéç½®&#34;&gt;èªå®ä¹æå»ºéç½®&lt;/h3&gt;
&lt;p&gt;Gradle å Android æä»¶å¯ä»¥å¸®å©æä»¬ä¿®æ¹ &lt;strong&gt;build.gradle&lt;/strong&gt; ä¸­çè¿äºéç½®ï¼&lt;/p&gt;
&lt;h4 id=&#34;æå»ºç±»å-build-types&#34;&gt;æå»ºç±»å Build Types&lt;/h4&gt;
&lt;p&gt;æå»ºç±»åå®ä¹ Gradle å¨æå»º(building)åæå(packaging) App æ¶ä½¿ç¨çæäºå±æ§ï¼éå¸¸éå¯¹å¼åå¨æçä¸åé¶æ®µ(different stages of development)è¿è¡éç½®ãæ¯å¦ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;debug æå»ºç±»åæ¯æ debug éé¡¹ï¼å¹¶ä½¿ç¨ debug key ä¸º APK ç­¾åã&lt;/li&gt;
&lt;li&gt;release æå»ºç±»ååä¼åç¼©(shrink)åæ··æ·(obfuscate) APKï¼å¹¶ä½¿ç¨ release key ä¸º APK ç­¾åã&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;æå»º App æ¶å¿é¡»æå®ä¸ä¸ªæå»ºç±»åãå¯ä»¥åè &lt;a href=&#34;https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html&#34;&gt;BuildType DSL&lt;/a&gt;ï¼äºè§£éç½®æå»ºç±»åå±æ§ã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;buildTypes &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    minifyEnabled &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    shrinkResources &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
    proguardFiles &lt;span style=&#34;color:#a6e22e&#34;&gt;getDefaultProguardFile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proguard-android-optimize.txt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proguard-rules.pro&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  debug &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    applicationIdSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.debug&amp;#34;&lt;/span&gt;
    debuggable &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  staging &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    initWith debug
    manifestPlaceholders &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;hostname:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;internal.zacash.cn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    applicationIdSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.debugStaging&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;äº§åç±»å-product-flavors&#34;&gt;äº§åç±»å Product Flavors&lt;/h4&gt;
&lt;p&gt;Product flavors è¡¨ç¤ºæä»¬å¯ä»¥åç¨æ·åå¸ App ä¸åççæ¬ï¼å¦åè´¹çåä»è´¹çãæä»¬å¯ä»¥èªå®ä¹ product flavor æ¥ä½¿ç¨ä¸åçä»£ç åèµæºã&lt;/p&gt;
&lt;p&gt;Product flavors æ¯æä¸ &lt;code&gt;defaultConfig&lt;/code&gt; ç¸åçå±æ§ï¼è¿æ¯å ä¸º &lt;code&gt;defaultConfig&lt;/code&gt; å®éä¸å±äº &lt;a href=&#34;http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ProductFlavor.html&#34;&gt;ProductFlavor&lt;/a&gt; ç±»ã&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google Play ç&lt;a href=&#34;https://developer.android.com/google/play/publishing/multiple-apks&#34;&gt;å¤ APK&lt;/a&gt; åååºç¨ï¼æ¯å°åä¸ applicationId åéç»ææç flavorï¼å¹¶ä¸ºæ¯ä¸ª flavor åéä¸åç versionCodeã&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;flavorDimensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;api&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;
productFlavors &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  demo &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    dimension &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;
    applicationIdSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.demo&amp;#34;&lt;/span&gt;
    versionNameSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-demo&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  full &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    dimension &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;
    applicationIdSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.full&amp;#34;&lt;/span&gt;
    versionNameSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-full&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  minApi21 &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    dimension &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;api&amp;#34;&lt;/span&gt;
    minSdkVersion &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;
    versionCode &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultConfig&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;versionCode&lt;/span&gt;
    versionNameSuffix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-minApi21&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;æå»ºåä½-build-variants&#34;&gt;æå»ºåä½ Build Variants&lt;/h4&gt;
&lt;p&gt;Build variants æ¯ç± build type å product flavor ç»æï¼ä¹æ¯ Gradle ç¨æ¥æå»ºåºç¨çéç½®ãéç½® Build variants å°±æ¯æéç½®ç»æå®ç build type å product flavorã&lt;/p&gt;
&lt;p&gt;Gradle åå»ºç build varuants æ°éç­äº productFlavors * buildTypes. Gradle æå»º APK å½åæ¶ï¼ä¼åä»¥é«ä¼åçº§ç flavorDimension ç ProductFlavor æ¾ç¤ºï¼èåæ¯ä½ä¼åçº§ flavorDimension ç ProductFlavorï¼æåæ¯ BuildTypeãæ¯å¦ä¸é¢ç ProductFlavor å BuildType éç½®ï¼å¨æå»º APK æ¶å¯¹åºç Build Variantsï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build Variants: [minApi21][Demo, Full][Debug, Release]&lt;/li&gt;
&lt;li&gt;APK åç§°ï¼app-[minApi21]-[demo, full]-[debug, release].apk&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;æ¸åæ¡ç®-manifest-entries&#34;&gt;æ¸åæ¡ç® Manifest entries&lt;/h4&gt;
&lt;p&gt;æä»¬å¯ä»¥å¨ build variants ä¸­è®¾ç½®æ¸åæä»¶(AndroidManifest.xml)ä¸­çæäºå±æ§ï¼è¿äºæå»ºå¼ä¼æ¿æ¢æ¸åæä»¶ä¸­çç°æå¼ãå¦ææä»¬è¦ä¸ºæ¨¡åçæå¤ä¸ª APKï¼è¿äº APK æä¸åçåºç¨åç§°ãmin SDK version æ target SDK versionï¼å®ä¹è¿äºå±æ§å°ä¼å¾ææã&lt;/p&gt;
&lt;h4 id=&#34;ä¾èµé¡¹-dependencies&#34;&gt;ä¾èµé¡¹ Dependencies&lt;/h4&gt;
&lt;p&gt;æå»ºç³»ç»ä¼ç®¡çæ¥èªæ¬å°æä»¶ç³»ç»ä»¥åæ¥èªè¿ç¨ä»£ç åºçé¡¹ç®ä¾èµé¡¹ã&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fragment in ViewPager</title>
      <link>https://zacash.cn/post/fragment-in-viewpager/</link>
      <pubDate>Mon, 25 May 2020 20:55:31 +0800</pubDate>
      
      <guid>https://zacash.cn/post/fragment-in-viewpager/</guid>
      <description>&lt;h3 id=&#34;ä½¿ç¨-viewpager&#34;&gt;ä½¿ç¨ ViewPager&lt;/h3&gt;
&lt;p&gt;éå¸¸æä»¬ä½¿ç¨ ViewPager + TabLayout ä¸»è¦æè¿äºæ­¥éª¤ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;é¡µé¢çå¸å±ç»æ:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;androidx.coordinatorlayout.widget.CoordinatorLayout&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:context=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.MainActivity&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;com.google.android.material.appbar.AppBarLayout&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:theme=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@style/AppTheme.AppBarOverlay&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

    ...

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;com.google.android.material.tabs.TabLayout&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/tabs&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:background=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?attr/colorPrimary&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;androidx.viewpager.widget.ViewPager&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/view_pager&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_behavior=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@string/appbar_scrolling_view_behavior&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/com.google.android.material.appbar.AppBarLayout&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;å¨ PagerAdapter ä¸­ä¼æå®æä»¬ä½¿ç¨ç Fragment:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SectionsPagerAdapter&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; context: Context,
  fm: FragmentManager
) : FragmentPagerAdapter(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {

  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getItem&lt;/span&gt;(position: Int): Fragment {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; SampleFragment.newInstance(position)
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;(): Int {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; TAB_TITLES.size
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ç» ViewPager è®¾ç½® PagerAdapter:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;viewPager.adapter = pagerAdapter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;TabLayout ç»å® ViewPager:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;tabs.setupWithViewPager(viewPager)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pageradapter&#34;&gt;PagerAdapter&lt;/h3&gt;
&lt;p&gt;ç®åå®æ¹æä¾ç PagerAdapter æ 2 ç§ï¼å¨æºç ä¸­å·²ä»ç»åèªçä½¿ç¨åºæ¯(åè®¾ offscreenPageLimit=1)ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FragmentPagerAdapter&lt;/p&gt;
&lt;p&gt;éåæå°éçå ä¸ª Fragment é¡µé¢ï¼æ¯å¦ä¸ç» tabsï¼ç¨æ·è®¿é®çæ¯ä¸ªé¡µé¢é½ä¼ä¿å­å¨åå­ä¸­ï¼åå­å ç¨å¯è½æ¯è¾å¤§ã&lt;/p&gt;
&lt;p&gt;å¯¹äºæ»¡è¶³ &lt;code&gt;offscreenPageLimit&lt;/code&gt; ç Fragment ï¼å¶åè°çæ¹æ³æ¯ï¼onStop -&amp;gt; onDestroyView.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FragmentStatePagerAdapter&lt;/p&gt;
&lt;p&gt;éåæå¤§é Fragment é¡µé¢ï¼ç±»ä¼¼äº ListView å·¥ä½çåºæ¯ï¼é¡µé¢ä¸å¯è§æ¶ï¼æ´ä¸ª Fragment é½ä¼è¢«éæ¯ï¼åªæ SavedState ä¼è¢«ä¿å­ãç¸è¾ FragmentPagerAdapter åå­å ç¨æ´å°ã&lt;/p&gt;
&lt;p&gt;å¯¹äºæ»¡è¶³ &lt;code&gt;offscreenPageLimit&lt;/code&gt; ç Fragment ï¼å¶åè°çæ¹æ³æ¯ï¼onStop -&amp;gt; onDestroyView -&amp;gt; onDestroy -&amp;gt; onDetach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ä¿å­åæ¢å¤-state&#34;&gt;ä¿å­åæ¢å¤ State&lt;/h3&gt;
&lt;h4 id=&#34;ä¿å­-fragment-ç-state&#34;&gt;ä¿å­ Fragment ç State&lt;/h4&gt;
&lt;p&gt;å¯¹äºä½¿ç¨ &lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt; çåºæ¯ï¼æä»¬å¯è½éè¦å¨ Fragment éæ¯æ¶ä¿å­ä¸äºæ°æ®ï¼éå¸¸çåæ³æ¯å¨ &lt;code&gt;onSaveInstanceState(outState)&lt;/code&gt; ä¸­ä¿å­ï¼å¨ &lt;code&gt;onCreate(savedInstanceState)&lt;/code&gt;ã&lt;code&gt;onCreateView(savedInstanceState)&lt;/code&gt; æ &lt;code&gt;onActivityCreated(savedInstanceState)&lt;/code&gt; ä¸­æ¢å¤ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onSaveInstanceState&lt;/span&gt;(outState: Bundle) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onSaveInstanceState(outState)
    &lt;span style=&#34;color:#75715e&#34;&gt;// save instance state here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }

&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
    savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;let {
      &lt;span style=&#34;color:#75715e&#34;&gt;// restore instance state
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ä¿å­-customview-ç-state&#34;&gt;ä¿å­ CustomView ç State&lt;/h4&gt;
&lt;p&gt;å®æ¹æä¾ç UI æ§ä»¶åé¨é½å®ç°äº &lt;code&gt;onSaveInstanceState&lt;/code&gt; å &lt;code&gt;onRestoreInstanceState&lt;/code&gt; æ¹æ³ï¼å¨é¡µé¢éæ¯-éå»ºæ¶ï¼è¿äºæ§ä»¶å¯ä»¥ä¿å­-æ¢å¤ ViewStateãå¯¹äºèªå®ä¹ç Viewï¼æä»¬ä¹éè¦å®ç°è¿ä¸¤ä¸ªæ¹æ³ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Parcelable &lt;span style=&#34;color:#a6e22e&#34;&gt;onSaveInstanceState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Parcelable superState &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onSaveInstanceState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    SavedState ss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SavedState&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;superState&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ss&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Parcelable state&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!(&lt;/span&gt;state &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; SavedState&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    SavedState ss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SavedState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSuperState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Git Basic</title>
      <link>https://zacash.cn/post/git-basic/</link>
      <pubDate>Fri, 15 May 2020 15:55:52 +0800</pubDate>
      
      <guid>https://zacash.cn/post/git-basic/</guid>
      <description>&lt;h3 id=&#34;problem-solving&#34;&gt;Problem Solving&lt;/h3&gt;
&lt;h4 id=&#34;authentication&#34;&gt;Authentication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Clear saved account &amp;amp; password&lt;/p&gt;
&lt;p&gt;Error: &lt;code&gt;fatal:Authentication failed for &#39;remote-url&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --system --unset credential.helper&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save account &amp;amp; password&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global credential.helper store&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;remote&#34;&gt;Remote&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check remote url&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update remote url&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote set-url origin newRepoUrl&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Intro to Fragments</title>
      <link>https://zacash.cn/post/fragments/</link>
      <pubDate>Thu, 07 May 2020 20:30:50 +0800</pubDate>
      
      <guid>https://zacash.cn/post/fragments/</guid>
      <description>&lt;h3 id=&#34;activity-å-fragment-çå½å¨æçå³è&#34;&gt;Activity å Fragment çå½å¨æçå³è&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Activity ç¶æ&lt;/th&gt;
&lt;th&gt;Fragment çå½å¨ææ¹æ³åè°&lt;/th&gt;
&lt;th&gt;Fragment ç¶æ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Created&lt;/td&gt;
&lt;td&gt;onAttach(), onCreate(), onCreateView(), onActivityCreated()&lt;/td&gt;
&lt;td&gt;Fragment æ·»å å° Activity ä¸è§å¾å·²åå§å&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Started&lt;/td&gt;
&lt;td&gt;onStart()&lt;/td&gt;
&lt;td&gt;Fragment æ´»è·å¹¶å¯è§&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resumed&lt;/td&gt;
&lt;td&gt;onResume()&lt;/td&gt;
&lt;td&gt;Fragment æ´»è·å¹¶è·åç¦ç¹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Paused&lt;/td&gt;
&lt;td&gt;onPause()&lt;/td&gt;
&lt;td&gt;Fragment æå&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stopped&lt;/td&gt;
&lt;td&gt;onStop()&lt;/td&gt;
&lt;td&gt;Fragment åæ­¢å¹¶ä¸åå¯è§&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Destroyed&lt;/td&gt;
&lt;td&gt;onDestroyView(), onDestroy(), onDetach()&lt;/td&gt;
&lt;td&gt;Fragment éæ¯&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;fragment-éè¦ççå½å¨ææ¹æ³çä½¿ç¨&#34;&gt;Fragment éè¦ççå½å¨ææ¹æ³çä½¿ç¨&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onAttach()&lt;/code&gt;: Fragment å¨è¢« attach å°å®¿ä¸» Activity æ¶åè°ï¼å¯ä»¥å¨è¯¥æ¹æ³éæ£æ¥å®¿ä¸» Activity æ¯å¦å®ç°äºæä¸ªæ¥å£ã&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onCreateView()&lt;/code&gt;: Fragment ç XML å¸å±å¨è¿ä¸ªåè°æ¹æ³éåå§åï¼ç³»ç»è°ç¨è¿ä¸ªæ¹æ³æ¥ç»å¶ Fragment ç UIã&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onPause()&lt;/code&gt;: å¯ä»¥å¨ Fragment éæ¯åå¨è¯¥åè°æ¹æ³ä¿å­å¿è¦æ°æ®æç¶æã&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onActivityCreated()&lt;/code&gt;: å¨å®¿ä¸» Activity ç &lt;code&gt;onCreate()&lt;/code&gt; æ¹æ³è°ç¨ååè°è¯¥æ¹æ³ãå¯ä»¥å¨è¯¥æ¹æ³åæç»çåå§åï¼å¦æ£ç´¢ View &lt;code&gt;getView().findViewById(id)&lt;/code&gt;ææ¢å¤ç¶æ(restore state)ãå¦æ Fragmnt è®¾ç½®äº &lt;code&gt;setRetainInstance()&lt;/code&gt;ï¼è¿ä¸ªæ¹æ³åæ ·ä¼è¢«è°ç¨ã&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDestroyView()&lt;/code&gt;: Fragment ç UI å¸å±è¢«ç§»é¤æ¶è°ç¨ï¼å¯ä»¥å¨è¯¥æ¹æ³æ è®° Fragment ä¸åå¯è§ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fragment-å-activity-é´çè¿æ¥&#34;&gt;Fragment å Activity é´çè¿æ¥&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fragment è·åå®¿ä¸» Activityï¼å¨ Fragment attach å°å®¿ä¸» Activity åï¼å¯ä»¥éè¿ &lt;code&gt;getActivity()&lt;/code&gt; è·å¾å®¿ä¸» Activity å®ä¾ã&lt;/li&gt;
&lt;li&gt;Activity è·åæ·»å ç Fragmentï¼å¯ä»¥éè¿ &lt;code&gt;FragmentManager.findFragmentById(containerId)&lt;/code&gt;è·å Fragment çå®ä¾ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fragment-ç-backstack&#34;&gt;Fragment ç BackStack&lt;/h4&gt;
&lt;p&gt;å¯¹äº Activityï¼ç³»ç»ç®¡çç Activity çåéæ ï¼èå¯¹äº Fragmentï¼æ¯å®¿ä¸» Activity ç®¡ççåéæ ï¼å¯¹äºéè¦ååºè¿åé®ç Fragment é¡µé¢ï¼æä»¬éè¦è°ç¨ &lt;code&gt;addToBackStack(name)&lt;/code&gt; æ¾å¼å°å°å¶æ·»å å°åéæ :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;fragmentTransaction.add(R.id.fragment_container, fragment)
fragmentTransaction.addToBackStack(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
fragmentTransaction.commit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ä¸é¢çä»£ç ä¸­æä»¬ç» &lt;code&gt;addToBackStack()&lt;/code&gt; ä¼ å¥ç &lt;code&gt;null&lt;/code&gt; ï¼å¦ææ¯éè¦è°ç¨ &lt;code&gt;FragmentManager.BackStackEntry&lt;/code&gt; æ¥å£æ¶ï¼åå¿é¡»ä¼ å¥å·ä½çåç§°æ è®°ã
å¯¹äºæ·»å å° Activity åéæ ç Fragmentï¼å½æä¸è¿åé®ï¼æä¸ª Fragment å®ä¾åºæ æ¶ï¼å¶è§å¾éå»ºåè° &lt;code&gt;onCreateView()&lt;/code&gt; æ¹æ³ã&lt;/p&gt;
&lt;h4 id=&#34;activity-å-fragment-ä¼ éæ°æ®&#34;&gt;Activity å Fragment ä¼ éæ°æ®&lt;/h4&gt;
&lt;p&gt;éå¸¸ä» Activity å Fragment ä¼ éæ°æ®ï¼æ¨èä½¿ç¨ Fragment ç &lt;code&gt;setArguments(Bundle)&lt;/code&gt; æ¹æ³ï¼å·ä½çæµç¨æ¯ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newInstance&lt;/span&gt;(name: String) : SimpleFragment {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; fragment = SimpleFragment()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; args = Bundle(ARGS_NAME, name)
        fragment.arguments = argument
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fragment
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¨ Activity åå§åè¯¥ Fragment ä¼ å¥ &lt;code&gt;name&lt;/code&gt; åæ°:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SimpleApp&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; ft = supportFragmentManager.beginTransaction()
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; fragment = SimpleFragment.newInstance(name)
ft.add(R.id.fragment_container, fragment).commit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¨ Fragment ç &lt;code&gt;onCreate()&lt;/code&gt; æ &lt;code&gt;onCreateView()&lt;/code&gt; çåè°åï¼è·åè¯¥åæ°ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arguments.containsKey(ARGS_NAME)) {
    mName = arguments.getString(ARGS_NAME);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;fragment-å-activity-ä¼ éæ°æ®&#34;&gt;Fragment å Activity ä¼ éæ°æ®&lt;/h4&gt;
&lt;p&gt;å¯¹äº Activity åå®ç° Fragment åå®ä¹çæ¥å£ï¼å¨ &lt;code&gt;Fragment.onAttach()&lt;/code&gt;æ¹æ³è·åå®¿ä¸» Activity:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnPanelClickListener&lt;/span&gt; {
    void onClick()
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onAttach&lt;/span&gt;(context: Context) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onAttach(context)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (context &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; OnPanelClickListener) {
        mListener = context &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; OnPanelClickListener
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Coroutines Introduction</title>
      <link>https://zacash.cn/post/coroutines-introduction/</link>
      <pubDate>Sat, 25 Apr 2020 11:40:03 +0800</pubDate>
      
      <guid>https://zacash.cn/post/coroutines-introduction/</guid>
      <description>&lt;h3 id=&#34;åç¨ç¨æ¥è§£å³ä»ä¹é®é¢&#34;&gt;åç¨ç¨æ¥è§£å³ä»ä¹é®é¢&lt;/h3&gt;
&lt;p&gt;Kotlin çåç¨æä¾äºä¸ç§å¨æ°çå¹¶åå¤çæ¹å¼ï¼æä»¬å¯ä»¥ä½¿ç¨å®æ¥ç®åå®åå¼æ­¥æ§è¡çä»£ç ã&lt;/p&gt;
&lt;p&gt;å¨ Android å¹³å°ä¸åç¨ä¸»è¦ç¨æ¥è§£å³ä¸¤ä¸ªé®é¢ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;å¤çèæ¶ä»»å¡(Long running tasks)&lt;/li&gt;
&lt;li&gt;ä¿è¯ä¸»çº¿ç¨å®å¨(Main-safety)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;å¤çèæ¶ä»»å¡&#34;&gt;å¤çèæ¶ä»»å¡&lt;/h4&gt;
&lt;p&gt;æä»¬å¸¸è§å¤çèæ¶ä»»å¡æ¯éè¿å¼æ­¥åè°çæ¹å¼ï¼æ¯å¦ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchDoc&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://doc.qq.com&amp;#34;&lt;/span&gt;) { result -&amp;gt;
        show(result)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;éè¿åç¨çæ¹å¼æ¯è¿æ ·ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ä¸»çº¿ç¨æ§è¡
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchDoc&lt;/span&gt;() {
    &lt;span style=&#34;color:#75715e&#34;&gt;// ç´æ¥è¿åç»æ
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; result = &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://doc.qq.com&amp;#34;&lt;/span&gt;)
    show(result)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// ä¸»çº¿ç¨æ§è¡
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(url: String) = withContext(Dispatchers.IO) {
    &lt;span style=&#34;color:#75715e&#34;&gt;/*IO çº¿ç¨æ± æ§è¡*/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¯ä»¥çå°éè¿åç¨å¯ä»¥ç´æ¥è¿åè¯·æ±ç»æï¼èä¸ç¨ç®¡çè¯·æ±å»¶è¿åçº¿ç¨é»å¡ï¼è¿æ¯å¦ä½å®ç°çå¢ï¼&lt;/p&gt;
&lt;p&gt;åç¨å¨å¸¸è§çå½æ°æä½ ââ invoke å return ä¹å¤ï¼è¿æ°å¢äº2é¡¹ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;suspend ââ ç§°ä¸ºæèµ·ææåï¼ç¨äºæåæ§è¡å½ååç¨ï¼å¹¶ä¿å­ææå±é¨åé&lt;/li&gt;
&lt;li&gt;resume ââ è®©æåçåç¨ç»§ç»­æ§è¡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;é£ä¹ suspend æ¯å¦ä½å®ç°çå¢ï¼&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kotlin ä½¿ç¨å æ å¸§æ¥ç®¡çéè¦è¿è¡åªä¸ªå½æ°åææå±é¨åéãsuspend åç¨æ¶ï¼ç³»ç»ä¼å¤å¶å¹¶ä¿å­å½åçæ å¸§ä¾åç»­ä½¿ç¨ï¼resume åç¨æ¶ï¼ç³»ç»ä¼è¿åä¿å­çæ å¸§ï¼ç¶åå½æ°ä»æåçä½ç½®ç»§ç»­æ§è¡ã&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;å¨ä¸é¢çåç¨ç¤ºä¾ä¸­ï¼&lt;code&gt;get()&lt;/code&gt;å½æ°å¨ä¸»çº¿ç¨ä¸è¿è¡ï¼ä½ä¼å¨ç½ç»è¯·æ±åæååç¨ï¼è¯·æ±å®ææ¶ï¼&lt;code&gt;get()&lt;/code&gt;å½æ°æ¢å¤åç¨ã&lt;/p&gt;
&lt;h4 id=&#34;ä¿è¯çº¿ç¨å®å¨&#34;&gt;ä¿è¯çº¿ç¨å®å¨&lt;/h4&gt;
&lt;p&gt;Kotlin æä¾äºä¸ç§è°åº¦å¨(Dispatcher)ä¾åç¨æ§è¡ä»»å¡ãåç¨å¯ä»¥èªè¡æåï¼è°åº¦å¨(Dispatcher)è´è´£æ¢å¤ã&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Dispatcher&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;çº¿ç¨&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;ä»»å¡è®¾è®¡&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;ç¨é&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Dispatcher.Main&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ä¸»çº¿ç¨&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;UI äº¤äºåè½»éçº§ä»»å¡&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;è°ç¨ suspend å½æ°ãè°ç¨ UI å½æ°ã æ´æ° LiveData&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dispatcher.IO&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;éä¸»çº¿ç¨&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ç£çåç½ç» IO ä»»å¡&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;æ°æ®åºãæä»¶ãç½ç»å¤ç&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dispatcher.Default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;éä¸»çº¿ç¨&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CPU å¯éåä»»å¡&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;æ°ç»æåºãJSON è§£æãå¤ç Diff å¤æ­&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ä¸é¢çç¤ºä¾ä¸­ï¼&lt;code&gt;get()&lt;/code&gt;å½æ° éè¿ &lt;code&gt;withContext(Dispatcher.IO)&lt;/code&gt; åå»ºä¸ä¸ªå¨ IO çº¿ç¨æ± åè¿è¡çä»£ç åã&lt;/p&gt;
&lt;p&gt;å¦ææä¸ªå½æ°ä»»å¡æ¶åå°ç£çãç½ç»æèå ç¨è¿å¤ç CPU èµæºï¼é½åºè¯¥ä½¿ç¨ &lt;code&gt;withContext(Dispatcher)&lt;/code&gt; æ¥ç¡®ä¿å¯ä»¥å¨ä¸»çº¿ç¨å®å¨å°è°ç¨ã&lt;/p&gt;
&lt;h3 id=&#34;è¿½è¸ªåç¨&#34;&gt;è¿½è¸ªåç¨&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;åç¨èªèº«å¹¶ä¸è½è¿½è¸ªæ­£å¨å¤ççä»»å¡ï¼ä½¿ç¨ä»£ç æ¥æå¨è¿½è¸ªä¸åä¸ªåç¨æ¯ååå°é¾çï¼æä»¬è½ç¶å¯ä»¥å°è¯å¯¹ææåç¨è¿è¡è¿½è¸ªï¼æå¨ç¡®ä¿å®ä»¬é½å®ææåæ¶ä»»å¡ï¼ä½è¿æ ·ä»£ç ä¼ååå¤æåèè¿ãå¦ææ²¡æè¿½è¸ªåç¨ï¼åå¯è½è¯±åä»»å¡æ³æ¼(work leak)ï¼å³èæ¶ä»»å¡ä¼æç»­å°å ç¨èµæºæ§è¡ä¸å»ã&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ä¸ºäºè½å¤é¿åè¿ç§æåµï¼Kotlin å¼å¥äº &lt;strong&gt;ç»æåå¹¶å(structured concurrency)&lt;/strong&gt; æºå¶ï¼éµå¾ªå®å¯ä»¥å¸®å©æä»¬è¿½è¸ªææè¿è¡çä»»å¡ãæä»¬å¯ä»¥ä½¿ç¨ç»æåå¹¶ååå°ä¸é¢ä¸ä»¶äºï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;åæ¶ä»»å¡ ââ åæ¶æé¡¹æ ç¨çä»»å¡&lt;/li&gt;
&lt;li&gt;è¿½è¸ªä»»å¡ ââ è¿½è¸ªæé¡¹æ­£å¨æ§è¡çä»»å¡&lt;/li&gt;
&lt;li&gt;ååºéè¯¯ä¿¡å· ââ ä»»å¡å¼å¸¸æ¶ååºéè¯¯ä¿¡å·&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ä½¿ç¨-scope-æ¥è¿½è¸ªåç¨&#34;&gt;ä½¿ç¨ Scope æ¥è¿½è¸ªåç¨&lt;/h4&gt;
&lt;p&gt;Kotlin ä¸­å®ä¹å¯å¨åç¨å¿é¡»æå®å¶ CoroutineScope, CoroutineScope å¯ä»¥è¿½è¸ªæåæ¶ææç±å®å¯å¨çåç¨ã&lt;/p&gt;
&lt;p&gt;æä¸¤ç§æ¹å¼è½å¤å¯å¨åç¨ï¼åå«ç¨äºä¸åçåºæ¯ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;launch&lt;/code&gt; æ¹å¼å¯å¨æ°åç¨ä¸ä¼è¿å resultï¼éåä¸éè¦æ§è¡ç»æçåºæ¯&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async&lt;/code&gt; æ¹å¼å¯å¨æ°åç¨å¹¶åè®¸æä»¬ä½¿ç¨ await çæèµ·å½æ°è¿å result.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;éå¸¸æä»¬åºè¯¥ä½¿ç¨ &lt;code&gt;launch&lt;/code&gt; æ¹å¼å¯å¨æ°åç¨ã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;scope.launch {
    &lt;span style=&#34;color:#75715e&#34;&gt;// launch å¯ä»¥è°ç¨ suspend å½æ°
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    fetchDoc()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;å¨-viewmodel-ä¸­å¯å¨åç¨&#34;&gt;å¨ ViewModel ä¸­å¯å¨åç¨&lt;/h4&gt;
&lt;p&gt;å½åç¨å Android Architecture Components ç»åæ¶ï¼æä»¬åºè¯¥å¨åªä¸ªç»ä»¶ä½¿ç¨åç¨å¢ï¼&lt;/p&gt;
&lt;p&gt;ç­æ¡æ¯ ViewModelï¼æä»¬å¤§é¨åä»»å¡é½æ¯å¨ ViewModel ä¸­å¤çï¼èä¸ &lt;a href=&#34;https://developer.android.google.cn/topic/libraries/architecture/coroutines#lifecycle-aware&#34;&gt;AndroidX Lifecycle&lt;/a&gt; ä» 2.1.0 çæ¬å¼å§å·²ç»å¼å¥æ©å±å±æ§ &lt;code&gt;ViewModel.viewModelScope&lt;/code&gt;ï¼å¯ä»¥æ´æ¹ä¾¿å°å¨ ViewModel ä¸­ä½¿ç¨åç¨ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainViewModel&lt;/span&gt;(): ViewModel() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUserDoc&lt;/span&gt;() {
        &lt;span style=&#34;color:#75715e&#34;&gt;// å¯å¨æ°çåç¨
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        viewModelScope.launch {
            fetchDoc()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å½ viewModelScope è¢«æ¸é¤æ¶ï¼å®å°èªå¨åæ¶ææå®å¯å¨çåç¨ï¼å¯ä»¥ä¿è¯åç¨å ViewModel ççå½å¨ææ¯ä¸è´çã&lt;/p&gt;
&lt;h4 id=&#34;å¯å¨å¤ä¸ªåç¨&#34;&gt;å¯å¨å¤ä¸ªåç¨&lt;/h4&gt;
&lt;p&gt;å¯ä»¥ä½¿ç¨ &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&#34;&gt;&lt;code&gt;coroutineScope&lt;/code&gt;&lt;/a&gt; æ &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/supervisor-scope.html&#34;&gt;&lt;code&gt;supervisorScope&lt;/code&gt;&lt;/a&gt; å¯å¨å¤ä¸ªåç¨ï¼ç»æåå¹¶åä¿è¯äºå½ &lt;code&gt;suspend&lt;/code&gt; å½æ°è¿åæ¶ï¼å®æå¤ççä»»å¡ä¹é½å®æäºã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchDocs&lt;/span&gt;() {
    coroutineScope {
        async {fetchDoc()}
        async {fetchPdf()}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin ç¡®ä¿ä½¿ç¨ &lt;code&gt;coroutineScope&lt;/code&gt; æé æ¹æ³ä¸è®© &lt;code&gt;fetchDocs()&lt;/code&gt; æ¹æ³åçæ³æ¼ï¼ä¼åå° &lt;code&gt;coroutineScope&lt;/code&gt; èªèº«æèµ·ï¼ç­å¾å®åé¨çææåç¨å®ææ¶ï¼åè¿åç»æã&lt;/p&gt;
&lt;h4 id=&#34;å¼å¸¸å¤ç&#34;&gt;å¼å¸¸å¤ç&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;coroutineScope&lt;/code&gt; å &lt;code&gt;supervisorScope&lt;/code&gt; ä¸¤èé½éåå¯å¨å¤ä¸ªåç¨çåºæ¯ï¼åºå«å¨äºå½å¯å¨çæä¸å­åç¨åºéæ¶ï¼coroutineScope å°ä¼åæ¶ææåç¨ï¼è supervisorScope ä¼ç»§ç»­æ§è¡å©ä½çåç¨ã&lt;/p&gt;
&lt;p&gt;åç¨ä¸­æ¥èª suspend å½æ°çå¼å¸¸ä¼éè¿ resume éæ°æç»è°ç¨æ¹ (Invoker) æ¥å¤çï¼è·å½æ°ä¸æ ·ï¼æä»¬å¯ä»¥ç¨ try/catch å¤çå¼å¸¸ã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getError&lt;/span&gt;() {
    coroutineScope {
        async {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IllegalStateException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;åè&#34;&gt;åè&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/kPvWOCkMjYRKJSTX4I5VKg&#34;&gt;å¨Android å¼åä¸­ä½¿ç¨åç¨&lt;/a&gt;
&lt;a href=&#34;https://www.reddit.com/r/androiddev/comments/ftqe6s/&#34;&gt;Coroutines Discussion&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=_hfBv0a09Jc&#34;&gt;Introduction to Coroutines&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Activity Start</title>
      <link>https://zacash.cn/post/activity-launch/</link>
      <pubDate>Wed, 22 Apr 2020 08:10:27 +0800</pubDate>
      
      <guid>https://zacash.cn/post/activity-launch/</guid>
      <description>&lt;h3 id=&#34;task-and-back-stack&#34;&gt;Task and Back Stack&lt;/h3&gt;
&lt;p&gt;Task å°±æ¯æ§è¡æé¡¹ä»»å¡æ¶å¼å¯çä¸ç³»å Activity çéåï¼è¿äº Activity ä¼æç§æå¼çé¡ºåºæåå¨åéæ  (Back Stack) ä¸­ã&lt;/p&gt;
&lt;h4 id=&#34;activity-çåç§å¯å¨æ¨¡å¼-launchmode&#34;&gt;Activity çåç§å¯å¨æ¨¡å¼ (launchMode)&lt;/h4&gt;
&lt;p&gt;å¦éè¿ &lt;code&gt;startActivity(Intent)&lt;/code&gt; å¯å¨ Activity A&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standard æ¨¡å¼ï¼æ åæ¨¡å¼ï¼åå»º Activity A å®ä¾å¹¶ push å°å½åä»»å¡æ ä¸­&lt;/li&gt;
&lt;li&gt;singleTop æ¨¡å¼ï¼æ é¡¶å¤ç¨æ¨¡å¼ï¼å¦æå½åæ é¡¶æ¯ Activity A ï¼ç´æ¥å¤ç¨å¹¶è°ç¨ &lt;code&gt;onNewIntent(Intent)&lt;/code&gt;æ¹æ³ï¼ä¸ä¼åå»ºæ°çå®ä¾&lt;/li&gt;
&lt;li&gt;singleTask æ¨¡å¼ï¼æ åå¤ç¨æ¨¡å¼ï¼å¦æå½åæ åå«æ Activity A ï¼ç´æ¥å¤ç¨å¹¶è°ç¨ &lt;code&gt;onNewIntent(Intent)&lt;/code&gt;æ¹æ³ï¼å¹¶æ¸é¤æ å Activity A  ä¸æ¹çææ Activity å®ä¾&lt;/li&gt;
&lt;li&gt;singleInstance æ¨¡å¼ï¼å¨æ°çä»»å¡æ å¼å¯ Activity Aï¼å¦ææ°çä»»å¡æ å Activity A å·²åå»ºï¼ç»§ç»­å¼å¯ Activity A ä¼è°ç¨å¶ &lt;code&gt;onNewIntent(Intent)&lt;/code&gt;æ¹æ³ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ä¸ç§-intent-æ è®°&#34;&gt;ä¸ç§ Intent æ è®°&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;startActivity(Intent)&lt;/code&gt; æ¹æ³å¯ä»¥æ·»å  3 ç§ Intent æ è®°ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;å¨æ°çä»»å¡æ ä¸­å¯å¨ Activity Aï¼å¦æå½åè¿è¡çä»»å¡æ ä¸­å·²å«æ Activity Aï¼åå°ä»»å¡æ åç Activity A æ¢å¤å°åå°å¹¶è°ç¨ &lt;code&gt;onNewInstent(Intent)&lt;/code&gt; æ¹æ³ï¼æ­¤ flag çåè½å &lt;strong&gt;singleTask&lt;/strong&gt; å¯å¨æ¨¡å¼ç¸åã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLAG_ACTIVITY_SINGLE_TOP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;å¦æå¾å¯å¨ç Activity A å·²ä½äºä»»å¡æ é¡¶ï¼åä¼è°ç¨è¯¥å®ä¾ç &lt;code&gt;onNewInstent(Intent)&lt;/code&gt;ï¼æ­¤ flag çåè½å &lt;strong&gt;singleTop&lt;/strong&gt; å¯å¨æ¨¡å¼ã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;å¦æå¾å¯å¨ç Activity A å·²å­å¨äºå½åä»»å¡æ åï¼åä»»å¡æ åè¯¥ Activity A ä¸æ¹çææ Activity é½ä¼è¢«éæ¯ï¼Activity A æ¢å¤åå°å¹¶è°ç¨ç &lt;code&gt;onNewIntent(Intent)&lt;/code&gt; æ¹æ³ã&lt;em&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/em&gt; éå¸¸å &lt;em&gt;FLAG_ACTIVITY_NEW_TASK&lt;/em&gt; ç»åä½¿ç¨ï¼è¿æ¯ä¸ç§å¯ä»¥å°å¦ä¸ä¸ªä»»å¡æ åå·²å­å¨ Activity ååº Intent çæ¹å¼ã&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;taskaffinity-å±æ§&#34;&gt;taskAffinity å±æ§&lt;/h4&gt;
&lt;p&gt;taskAffinity è¡¨ç¤º Activity å¾åäºå½å±åªä¸ªä»»å¡æ . é»è®¤æåµä¸ï¼ä¸ä¸ª App åçææ Activity æç¸åç affinityï¼å³ä¼è¢«å®æå¨åä¸ä»»å¡æ ä¸ãæä»¬å¯ä»¥éè¿ taskAffinity ä¿®æ¹ Activity çå½å±ä»»å¡æ ã&lt;/p&gt;
&lt;p&gt;ä½¿ç¨åºæ¯ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;å¯å¨ Activity ç intent åå« &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; æ è®°æ¶ã&lt;/p&gt;
&lt;p&gt;å¯¹äº Activity A éè¿ &lt;code&gt;startActivity(Intent)&lt;/code&gt; æ¹æ³å¯å¨ Activity Bï¼å¨é»è®¤ standard å¯å¨æ¨¡å¼æ¶ï¼Activity B ä¼è¢« push å° Activity A æå¨çä»»å¡æ ãä½å½ä¼ ç» &lt;code&gt;startActivity(Intent)&lt;/code&gt; ç intent ä½¿ç¨ &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; æ è®°æ¶ï¼ç³»ç»ä¼åå¯»æ¾æ¯å¦æå Activity B å·æç¸å affinity çä»»å¡æ ï¼å¦ææï¼åä¼å°å¯å¨ç Activity B push å°è¯¥ä»»å¡æ ä¸­ï¼å¦ææ²¡æï¼åå»ºæ°çä»»å¡æ ã&lt;/p&gt;
&lt;p&gt;éè¿ &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; åå»ºæ°çä»»å¡æ æ¶ï¼å½ç¨æ·æä¸ &lt;em&gt;HOME&lt;/em&gt; é®ç¦»å¼è¯¥ä»»å¡æ¶ï¼å¿é¡»ææ¹æ³ä¾ç¨æ·è¿åè¯¥ä»»å¡ãæäºå¤é¨å®ä½(å¦ Notification Manager) éå¸¸å¨å¤é¨ä»»å¡(external task)å¯å¨ Activityï¼ å³å¨ &lt;code&gt;startActivity(Intent)&lt;/code&gt; ç intent ä½¿ç¨ &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; æ è®°ãå¦æä½ ç App ä¸­æä¸ª Activity å¯è½è¢«å¤é¨å®ä½(å¦ Notification Manager) éè¿è¿ç§æ¹å¼å¯å¨ï¼éè¦ç¡®ä¿è¯¥ç¨æ·å·æç¬ç«çæ¹å¼(App Launcher)ï¼è¿åå°å¯å¨çä»»å¡ã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;å½ Activity ç &lt;strong&gt;allowTaskReparenting&lt;/strong&gt; å±æ§è®¾ä¸º &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt;æ¶ã&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;æ¸é¤åéæ &#34;&gt;æ¸é¤åéæ &lt;/h4&gt;
&lt;p&gt;é»è®¤æåµä¸ï¼App ç½®äºåå°ä¸æ®µæ¶é´åï¼ç³»ç»ä¼æ¸é¤è¯¥ App ä»»å¡æ åé¤äº Root Activity å¤ææç Activityãå½ App åæ¬¡åå°åå°æ¶(åå°è¯¥ä»»å¡æ )æ¶ï¼åªæ Root Activity è¢«æ¢å¤ãActivity æ 3 ç§æ§å¶è¯¥ç¹æ§çå±æ§ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;alwaysRetainTaskState&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;å½ä»»å¡æ ç Root Activity çè¯¥å±æ§è®¾ä¸º &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt; æ¶ï¼ç³»ç»ä¸ä¼ååæ¶ä»»å¡æ åçå¶ä» Activityï¼ææ Activity é½ä¼å¨æ åé¿æ¶é´ä¿çã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clearTaskOnLaunch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;å½ä»»å¡æ ç Root Activity çè¯¥å±æ§è®¾ä¸º &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt; æ¶ï¼ç³»ç»å¨ä¼å¨ç¦»å¼è¯¥ä»»å¡æ æ¶å°±æ¸é¤ææ Activityã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;finishOnTaskLaunch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ä¸ &lt;code&gt;clearTaskOnLaunch&lt;/code&gt; ç¸ä¼¼ï¼ä¸è¿è¯¥å±æ§ä»éç¨äºåä¸ Activityï¼ä¸æ¯æ´ä¸ªä»»å¡æ ãå½æ Activity çè¯¥å±æ§è®¾ä¸º &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt; æ¶ï¼ç³»ç»ä¼å¨ç¦»å¼è¯¥ä»»å¡æ æ¶ç«å³æ¸é¤è¯¥ Activityã&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;å¼å¯ä»»å¡&#34;&gt;å¼å¯ä»»å¡&lt;/h4&gt;
&lt;p&gt;ä¸è¬æ¥è¯´ App çå¥å£ Activity ç intent-filter ä¼è®¾ç½®æè¿æ ·ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;activity&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;intent-filter&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.action.MAIN&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.category.LAUNCHER&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
    ...
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;è¿ç§éç½®ä¼å¨ Launcher App ä¸­æ¾ç¤ºè¯¥ Activity å¯¹åºçç icon å labelï¼ä»èä¸ºç¨æ·æä¾å¯å¨ Activity æä»å«çä»»å¡åå°è¯¥ä»»å¡çå¥å£ã&lt;/p&gt;
&lt;p&gt;æ­£å¦åé¢ä»ç»éè¿ &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; åå»ºæ°çä»»å¡ï¼å½ç¨æ·æä¸ &lt;em&gt;HOME&lt;/em&gt; é®ç¦»å¼è¯¥ä»»å¡æ¶ï¼å¿é¡»ææ¹æ³ä¾ç¨æ·è¿åè¯¥ä»»å¡ï¼è¿ç§æ¹æ³å°±æ¯ activity launcherãå æ­¤å¯¹äºå¯ä»¥å¯å¨æ°ä»»å¡ç2ç§å¯å¨æ¨¡å¼, &lt;code&gt;singleTask&lt;/code&gt; å &lt;code&gt;singleInstance&lt;/code&gt;ï¼åºè¯¥ä»å¨ Activity ç intent filter æ &lt;a href=&#34;https://developer.android.com/reference/android/content/Intent#ACTION_MAIN&#34;&gt;ACTION_MAIN&lt;/a&gt; å &lt;a href=&#34;https://developer.android.com/reference/android/content/Intent#CATEGORY_LAUNCHER&#34;&gt;CATEGORY_LAUNCHER&lt;/a&gt; ä¿®é¥°æ¶ä½¿ç¨ã&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Handler in Action</title>
      <link>https://zacash.cn/post/handler-in-action/</link>
      <pubDate>Tue, 14 Apr 2020 21:53:54 +0800</pubDate>
      
      <guid>https://zacash.cn/post/handler-in-action/</guid>
      <description>&lt;h3 id=&#34;memory-leaks&#34;&gt;Memory Leaks&lt;/h3&gt;
&lt;h4 id=&#34;11-èæ¯&#34;&gt;1.1 èæ¯&lt;/h4&gt;
&lt;p&gt;1.Handler å¨ä½¿ç¨ä¸é¢è¿ç§å®ç°æ¹å¼å¤çæ¶æ¯æ¶:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; : Activity() {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mLeakedHandler = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;(msg: Message) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.handleMessage(msg)
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://tools.android.com/tips/lint-checks&#34;&gt;Android Lint&lt;/a&gt; ä¼ååºè¿æ ·çè­¦å: &lt;code&gt;This Handler class should be static or leaks might occur(anonymous android.os.Handler)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.æä»¬å¨ Handler æé æ¹æ³éåæ ·å¯ä»¥çå°ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Callback callback&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; async&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;FIND_POTENTIAL_LEAKS&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Handler&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; klass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getClass&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;klass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAnonymousClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; klass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isMemberClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; klass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isLocalClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;klass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getModifiers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Modifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;STATIC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TAG&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The following Handler class should be static or leaks might occur: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                klass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCanonicalName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;è¿éä¼æ£æµ Handler çå®ç°ç±»æ¯å¦ä¸ºå¿åç±»/æåç±»/å±é¨ç±»ä¹ä¸ï¼ç¶ååæ£æµè¯¥å®ç°ç±»æªä½¿ç¨ &lt;code&gt;static&lt;/code&gt; å³é®å­ä¿®é¥°ï¼æªä½¿ç¨çè¯ä¾¿ä¼æåå­æ³æ¼çè­¦åã&lt;/p&gt;
&lt;p&gt;é£ä¹åå­æ³æ¼æ¯å¦ä½äº§ççå¢ï¼ä¸ºä½å  static å°±å¯ä»¥è§£å³æ³æ¼é®é¢ï¼å®ç°æ¯ææ ·çå¢ã&lt;/p&gt;
&lt;h4 id=&#34;12-handler-å¦ä½äº§çåå­æ³æ¼&#34;&gt;1.2 Handler å¦ä½äº§çåå­æ³æ¼&lt;/h4&gt;
&lt;p&gt;å¨ç»§ç»­è®¨è®ºä¹åæä»¬åè¾¾æå¦ä¸å±è¯ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;è¿å¥ MessageQueue éåç msg å¯¹è±¡ï¼å¶ msg.target ä¾¿æ¯å¯¹åºç Handler å¯¹è±¡ï¼å½ Looper æ§è¡å°è¯¥ msg æ¶ï¼ä¼è°ç¨ &lt;code&gt;Handler.handleMessage(Message)&lt;/code&gt; å¤çæ¶æ¯ã&lt;/li&gt;
&lt;li&gt;å¨ Java ä¸­ï¼ééæï¼Non-Staticï¼åé¨ç±»ï¼InnerClassï¼æå¿åç±»ï¼AnonymousClassï¼ä¼éå¼çææå¤é¨ç±»çå¼ç¨ï¼åçï¼éæåé¨ç±»å°±ä¸ä¼ã&lt;/li&gt;
&lt;li&gt;æä»¬å¨å ä¸­åå»ºåå­èå¿è®°å é¤å®ï¼å°±ä¼å¯¼è´äº&lt;a href=&#34;https://www.geeksforgeeks.org/what-is-memory-leak-how-can-we-avoid/&#34;&gt;åå­æ³æ¼&lt;/a&gt;ã&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;å¯ä»¥çå¦ä¸çå®ç°ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; : AppCompatActivity() {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mHandler = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;(msg: Message) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.handleMessage(msg)
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mJob = Runnable { &lt;span style=&#34;color:#75715e&#34;&gt;/*do something*/&lt;/span&gt; }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        mHandler.postDelayed(mJob, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;1000L&lt;/span&gt;)
  
        finish()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ä¸é¢çä»£ç ä¸­ï¼MainActivity å¨ mHandler postDelay ä»»å¡åä¾¿ç«å³éæ¯ï¼æ­¤æ¶ä¸»çº¿ç¨ä¸­ç mHandler ä»ç¶éå¼çææå¤é¨ MainActivity çå¼ç¨ï¼è¯¥å¼ç¨ä¼ç´å° &lt;code&gt;Handler.handleMessage(Message)&lt;/code&gt; å¨ 5min åæ§è¡åæ¶å¤±ï¼ä¹å°±æ¯ MainActivity éæ¯åå¹¶ä¸ä¼è¢«åæ¶ç GCï¼MainActivity åçèµæºå¾ä¸å°éæ¾ï¼ä»èå¯¼è´åå­æ³é²ã&lt;/p&gt;
&lt;h4 id=&#34;13-å¦ä½é¿ååå­æ³é²&#34;&gt;1.3 å¦ä½é¿ååå­æ³é²&lt;/h4&gt;
&lt;p&gt;ä¸ºäºé¿ååå­æ³é²æä»¬å¯ä»¥ä½¿ç¨å¼±å¼ç¨ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; : AppCompatActivity() {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OkHandler&lt;/span&gt;(activity: Activity) : Handler() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mActivity: WeakReference&amp;lt;Activity&amp;gt; = WeakReference(activity)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;(msg: Message) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; activity = mActivity.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (activity != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !activity.isFinishing) {
                &lt;span style=&#34;color:#75715e&#34;&gt;// execute task
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mJob = Runnable { &lt;span style=&#34;color:#75715e&#34;&gt;/*do something*/&lt;/span&gt; }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mHandler = OkHandler(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        mHandler.postDelay(mJob, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;1000L&lt;/span&gt;)

        finish()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Handler in Code</title>
      <link>https://zacash.cn/post/handler-in-code/</link>
      <pubDate>Sun, 12 Apr 2020 20:36:33 +0800</pubDate>
      
      <guid>https://zacash.cn/post/handler-in-code/</guid>
      <description>&lt;h3 id=&#34;handler-çåå»º&#34;&gt;Handler çåå»º&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;å¨ä¸»çº¿ç¨(UI Thread)ä¸­ï¼&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; : Activity {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mLeakedHandler = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;(msg: Message) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.handleMessage(msg)
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;å¨å­çº¿ç¨ä¸­ï¼&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; thread = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Thread&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() {
        Looper.prepare()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; handler = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;() {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;(msg: Message) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.handleMessage(msg)
            }
        }
        Looper.loop()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ä¸ºä»ä¹å¨å­çº¿ç¨åå»º-handler-éè¦åå¤-looperèä¸»çº¿ç¨å´ä¸ç¨&#34;&gt;ä¸ºä»ä¹å¨å­çº¿ç¨åå»º Handler éè¦åå¤ Looperï¼èä¸»çº¿ç¨å´ä¸ç¨&lt;/h4&gt;
&lt;p&gt;å ä¸º ActivityThread ä¸­ç &lt;code&gt;main()&lt;/code&gt; æ¹æ³å·²ç»ä¸ºæä»¬åå§åäº Looper&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Install selective syscall interception
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    AndroidOs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;install&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    Looper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;prepareMainLooper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    ActivityThread thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ActivityThread&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;attach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; startSeq&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sMainThreadHandler &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        sMainThreadHandler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getHandler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Looper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myLooper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setMessageLogging&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;
                LogPrinter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DEBUG&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActivityThread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    Looper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Main thread loop unexpectedly exited&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;handler-å-looper&#34;&gt;Handler å Looper&lt;/h3&gt;
&lt;h4 id=&#34;ä¸ºä»ä¹ä½¿ç¨-handler-å°±éè¦æ¾å¼çè°ç¨-looperprepare-å-looperloop-å¢&#34;&gt;ä¸ºä»ä¹ä½¿ç¨ Handler å°±éè¦æ¾å¼çè°ç¨ &lt;code&gt;Looper.prepare()&lt;/code&gt; å &lt;code&gt;Looper.loop()&lt;/code&gt; å¢&lt;/h4&gt;
&lt;p&gt;æä»¬å¯ä»¥éè¿è§å¯ Handler çæé æ¹æ³çè§£ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Callback callback&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; async&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    mLooper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Looper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myLooper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mLooper &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t create handler inside thread &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; that has not called Looper.prepare()&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    mQueue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mLooper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mQueue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mCallback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callback&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mAsynchronous &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; async&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Looper.myLooper()&lt;/code&gt; çå®ç°åæ¯ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Looper &lt;span style=&#34;color:#a6e22e&#34;&gt;myLooper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;é£ä¹ sThreadLocal å¨åªé set çå¢ï¼ç­æ¡æ¯ &lt;code&gt;Looper.prepare()&lt;/code&gt; æ¹æ³:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; quitAllowed&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Only one Looper may be created per thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    sThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Looper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;quitAllowed&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¯ä»¥çå° Handler å Looper æ¯ç»å®çå³ç³»ï¼æ¯ä¸ª Handler åªä¼å­å¨ä¸ä¸ªçº¿ç¨å Looperï¼Looper åç ThreadLocal æ è¯å¯¹åºççº¿ç¨ã&lt;/p&gt;
&lt;h3 id=&#34;handler-çä½¿ç¨&#34;&gt;Handler çä½¿ç¨&lt;/h3&gt;
&lt;p&gt;æ ¹æ®å®æ¹ææ¡£çä»ç»ï¼Handler éå¸¸æ2ç§ç¨æ³ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Schedule to be executed at some point in the future:
Schedule Message å Runnable æ¯è¾å®¹æçè§£ï¼Handler æä¾äºå¦ &lt;code&gt;sendMessageAtTime(Message, long)&lt;/code&gt; å &lt;code&gt;postAtTime(Runnable, long)&lt;/code&gt; æ¹æ³ï¼å¯ä»¥è®¾å®å¨æªæ¥æä¸ªæ¶å»æ§è¡ä»»å¡ã&lt;/li&gt;
&lt;li&gt;Enqueue an action to be performed on a different thread than your own:
å¨å«ççº¿ç¨æ§è¡ä»»å¡ï¼æä»¬éå¸¸çåºç¨å°±æ¯å¨å­çº¿ç¨å¤çèæ¶ä»»å¡åï¼æä»¬å¯ä»¥éè¿ &lt;code&gt;Handler(getMainLooper())&lt;/code&gt; æ¥æ§è¡æ´æ° UI çæä½ã&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;handler-å-messagequeue&#34;&gt;Handler å MessageQueue&lt;/h3&gt;
&lt;p&gt;è§å¯æºç å¯ä»¥åç° handler ç &lt;code&gt;sendMessage(msg)&lt;/code&gt;ã&lt;code&gt;sendMessageDelayed(msg, timeMillis)&lt;/code&gt;ã&lt;code&gt;post(runnable)&lt;/code&gt; æ¹æ³æåé½æ¯éè¿è°ç¨ &lt;code&gt;sendMessageAtTime(msg, uptimeMillis)&lt;/code&gt; å®ç°ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessageAtTime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; Message msg&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; uptimeMillis&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    MessageQueue queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mQueue&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;queue &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        RuntimeException e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; sendMessageAtTime() called with no mQueue&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Looper&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; enqueueMessage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;queue&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uptimeMillis&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;è¿é &lt;code&gt;Handler.mQueue&lt;/code&gt; æ¯å¨ Handler æé æ¹æ³ééè¿ &lt;code&gt;mLooper.mQueue&lt;/code&gt; è·åï¼è &lt;code&gt;Looper.mQueue&lt;/code&gt; æ¯å¨ Looper åå§åæ¶åå»º:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// android/os/Handler.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Callback callback&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; async&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    mLooper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Looper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myLooper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mLooper &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t create handler inside thread &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; that has not called Looper.prepare()&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    mQueue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mLooper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mQueue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mCallback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callback&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mAsynchronous &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; async&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// android/os/Looper.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Looper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; quitAllowed&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    mQueue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MessageQueue&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;quitAllowed&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    mThread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¯ä»¥çå°åå®æ¹ææ¡£æè¿°çé£æ ·ï¼æ¯ä¸ª Handler å®ä¾é½å³èçä¸æ¡çº¿ç¨ä»¥åè¿æ¡çº¿ç¨çæ¶æ¯éå(Each Handler instance is associated with a single thread and that thread&amp;rsquo;s message queue)ã&lt;/p&gt;
&lt;h4 id=&#34;æ¶æ¯å¦ä½å¥å&#34;&gt;æ¶æ¯å¦ä½å¥å&lt;/h4&gt;
&lt;p&gt;å¨ &lt;code&gt;sendMessageAtTime()&lt;/code&gt; æ¹æ³æåè¿åäº &lt;code&gt;Handler.enqueueMessage()&lt;/code&gt; çå¼ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enqueueMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; MessageQueue queue&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; Message msg&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; uptimeMillis&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;workSourceUid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ThreadLocalWorkSource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mAsynchronous&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAsynchronous&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enqueueMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uptimeMillis&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Handler.enqueueMessage()&lt;/code&gt; è°ç¨ç &lt;code&gt;MessageQueue.enqueueMessage()&lt;/code&gt; å®ç°å¦ä¸ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enqueueMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Message msg&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; when&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Message must have a target.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isInUse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; This message is already in use.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mQuitting&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            IllegalStateException e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                    msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; sending message to a Handler on a dead thread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            Log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TAG&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;recycle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;markInUse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; when&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        Message p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mMessages&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; needWake&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// New head, wake up the event queue if blocked.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            mMessages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mBlocked&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// Inserted within the middle of the queue.  Usually we don&amp;#39;t have to wake
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// up the event queue unless there is a barrier at the head of the queue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// and the message is the earliest asynchronous message in the queue.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mBlocked &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAsynchronous&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            Message prev&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(;;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;needWake &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAsynchronous&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// invariant: p == prev.next
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// We can assume mPtr != 0 because mQuitting is false.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;needWake&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            nativeWake&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mPtr&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;æä»¬åå¼æ¥çï¼è¿é &lt;code&gt;msg.target&lt;/code&gt; å³æ¶æ¯å¯¹åºç handler, å¨ &lt;code&gt;Handler.enqueueMessage()&lt;/code&gt; æ¹æ³æèµå¼ã&lt;/p&gt;
&lt;p&gt;MessageQueue å¹¶æ²¡æéåçæ°æ®ç»æï¼èæ¯ä»¥åé¾è¡¨çå½¢å¼å­å¨ msgï¼&lt;code&gt;mMessages&lt;/code&gt; ä¸ºå½åé¾è¡¨å¤´é¨çæ¶æ¯ï¼æä»¬ç§°ä¸º head_msgï¼å½åä¼ å¥çæ¶æ¯ç§°ä¸º current_msgï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// New head, wake up the event queue if blocked.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mMessages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mBlocked&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;if&lt;/code&gt; çå¤æ­æ¯ï¼å¦æ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1).å½åéåæ²¡æ head_msg&lt;/li&gt;
&lt;li&gt;2).current_msg æ¯éè¦ç«å³æ§è¡&lt;/li&gt;
&lt;li&gt;3).current_msg çæ§è¡æ¶é´å¨ head_msg æ§è¡æ¶é´ä¹å&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;åå° head_msg æ è®°ä¸º current_msg çä¸ä¸æ¡æ¶æ¯ï¼current_msg æ è®°ä¸ºå¤´é¨æ¶æ¯ï¼å¹¶ä¸å¤éå½åé»å¡çéåã&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Inserted within the middle of the queue.  Usually we don&amp;#39;t have to wake
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// up the event queue unless there is a barrier at the head of the queue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// and the message is the earliest asynchronous message in the queue.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mBlocked &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAsynchronous&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    Message prev&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(;;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; when &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;needWake &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAsynchronous&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            needWake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// invariant: p == prev.next
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;else&lt;/code&gt; åçé»è¾æ¯ï¼æ ¹æ® current_msg çæ§è¡æ¶é´å¨æ¶æ¯éåä¸­æ¾å°å¯¹åºçä½ç½®å¥åã&lt;/p&gt;
&lt;h4 id=&#34;ä½æ¶æ§è¡å¥åçæ¶æ¯&#34;&gt;ä½æ¶æ§è¡å¥åçæ¶æ¯&lt;/h4&gt;
&lt;p&gt;ç­æ¡å°±æ¯å¨å­çº¿ç¨ä½¿ç¨ handler æ¶æ¾å¼è°ç¨ç &lt;code&gt;Looper.loop()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// android/os/Looper.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Looper me &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; myLooper&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;me &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Looper; Looper.prepare() wasn&amp;#39;t called on this thread.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; MessageQueue queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; me&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mQueue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(;;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Message msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// might block
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// No message indicates that the message queue is quitting.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dispatchMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception exception&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; exception&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;recycleUnchecked&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Looper.loop()&lt;/code&gt; çå®ç°å°±æ¯å¨æ éå¾ªç¯ä¸­ä¸æ­ä»æ¶æ¯éåä¸­ååº msgï¼å¹¶å¨ &lt;code&gt;msg.target&lt;/code&gt;å³ handler ä¸­ &lt;code&gt;dispatchMessage&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dispatchMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; Message msg&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;callback&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        handleCallback&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mCallback &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mCallback&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handleMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        handleMessage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;msg.callback&lt;/code&gt; å¯¹åºçæ¯ &lt;code&gt;Handler.post(runnable)&lt;/code&gt; ä¼ éç Runnable å¯¹è±¡ï¼è &lt;code&gt;mCallback.handleMessage(msg)&lt;/code&gt; æ &lt;code&gt;handleMessage(msg)&lt;/code&gt; åæ¯å®ä¾è¯ Handler å¯¹è±¡æ¶å¤åçæ¹æ³ã&lt;/p&gt;
&lt;h3 id=&#34;æ»ç»&#34;&gt;æ»ç»&lt;/h3&gt;
&lt;p&gt;Handler å¸®å©æä»¬å¤ç Message å Runnable å¯¹è±¡ï¼æ¯ä¸ª Handler å®ä¾é½å³èçä¸ä¸ªçº¿ç¨ä»¥åè¿ä¸ªçº¿ç¨ç MessageQueueãå½ä½ åå»ºä¸ä¸ªæ°ç Handler å¯¹è±¡æ¶ï¼å®å°ä¸å½åæå¨ççº¿ç¨(UI/Work Thread)å MessageQueue ç»å®å¨ä¸èµ·ï¼éè¿ Handler ååºç Message æè Runnable(msg.callback) ä¼æ ¹æ®æ§è¡æ¶é´æå¥ MessageQueueï¼Looper ä¼æç»­ä¸æ­çä» MessageQueue ååºå¯æ§è¡ç Message éè¿ Handler.handleMessage(msg) å¤çã&lt;/p&gt;
&lt;p&gt;å¦ä¸å¾æç¤ºï¼&lt;img src=&#34;https://i1.wp.com/tutorial.eyehunts.com/wp-content/uploads/2018/08/Android-Handler-Background-Thread-Communicate-with-UI-thread-1.png?resize=1024%2C621&amp;amp;ssl=1&#34; alt=&#34;handler&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Basic</title>
      <link>https://zacash.cn/post/hugo-basic/</link>
      <pubDate>Sat, 04 Apr 2020 09:25:04 +0800</pubDate>
      
      <guid>https://zacash.cn/post/hugo-basic/</guid>
      <description>&lt;h2 id=&#34;add-new-content&#34;&gt;Add new content&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hugo new posts/article-name.md&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;article-meta-info&#34;&gt;Article meta info&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;---
title: &amp;#34;New Article&amp;#34;
date: 2020-04-04T09:25:04+08:00
description: &amp;#34;Hugo çç®åç¨æ³&amp;#34;
tags: [&amp;#34;hugo&amp;#34;, &amp;#34;pages&amp;#34;]
categories: [&amp;#34;hugo&amp;#34;]
draft: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;start-server-with-drafts-enabled&#34;&gt;Start server with drafts enabled&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hugo server -D&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;customize-the-theme&#34;&gt;Customize the theme&lt;/h2&gt;
&lt;p&gt;Open up &lt;code&gt;config.toml&lt;/code&gt; in a text editor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;baseURL = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://example.org/&amp;#34;&lt;/span&gt;
languageCode = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en-us&amp;#34;&lt;/span&gt;
title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My New Hugo Site&amp;#34;&lt;/span&gt;
theme = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ananke&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;build-static-pages&#34;&gt;Build static pages&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hugo -D&lt;/code&gt; output will be in &lt;code&gt;./public/&lt;/code&gt; directory by default (&lt;code&gt;-d/--destination&lt;/code&gt; flag to change it, or set &lt;code&gt;publishdir&lt;/code&gt; in the config file)&lt;/p&gt;
&lt;h2 id=&#34;publish-article&#34;&gt;Publish article&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;build web site: &lt;code&gt;hugo -D&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;deploy web site: &lt;code&gt;./deploy.sh &#39;comments&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Check State Loss</title>
      <link>https://zacash.cn/post/check-state-loss/</link>
      <pubDate>Tue, 11 Feb 2020 16:30:26 +0800</pubDate>
      
      <guid>https://zacash.cn/post/check-state-loss/</guid>
      <description>&lt;h4 id=&#34;èæ¯&#34;&gt;èæ¯&lt;/h4&gt;
&lt;p&gt;æè¿åçä¸ä¸ª DialogFragment å¨å°æ°è®¾å¤ä¸ä¼å¶åéªéï¼Fabric ä¸ç Stacktrace ä¿¡æ¯å¦ä¸ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Fatal Exception&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;IllegalStateException&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Can not perform &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; action after onSaveInstanceState
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FragmentManagerImpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;checkStateLoss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FragmentManagerImpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enqueueAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BackStackRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commitInternal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BackStackRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DialogFragment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ï¼&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;çèµ·æ¥æ¯å¼¹çªå¨ show çæ¶åï¼åçäº state lossï¼ç²ç¥ copy äºä¸ StackOverflow ä¸çåç­ï¼åäºå¦ä¸ä¿®æ¹ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;fun &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;manager&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; FragmentManager&lt;span style=&#34;color:#f92672&#34;&gt;?)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   val ft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; manager&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;beginTransaction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
   ft&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tag of dialog&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   ft&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commitAllowingStateLoss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Exception&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

 &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;éåäº show æ¹æ³ï¼åè®¸ state lossï¼å¹¶å äºå¼å¸¸ææï¼åç»­è§å¯ Fabricï¼ show çæ¶åçç¡®æ²¡ååºç°å¼å¸¸æåµï¼ä½ dismiss çæ¶åè¿æ¯æéªéåºç°ï¼å¼å¸¸ä¿¡æ¯å¦ä¸ï¼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Fatal Exception&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;IllegalStateException&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Can not perform &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; action after onSaveInstanceState
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FragmentManagerImpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;checkStateLoss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FragmentManagerImpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enqueueAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BackStackRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commitInternal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BackStackRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       at android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DialogFragment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dismiss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SourceFile&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ï¼&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;å¯ä»¥çå°ä¸ show åºç°çéªéå¦åºä¸è¾ï¼åªæ¯éªéè§¦åçä½ç½®æ¢æäº dismissï¼æç§ä¹åå¯¹ show çä¿®æ¹ï¼æ¯ä¸æ¯ä¹å¯ä»¥æ dismiss æ¹æ³ä¹æ¹ä¸å¢ï¼å®éä¸è¿çæ &lt;code&gt;dismissAllowingStateLoss()&lt;/code&gt; æ¹æ³ãããä½æ¯ççå¯ä»¥è¿æ ·åä¹ï¼æ¯ä»ä¹åå å¯¼è´ç state lossï¼å¦ä½æè½ææé¿åè¿ç§æåµå¢ï¼&lt;/p&gt;
&lt;p&gt;ä»ç»çäºä¸ Stack Overflow é®é¢ä¸çè¯è®ºï¼åç° &lt;a href=&#34;https://twitter.com/alexjlockwood&#34;&gt;Alex Lockwood&lt;/a&gt; åç&lt;a href=&#34;https://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html&#34;&gt;ä¸ç¯æç« &lt;/a&gt;åæçå¾å¨é¢ï¼ä¸é¢å¯¹éç¹åå®¹ç¿»è¯ä¸ä¸ã&lt;/p&gt;
&lt;h4 id=&#34;ä¸ºä»ä¹ä¼æå¼å¸¸&#34;&gt;ä¸ºä»ä¹ä¼æå¼å¸¸&lt;/h4&gt;
&lt;p&gt;ç®åæ¥è¯´ï¼å°±æ¯ä½ å¨ Activity state saved åï¼ä»æ§ commit ä¸ä¸ª FragmentTransactionï¼ä»èå¯¼è´åºç°äºæè°ç &lt;code&gt;Activity state loss&lt;/code&gt; ç°è±¡ãæä»¥ &lt;code&gt;onSaveInstanceState()&lt;/code&gt; æ¶åçäºä»ä¹ï¼&lt;/p&gt;
&lt;h5 id=&#34;onsaveinstancestate&#34;&gt;onSaveInstanceState&lt;/h5&gt;
&lt;p&gt;Android ç³»ç»å¯ä»¥éæ¶ç»æ­¢è¿ç¨ä»¥éæ¾åå­ï¼å æ­¤ç½®äºåå°ç Activity éæ¶å¯è½ä¼è¢«æ¸çãAndroid framework æä¾ç»æ¯ä¸ª Activity å¨è¢«ç³»ç»éæ¯åè°ç¨ &lt;code&gt;onSaveInstanceState&lt;/code&gt; ä»¥ä¿å­å¶ç¶æ(state)çæºä¼ï¼å¨éåæ¢å¤(restore)è¢«ä¿å­çç¶ææ¶ï¼ç¨æ·ä¼æè§å¨æ ç¼åæ¢å/åå°Activityï¼èä¸ä¼å¯è§ Activity ä¼ç³»ç»æ¸çè¿ã&lt;/p&gt;
&lt;p&gt;å½è°ç¨ &lt;code&gt;onSaveInstanceState&lt;/code&gt; æ¹æ³æ¶ï¼Android Framework å°ä¸º Acitvity æä¾ä¸ä¸ª Bundle å¯¹è±¡ä¿å­å¶ç¶æï¼Activity å°è®°å½ dialogs, fragments, views çç¶æãå¨è¿ä¸ªæ¹æ³è¿åæ¶ï¼ç³»ç»éè¿ Binder æ¥å£å° Bundle å¯¹è±¡æå(parcel)å° System Server è¿ç¨ãéåå½ç³»ç»å³å®éå»º(recreate) Activity æ¶ï¼å®å°ä¹åä¿å­ç Bundle åå Appï¼æ¥æ¢å¤ Activity æ§çç¶æã&lt;/p&gt;
&lt;p&gt;æä»¥ä¸ºä»ä¹åæå¼å¸¸ï¼åå å°±æ¯å¨ &lt;code&gt;onSaveInstanceState&lt;/code&gt; è°ç¨åï¼ä½ è°ç¨äº &lt;code&gt;FragmentTransaction#commit()&lt;/code&gt;ï¼å æ­¤ &lt;code&gt;onSaveInstanceState&lt;/code&gt; æ¹æ³è¿åç &lt;code&gt;Bundle&lt;/code&gt; å¯¹è±¡å¹¶ä¸åå«è¯¥äºå¡(transaction)ãå¨ç¨æ·çè§åº¦æ¥çï¼äºå¡è¢«å¿½ç¥ï¼UI ç¶æä¸¢å¤±ï¼Android ä¸ºäºé¿åè¿ç§æåµ,åªè¦åçç¶æä¸¢å¤±(state loss)ä¾¿ç«å³æåº &lt;code&gt;IllegalStateException&lt;/code&gt;ã&lt;/p&gt;
&lt;h4 id=&#34;ä½æ¶æåºå¼å¸¸&#34;&gt;ä½æ¶æåºå¼å¸¸&lt;/h4&gt;
&lt;p&gt;ä» Honeycomb å¼å§ï¼&lt;code&gt;onSaveInstanceState()&lt;/code&gt; å¨çå½å¨æ &lt;code&gt;onStop()&lt;/code&gt; æ¹æ³ä¹åè°ç¨ï¼èä¸æ¯ &lt;code&gt;pre-Honeycomb&lt;/code&gt;æ¶ç &lt;code&gt;onPause()&lt;/code&gt; ä¹åã&lt;/p&gt;
&lt;h4 id=&#34;å¦ä½é¿åå¼å¸¸&#34;&gt;å¦ä½é¿åå¼å¸¸&lt;/h4&gt;
&lt;p&gt;è¿éæä¸äºå³äºå¨ App ä¸­ä½¿ç¨ &lt;code&gt;FragmentTransaction&lt;/code&gt; çå»ºè®®ï¼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;æ³¨æ&lt;/strong&gt; å¨ Activity ççå½å¨ææ¹æ³ &lt;em&gt;æäº¤äºå¡(commit transaction)&lt;/em&gt;ï¼
å½ä½ å¨ &lt;code&gt;onCreate()&lt;/code&gt; æ¹æ³ commit äºå¡å¯è½ä»æ¥ä¸ä¼ç¢°å°é®é¢ï¼ä½å½ä½ å¨ &lt;code&gt;onActivityResult()&lt;/code&gt;ã&lt;code&gt;onStart()&lt;/code&gt;ã&lt;code&gt;onResume&lt;/code&gt; commit æ¶ï¼äºæåå¾æè¶£äºèµ·æ¥ãæ¯å¦ï¼ä½ ä¸åºè¯¥å¨ &lt;code&gt;FragmentActivity#onResume()&lt;/code&gt; æ¹æ³é commit äºå¡ï¼å ä¸ºå¨&lt;a href=&#34;http://developer.android.com/reference/android/support/v4/app/FragmentActivity.html#onResume()&#34;&gt;æäºæåµ&lt;/a&gt;ä¸ï¼Activity ä¼å¨æ¢å¤ç¶æ(restore state)ä¹åè°ç¨ &lt;code&gt;onResume()&lt;/code&gt; æ¹æ³ãå¦æä½ ç App éè¦å¨ &lt;code&gt;onCreate()&lt;/code&gt; æ¹æ³ä»¥å¤ commit äºå¡ï¼å°è¯å¨ &lt;code&gt;FragmentActivity#onResumeFragments()&lt;/code&gt; æ &lt;code&gt;Activity#onPostResume()&lt;/code&gt; æ¹æ³å commitï¼è¿ä¸¤ä¸ªæ¹æ³ä¼ç¡®ä¿å¨ Activity restore state åè°ç¨ï¼å æ­¤é¿åäº state loss çå¯è½ãå¯¹äºè¿ä¸ªä¾å­çæè¿°ï¼å¯ä»¥åè StackOverflow ä¸è¿ä¸ª&lt;a href=&#34;http://stackoverflow.com/q/16265733/844882&#34;&gt;åç­&lt;/a&gt;ã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;é¿å&lt;/strong&gt; å¨å¼æ­¥åè°æ¹æ³ä¸­æä½äºå¡:
ä¸»è¦åå æ¯ï¼å¨å¼æ­¥åè°æ¹æ³æ§è¡æ¶ï¼å¹¶ä¸äºè§£ Activity å½åççå½å¨æç¶æï¼å æ­¤å¾å¯è½å¨ &lt;code&gt;onStop()&lt;/code&gt; è°ç¨æ¶ commit äºå¡ï¼ä»èæåºå¼å¸¸ãè¿ç§æåµå¯ä»¥åè StackOverflow ä¸&lt;a href=&#34;http://stackoverflow.com/q/8040280/844882&#34;&gt;è¿ä¸ªåç­&lt;/a&gt;å&lt;a href=&#34;http://stackoverflow.com/q/7992496/844882&#34;&gt;è¿ä¸ªåç­&lt;/a&gt;ã&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt; ä»ä½ä¸ºæåçææ®µï¼
&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt; ä¸ &lt;code&gt;commit()&lt;/code&gt; æ¹æ³å¯ä¸çåºå«ä¾¿æ¯è¯¥æ¹æ³å¨ç¶æä¸¢å¤±æ¶ä¸ä¼æå¼å¸¸ãä¸è¬æåµä¸ä¸è¦ä½¿ç¨è¯¥æ¹æ³ï¼ä¸ç§æ´å¥½çæ¹å¼ï¼ä¾¿æ¯ç¡®ä¿å¨ Activity save state ä¹å commit äºå¡ã&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;æå&#34;&gt;æå&lt;/h4&gt;
&lt;p&gt;åå½å°æç DialogFragment ä¸ºä½åºç°å¼å¸¸ï¼åå æ¯æ commit transaction ä½ç½®æ¯å¨ &lt;code&gt;FragmentActivity#onResume()&lt;/code&gt;æ¹æ³å:-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zacash.cn/post/when-to-use-lazy-or-lateinit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/post/when-to-use-lazy-or-lateinit/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>