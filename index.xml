<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zac&#39;s blog</title>
    <link>https://zacash.cn/</link>
    <description>Recent content on Zac&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Zac &amp;copy; 2022
</copyright>
    <lastBuildDate>Wed, 04 May 2022 21:01:59 +0800</lastBuildDate><atom:link href="https://zacash.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Write A Better Resume</title>
      <link>https://zacash.cn/posts/how-to-write-better-resume/</link>
      <pubDate>Wed, 04 May 2022 21:01:59 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/how-to-write-better-resume/</guid>
      <description>作者：Windson Yang 链接：https://zhuanlan.zhihu.com/p/38431524 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
 概述 从零开始写简历是一件痛苦的事，大多数求职者没有阅读过其他求职者的简历，所以无法从优秀的简历中学习如何改进自己的简历。我遇过不少求职者写完简历后连自己都不忍心看，错别字连篇，排版混乱就投出去，这也不难怪没有获得面试的机会。加上程序员工资中位数较高，有大量人才从其他专业转来，竞争非常激烈。这篇文章分成两部分，简历中的常见错误以及如何写一份出色的简历，通过分享我们的经验以及技巧，帮助你从众多简历中脱颖而出。
简历中常见的错误 1.信息过多，缺乏重点 信息过多的常见表现是几十行的技能列表，举个例子：
20 行的技能列表，这位求职者开始就把自己了解的所有工具都列出来，希望能够突显自己的经验和学习能力，但是却适得其反。我们首先要了解 HR 是如何筛选简历的，例如要招前端工程师，HR 会先找简历是否有简介这类总结性的板块，看求职者是否符合基本的岗位要求。接下来会在技能列表中搜索 Vue，React，jQuery 等关键字。如果也符合要求，才会认真阅读整份简历的其他部分。平均来说，给每份简历的时间只有不到十秒钟。所以越简洁清晰的简历，HR 反而越有可能认真看。
这里还有个小技巧，投简历不要扎堆在周末投，而应该在平日投。因为周一堆积了周五未处理完的简历以及周末的简历，是最多简历需要处理的时候，HR 花费在每份简历上的平均时间会相对较少。另外，HR 会倾向于把同一天的求职者当成竞争对手，从中挑选合适的，所以那么简历越多竞争也越激烈。
大段的技能列表还有另外一个问题，当 HR 发现里面有几行是一些非常基础的技能时，反而会开始怀疑求职者的技术能力。想象下，当你上网搜索到一个 20部最佳喜剧电影榜单。却发现其中好几部都是之前看过的烂片，一点都不好笑。这个情况下，你就会开始怀疑这个喜剧电影排行榜有问题。技能列表也是一样的，基础的技能点越多，被怀疑的可能性也越高。 那么技能列表应该这么写呢？因为 HR 既可能是工程师，也可能是非技术员工，所以技能列表也应该简短而排版清晰，让外行人也能快速定位技能。我建议参考这种方式（熟练度从高到低进行排列，但不要强调熟练度）：
 后端框架：Django, Flask, Tornado 前端框架：Vue, React, jQuery 数据库：Redis, MySQL 工具：Docker, Jenkins, Git 其他：HTTP, TCP/IP, WebSocket 外语：大学英语四级，能流畅阅读英文文档  就是如此简短，让 HR 能快速定位到求职者的技能，做出是否看下去的判断。可能有读者会疑问了，这样好像太简单，无法突显我对工具的熟悉程度以及技术能力，这个问题，可以参考下文的简介部分来找到解答。
2.无意义描述 第二个常见错误就是叙述项目经验时进行无意义的描述：
 XXX平台 根据项目任务要求完成规划工作和按时完成软件开发。 完成爬虫模块，展示模块。 开发后台管理系统，实现自定义分页，第三方登录。 完成数据整理与入库功能。
 HR 无法从这样的描述中得到有效的信息，也无法判断求职者的技术能力。项目经验是最能够突显技术能力的地方，应该按照
 使用什么工具： 使用 Scrapy 开发异步爬虫系统 实现什么功能： 构建 IP 代理池，优化爬虫策略和防屏蔽规则 结果怎么样： 提升 200% 网页抓取速度  三个点来修改，这里的 200% 量化数据是画龙点睛之处。就算没做太多统计和优化，也可以展示 CPU 或者内存负载数据。</description>
    </item>
    
    <item>
      <title>How to Prepare Job Interview</title>
      <link>https://zacash.cn/posts/how-to-prepare-job-interview/</link>
      <pubDate>Wed, 04 May 2022 20:44:38 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/how-to-prepare-job-interview/</guid>
      <description>作者：Windson Yang 链接：https://zhuanlan.zhihu.com/p/38432342 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
 概述 工作了几年，当我有了面试官的经验之后，我发现认真准备简历和面试是非常重要的，因为毫无准备就来面试的求职者真的太多了。这篇文章我把这几年作为面试者和面试官身份的的经验給大家，希望大家可以从中学到一些面试的技巧，找到心仪的工作。大家也可以使用 求职课程 进行简历 Review 和模拟面试，这样既能节省请假面试的时间，也能根据我们的反馈改善自己面试的表现。在真实面试的时候就会更有把握。
分析阶段 不同的公司乃至部门，面试的流程和着重点都有颇大的差别。国内以腾讯为例，微信部门与深圳总部的面试流程和着重点就不一样。微信一面的时候需要五十分钟内手写 4 道偏简单的算法题，但是在深圳总部面试的时候一面却是没有算法题，两小时的考卷。更多的是与面试官聊技术与项目经验。国外的话，甲骨文五轮的面试可能四轮是系统设计，一轮是算法。亚马逊虽然注重算法，但是非技术问题在面试中占比非常高。你首先需要知道面试中考察什么内容之后才去开始准备，国内可以通过我们整理的高频题库，牛客网，看准网着手复习。国外可以通过一亩三分地，Blind，Leetcode discuss 等网站找到这些信息。
准备阶段 设定限期 面试准备不能无休止地进行下去，因为计算机知识永远都学习不完。可以给自己设立一个时间点，在时间点之后就开始投简历进行面试。例如你可以设立一个月的面试准备时间，然后再根据求职的岗位以及自己的实际情况去分配时间，把时间主要分给面试主要考察的地方。
技术准备 基础知识主要包括：编程语言基础，第三方工具基础（框架，中间件等），算法与数据结构，计算机网络，操作系统，数据库。我在程序员面试推荐书籍这篇文章中列出了面试常见的问题以及对应的解答书籍供大家参考，这里我列举一些面试常见的问题：
1.编程语言基础
 数据结构的实现细节以及比较：数组，链表，哈希表是如何实现的，底层内存分配是怎样的？插入与查找的时间复杂度是多少，分别有什么优缺点。 编程语言特性： Java 的字符串池是怎么实现的，垃圾回收的流程以及原理。 关键字特性：包括 Java 中的 static，final，Python 中的 init 关键字的含义以及使用场景。 面向对象的细节：类的封装，函数与变量继承，抽象类和接口有什么区别等。 多线程与多进程：线程如何同步，进程如何同步，wait() 函数使用场景以及常用的并发编程模式。  2.第三方工具
整体架构：这个工具整体的架构是怎样的？主要由哪几个部分组成，它们之间是如何通信以及合作的。 实现原理：核心功能是如何实现的？对比另外一款工具做了哪些优化以及改进。
3.算法基础
算法题：链表操作，二分查找，动态规划，DFS，BFS 等（可以使用 Leetcode 来进行学习）。 算法复杂度的分析：时间复杂度，空间复杂度，平均时间复杂度。 数据结构的实现：实现二叉查找树，Trie 树。
这里说一点题外话，可能有的同学有疑问，觉得这些平常工作都用不到，为什么还要花那么多时间在上面。其实不是的，第一，平常工作都能用到，无论从二分查找到复杂一点的前缀树。开发的过程中如果你知道这些算法／数据结构，就能根据自己的业务来选择最适合的算法／数据结构，减少整个项目的复杂度。 第二，数据结构和算法锻炼的是思维，就像 NBA 球员除了训练投篮和战术之外，还需要训练敏捷度，体力，耐力等其他方面。刷算法题的时候，可以从优秀的前辈中学习到一些有趣的，巧妙的方法。它们能扩展你的编程时思考的范围。即使你不准备换工作，我也建议每天都刷一道算法题，日积月累，一年下来你的算法基础一定能比同龄人高出不少。而且当你真正理解算法题的知识之后，写程序 debug 和花在 Stackoverflow 的时间就会大大减少，往往知道哪里可能有问题并且能大幅地增加工作效率。
4.计算机网络
 协议的基础组成与用途：HTTP 协议中不同头部，方法，状态码的含义。 协议的使用场景：DNS 协议，ARP 协议，SSH 命令的使用场景以及原理。 不同协议的区别：TCP 与 UDP 的区别，HTTP 与 HTTPS 的区别。 协议具体功能实现：TCP 三次握手原理，TCP 慢启动以及滑动窗口的原理与实现方式。  5.</description>
    </item>
    
    <item>
      <title>Intro to Executor</title>
      <link>https://zacash.cn/posts/intro-to-executor/</link>
      <pubDate>Tue, 29 Mar 2022 21:46:30 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-executor/</guid>
      <description>Executor, ExecutorService, Executors 通常我们执行多个 Runnable task 会使用这种形式：
val t1 = Thread {  // Runnable task1 }  val t2 = Thread {  // Runnable task2 }  t1.start() t2.start() 如果是执行 N 个 Runnable tasks，对每个 Runnable task 创建一个 Thread 执行显然不合适，我们可以通过实现 Executor 接口来编排 Runnable task 的执行：
class SerialExecutor(private val executor: Executor): Executor {   private val tasks: ArrayDeque&amp;lt;Runnable&amp;gt; = ArrayDeque()  private var active: Runnable? = null   @Synchronized  override fun execute(r: Runnable?</description>
    </item>
    
    <item>
      <title>JVM Basic - Rumtime Data Area</title>
      <link>https://zacash.cn/posts/jvm-basic-rt-data-area/</link>
      <pubDate>Thu, 24 Mar 2022 08:44:28 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/jvm-basic-rt-data-area/</guid>
      <description>前面说了类加载器，我们接下来看看运行时数据区(Run-Time Data Areas)
Run-Time Data Areas The pc Register JVM 可以支持多个线程同时运行，每个线程都有自己的 pc 寄存器(program counter register)。在任意时间点，任一线程在执行某个方法的代码，即该线程的当前方法(current method)。
 如果该方法是 native 的，pc 寄存器的值是 undefined。 如果该方法不是 native 的，pc 寄存器包含当前正在执行指令的地址。  JVM 的 pc 寄存器容量足够在特定平台上保存 returnAddress (returnAddress 保存着指向JVM操作码指令的指针) 或 native 指针。
JVM 栈 (Stacks) 每个线程都有一个私有的 JVM 栈，与线程同时创建。JVM 栈存储 栈帧(frames) 对于栈帧仅有两种操作：push 和 pop。JVM 栈的内存不必是连续的。
线程执行的每个 method calls 都存储在对应的栈中，包括入参、局部变量、中间计算和其他数据。方法完成后，JVM 将从栈中删除对应的条目，完成所有的方法调用后，栈将变为空，并且在终止线程前，销毁该栈。
存储在栈中的数据仅适用于对应线程，对别的线程不适用。因此，可以说局部数据是线程安全的。
 第一版的 Java 虚拟机规范 The Java® Virtual Machine Specification, JVM 栈 被称为 Java 栈 (Java stack)
 JVM 规范允许Java虚拟机栈具有固定大小，或者根据计算要求动态伸缩。 如果Java虚拟机栈的大小固定，则在创建每个Java虚拟机栈时可以独立选择它们的大小。</description>
    </item>
    
    <item>
      <title>JVM Basic - ClassLoader</title>
      <link>https://zacash.cn/posts/jvm-basic-classloader/</link>
      <pubDate>Wed, 23 Mar 2022 08:44:28 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/jvm-basic-classloader/</guid>
      <description>类加载器（ClassLoader） 什么是类加载器 类加载器是 JRE 的一部分，负责在运行时将 Java 类动态加载到 JVM，有了类加载器，JVM 无需了解底层文件或文件系统即可运行Java程序。
类加载器不会一次将全部类加载到内存里，而是在程序需要时加载。
JVM 内置的类加载器类型   Bootstrap class loader
每个 JVM 实现必须有一个 bootstrap 类加载器。它负责 JDK 内部类，通常是 rt.jar 和位于 JAVA_HOME/jre/lib 目录下的其他核心类，该路径通常被称为引导路径(bootstrap path)。该类加载器由 C/C++ 语言实现。
  Extension class loader
Bootstrap 的子类加载器，它加载扩展目录 JAVA_HOME/jre/lib/ext 或 java.ext.dirs 指定路径下的类。它在 sun.misc.Launcher$ExtClassLoader 类中由 Java 语言实现。
  System/Application class loader
Extension 的子类加载器。它负责加载 App 层级的类，它加载在 classpath 环境变量、-classpath、-cp 命令行选项中找到的文件。它在 sun.misc.Launcher$AppClassLoader 类中由 Java 语言实现。
  自定义的类加载器 在需要从本地或网络加载类的场景，我们可能需要使用自定义类加载器。
使用场景 自定义类加载器不仅对在运行时加载类有帮助，还包括：
 修改现有字节码，如织入代理 动态创建适合用户需求的类。如 JDBC 中，通过动态类加载完成不同驱动实现(driver implementations)之间的切换。 实现类版本控制机制，如为具有相同名称和包名的类加载不同的字节码（热修复）。这可以通过 URL 类加载器或自定义加载器完成。  我们可以自定义类加载器实现指定类的加载：</description>
    </item>
    
    <item>
      <title>What is HTTPS</title>
      <link>https://zacash.cn/posts/intro-to-https/</link>
      <pubDate>Sat, 12 Mar 2022 20:36:33 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-https/</guid>
      <description>HTTPS(Hypertext transfer protocol sercure) is a secure version of HTTP protocol that uses the SSL/TLS protocol for encryption and authentication. HTTPS is specified by RFC 2818 and uses port 443 as default port(which HTTP is 80).
Why HTTPS is important The HTTPS protocol makes it possible for website users to transmit sensitive data such as credit card numbers, banking information, and login credentials securely over the internet. For this reason, HTTPS is especially important for securing online activities such as shopping, trading and banking.</description>
    </item>
    
    <item>
      <title>How to Learn Math</title>
      <link>https://zacash.cn/posts/how-to-learn-math/</link>
      <pubDate>Sun, 20 Dec 2020 11:18:43 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/how-to-learn-math/</guid>
      <description>&lt;p&gt;You maybe unfortunate and classrooms that offer math is a drive not in a subject or you maybe fortunate and in classrooms for math is shown as a living breathing subject with lots of ways to access it. But whichever you&amp;rsquo;re in this course will help you as it&amp;rsquo;ll show you the real nature of math not the boring drivers and often presented in textbooks but living breathing math that it&amp;rsquo;s all around us in the world, the math there you have a positive relationship with.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use Hilt in Android</title>
      <link>https://zacash.cn/posts/use-hilt-in-android/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/use-hilt-in-android/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If you want to use dagger in  your project, you may have 2 or 3 different sources, different samples, different blog posts. All of them use a different set-up, and all of them use Dagger in a different way, so it&amp;rsquo;s very difficult to understand all the topics and relate them together. So that&amp;rsquo;s why Google create a common guidance, a common ground, which is called Hilt.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Introduction to Custom View</title>
      <link>https://zacash.cn/posts/custom-view-introduction/</link>
      <pubDate>Sun, 06 Sep 2020 11:11:13 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/custom-view-introduction/</guid>
      <description>&lt;p&gt;To create a custom view we can either extend an existing &lt;code&gt;View&lt;/code&gt; subclass(like EditText), or create our own subclass of View. By extending View directly, we can create an interactive UI element of any size and shape by overriding the &lt;code&gt;onDraw()&lt;/code&gt; method for the View to draw it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to Navigation</title>
      <link>https://zacash.cn/posts/intro-to-navigation/</link>
      <pubDate>Sun, 23 Aug 2020 11:11:13 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-navigation/</guid>
      <description>The Jetpack&amp;rsquo;s Navigation component helps us implement navigation feature in a single MainActivity, it contains 3 core parts: Navigation graph, NavHost, NavController.
NavHostFragment NavHostFragment acts as a host for the fragments in the navigation graph.
As the user moves between destination defined in the navigation graph, the NavHostFragment swaps the fragments in and out and manages the Fragment back stack.
In the activity_main.xml layout file, the NavHostFragment is represented by a fragment element with the name android:name=&amp;quot;androidx.</description>
    </item>
    
    <item>
      <title>Data Binding in Android</title>
      <link>https://zacash.cn/posts/databinding-in-android/</link>
      <pubDate>Sun, 23 Aug 2020 08:37:45 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/databinding-in-android/</guid>
      <description>&lt;p&gt;每次在 view 发生创建或重建，我们使用 &lt;code&gt;findViewById()&lt;/code&gt; 来获取 view 的引用时，Android 系统在运行时会遍历整个视图层级结构（view hierarchy）来查找它。在我们 app 的视图结构比较简单时没有问题，但是生产上的 app 一个 layout 可能有几十个 views，即使是最佳设计，也会存在嵌套的 views.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generics in Kotlin</title>
      <link>https://zacash.cn/posts/generics-in-kotlin/</link>
      <pubDate>Fri, 14 Aug 2020 07:27:09 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/generics-in-kotlin/</guid>
      <description>&lt;p&gt;val 和 var 与 variables 的 VALUES 相关，val 保护变量的值不变。in 和 out 与 variables 的 TYPES 相关，in 和 out 保证在范型的使用中，只有安全的类型才能传入或传出函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Interface Delegation</title>
      <link>https://zacash.cn/posts/interface-delegation/</link>
      <pubDate>Tue, 11 Aug 2020 20:42:28 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/interface-delegation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/kotlin-bootcamp-classes/#7&#34;&gt;接口委托（Interface delegation）&lt;/a&gt; 是一种&amp;quot;高级&amp;quot;技术，接口的方法由 helper 或 delegate 对象实现，然后给别的类使用。当我们在一系列不相关的类中使用接口时，这项技术会很有用：我们将需要使用的接口的函数添加到单独的 helper 类中，别的类使用 helper 类的实例来实现这个函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Indigo</title>
      <link>https://zacash.cn/posts/introducing-indigo/</link>
      <pubDate>Mon, 10 Aug 2020 09:00:00 -0400</pubDate>
      
      <guid>https://zacash.cn/posts/introducing-indigo/</guid>
      <description>&lt;p&gt;Indigo is a lightweight theme for &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; with &lt;a href=&#34;https://indieweb.org&#34;&gt;IndieWeb&lt;/a&gt; features baked in. It&amp;rsquo;s great for longer-form blogging, placing its focus on distraction-free reading and beautiful typefaces.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lambdas and High-order Functions</title>
      <link>https://zacash.cn/posts/lambdas-and-high-order-functions/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/lambdas-and-high-order-functions/</guid>
      <description>&lt;p&gt;除了传统命名的函数外，Kotlin 还支持 &lt;a href=&#34;https://kotlinlang.org/docs/reference/lambdas.html&#34;&gt;lambdas&lt;/a&gt;. &lt;em&gt;lambda&lt;/em&gt; 是组成函数的表达式，一个没有名称的函数。lambda 表达式可以作为数据传递。在其他语言中，lambda 被称为 &lt;em&gt;匿名函数（anonymous function）&lt;/em&gt;，&lt;em&gt;函数字面量（function literals）&lt;/em&gt; 或类似名称。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Process, Threads and Locks</title>
      <link>https://zacash.cn/posts/threads-and-locks/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/threads-and-locks/</guid>
      <description>&lt;p&gt;Threads are created and managed by the classes Thread and ThreadGroup. Creating a Thread object creates a thread, and that is the only way to create a thread. When the thread is created, it is not yet active; it begins to run when its start method is called.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebSocket 和长轮询</title>
      <link>https://zacash.cn/posts/websocket-and-long-polling/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/websocket-and-long-polling/</guid>
      <description>&lt;p&gt;客户端的网络请求大部分都建立在请求/响应模式的 HTTP/HTTPS 协议之下，AJAX 技术使页面看起来更加动态。尽管如此，所有的 HTTP 连接仍由客户端控制，需要用户交互或定时轮询（periodic polling）才能从服务端加载新数据。&lt;/p&gt;
&lt;p&gt;通过长轮询，客户端打开与服务端的 HTTP 连接，并保持连接直到服务端返回响应，只要服务端有新的数据，它就会发送响应。然而这些技术有共同的问题：它们带有 HTTP 的开销，并不适合低延时应用的需求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM Basic - Compiler</title>
      <link>https://zacash.cn/posts/jvm-basic-compiler/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/jvm-basic-compiler/</guid>
      <description>&lt;p&gt;Class 文件的结构&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to ConcurrentHashMap</title>
      <link>https://zacash.cn/posts/intro-to-concurrenthashmap/</link>
      <pubDate>Wed, 15 Jul 2020 15:11:27 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-concurrenthashmap/</guid>
      <description>&lt;p&gt;Hash table based implementation of the Map interface.  This implementation provides all of the optional map operations, and permits null values and the null key.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to HashMap</title>
      <link>https://zacash.cn/posts/intro-to-hashmap/</link>
      <pubDate>Wed, 15 Jul 2020 15:11:27 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-hashmap/</guid>
      <description>&lt;p&gt;Hash table based implementation of the Map interface.  This implementation provides all of the optional map operations, and permits null values and the null key.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Are Touch Events Delivered</title>
      <link>https://zacash.cn/posts/how-are-touch-events-delivered/</link>
      <pubDate>Sat, 11 Jul 2020 08:37:45 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/how-are-touch-events-delivered/</guid>
      <description>根据例子来理解 Android 的事件传递
页面的布局结构
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;layout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;  xmlns:app=&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&amp;gt;   &amp;lt;data&amp;gt;  &amp;lt;variable  name=&amp;#34;viewModel&amp;#34;  type=&amp;#34;com.zac4j.system.data.TouchViewModel&amp;#34; /&amp;gt;  &amp;lt;/data&amp;gt;   &amp;lt;com.zac4j.system.ui.widget.CustomLayout  android:id=&amp;#34;@id/touch_sample_container&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt;   &amp;lt;Button  android:id=&amp;#34;@id/touch_sample_btn&amp;#34;  style=&amp;#34;@style/Widget.AppCompat.Button.Colored&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;wrap_content&amp;#34;  android:text=&amp;#34;Touch Me&amp;#34;  app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34;  app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34;  app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; /&amp;gt;   &amp;lt;/com.zac4j.system.ui.widget.CustomLayout&amp;gt; &amp;lt;/layout&amp;gt; TouchEvent 的传递 我们通常对 Button 创建点击事件:
touchSampleBtn.setOnClickListener {  Logger.i(TAG, &amp;#34;setOnClickListener&amp;#34;, &amp;#34;sampleBtn clicked&amp;#34;) } 可以先看下 View.dispatchTouchEvent() 的实现:
public boolean dispatchTouchEvent(MotionEvent event) {  .</description>
    </item>
    
    <item>
      <title>Intro to Hybrid App</title>
      <link>https://zacash.cn/posts/intro-to-hybrid-app/</link>
      <pubDate>Sat, 04 Jul 2020 15:45:14 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-hybrid-app/</guid>
      <description>Hybrid App 的几种方案   PhoneGap/Cordova
WebView 作为用户界面，以 Javascript 作为基本逻辑，以及和中间件通信，再由中间件访问底层 API 的方式，进行 App 开发。
  React Native/Weex
使用前端技术开发，通过 JSBridge 将 Javascript 代码解析的 Virtual DOM 传递到 Native 并使用原生进行渲染。
  Native/H5 混合开发
在原生的架构基础上，嵌入 WebView 业务逻辑，一般有 Native 和 Web 前端开发人员组成。Native 写好基本的架构以及 API 让 Web 开发人员开发页面以及大部分渲染。
  PhoneGap/Cordova PhoneGap 由 Apache 接管后改名为 Cordova，实际上是一个项目。Cordova 其实不应该称为 Hybrid 方案。因为，它的目标是全面使用前端技术开发移动应用，而不是前端和原生混合使用。不过，这些框架和 React Native 的目标是一致的：使用前端技术开发移动应用，提高工程效率。
Cordova 让前端技术尽可能多的完成开发工作，只有在前端无法直接调用的原生系统功能方面提供了前端可用的接口。主流的 Cordova 项目都将业务逻辑实现在一个 WebView 中，目标是让开发者使用前端技术就能完成一个应用开发。这种做法需要一个前提——前端技术可以解决移动开发的所有需求。
Cordova 架构图  Web App 是开发人员编写代码的地方，应用以网页的形式呈现，在一个 index.html 的本地页面文件中引用所需要的各种 Web 资源，如 CSS、Javascript、图片和影音文件等。App 的配置保存在 config.</description>
    </item>
    
    <item>
      <title>Intro to Service</title>
      <link>https://zacash.cn/posts/intro-to-service/</link>
      <pubDate>Sat, 04 Jul 2020 11:08:11 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-service/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java Basic</title>
      <link>https://zacash.cn/posts/java-basic/</link>
      <pubDate>Fri, 03 Jul 2020 09:28:31 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/java-basic/</guid>
      <description>🌟答案的组织策略：知道是什么，知道为什么，知道怎么用
0.JDK 和 JRE 有什么区别？  JDK 包含 JRE，同时还包含编译 Java 源码的编译器 javac，还包含了很多 Java 程序调试和分析的工具。 加分项：除了 javac 还了解哪些命令行工具，它们的用途是什么？  jcmd：综合工具 jps：虚拟机进程状况工具 jinfo：虚拟机配置信息工具 jstat：虚拟机统计信息监视工具 jmap：Java 内存映像工具 jhat：虚拟机堆转储快照分析工具 jstack：Java 堆栈追踪工具   加分项jstat 用过吗，有哪些参数？  -class：监视类装载、卸载数量、总空间和类装载所耗费的时间 -gc：监视 Java 堆的状况，包括 Eden 区，两个 survior 区，老年代、永久代等的容量，已用空间、GC 时间合计等统计    1.equals 和 == 的差别？ 两者都是判断等价性，区别要从入参类型来看：
  对于基本类型，他们是比较值是否相等
  对于引用类型，他们是判断引用的是否为同一对象
  考察点：equals 的概念
  🌟实际要求：平时对源码的深挖意识即技术钻研和批判性思维
  考察目的：
 基础知识的扎实程度 候选人对技术的热情    2.Java 中操作字符串有那些类？它们之间有什么区别？  主要有：String，StringBuilder，StringBuffer 区别：StringBuffer 和 StringBuilder 都继承自 AbstractStringBuilder，StringBuffer 具备线程安全性  加分项：String 源码分析  String 是 final 关键字修饰 -&amp;gt; 对象的值不可变 -&amp;gt; 每次操作都会生成新的对象 StringBuffer 和 StringBuilder 对象的值可变，但拼接字符串开销比较小   加分项：StringBuffer 线程安全性分析（查源码、找 synchronized、线程锁）   使用场景：并发必选 StringBuffer，迭代必选 StringBuilder，普通场景选 String，避免中途不必要的类型转换开销  3.</description>
    </item>
    
    <item>
      <title>Essential Design Pattern in Android</title>
      <link>https://zacash.cn/posts/design-pattern-in-android/</link>
      <pubDate>Sat, 20 Jun 2020 20:22:10 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/design-pattern-in-android/</guid>
      <description>什么是设计模式 设计模式的经典解释：软件工程中，设计模式是针对软件设计中给定上下文的常见问题的通用、可复用的解决方案。设计模式并非可以直接转换为源码或机器码的最终设计。相反，它是可以在不同场景下使用的解决问题的描述或模版。设计模式是程序员在设计 App 或系统时解决常见问题的最佳实践。
面向对象的设计模式通常展示了类和对象之间的关系和交互，而不是指定 App 的类或对象。
设计模式可以看作是一种编程的结构化方法，介于编程范式和具体算法之间。
设计模式根据其解决的问题分为三个类别：
 创造型模式（Creational Patterns）：提供创建类，对象的方法（Singleton, Dependency Inject, Builder等）。 结构型模式（Structural Patterns）：提供对象和类之间组合的方法（Composite, Bridge, Adapter 等）。 行为型模式（Bahavioral Patterns）：提供对象和类之间相互交流的方法（Command, Observer, Strategy 等）。  创造型模式 当我们用最基本的形式创建创建对象可能导致设计问题，或增加设计的复杂性。创造型设计模式通过控制对象的创建方式来解决这种问题。
Android 常用的创造型模式：
Builder Builder 模式主要解决创建复杂对象过程中遇到的问题：
 类如何创建复杂对象不同的表现形式(different presentations) 如何简化包含创建复杂对象的类  Builder 模式在 Android 中常见的应用是 AlertDialog 的创建过程：
AlertDialog.Builder(context)  .setTitle(&amp;#34;Builder Sample&amp;#34;)  .setMessage(&amp;#34;Builder Nessage&amp;#34;)  .setNegativeButton(&amp;#34;Cancel&amp;#34;, {_,_ -&amp;gt; })  .setPositiveButton(&amp;#34;OK&amp;#34;, {_, _ -&amp;gt; })  .show() Builder 模式通过这种方式解决问题：
 将复杂对象的各个部分的创建(creating)和组装(assembling)封装在一个独立的 Builder 对象中。 类将对象的创建委托给 Builder 对象，而不是直接创建。  Dependency injection 依赖注入（Dependency injection, 简称 Di）通常表示某个对象接收(receives)它依赖的对象(objects)的技术，这些依赖的对象称为依赖项(dependencies)。在典型的使用关系中，接收者被称为客户端（client），传递的对象被称为服务（service）。将服务传递给客户端的代码可能有很多种，被称为注入器（injector）, 注入器提供给客户端需要使用哪些服务。注入(injection)是指将依赖项（服务）传递给使用依赖项的对象（客户端）。</description>
    </item>
    
    <item>
      <title>Top 10 Kotlin Questions in StackOverflow</title>
      <link>https://zacash.cn/posts/top-10-kotlin-questions/</link>
      <pubDate>Fri, 19 Jun 2020 22:03:29 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/top-10-kotlin-questions/</guid>
      <description>IntArray vs. Array&amp;lt;Int&amp;gt;   In java code
 IntArray: int[] Array&amp;lt;Int&amp;gt;: Integer[]    Create method:
 IntArray:  val intArray : IntArray = intArrayOf(1, 2, 3, 4, 5)  Array&amp;lt;Int&amp;gt;:  val arrayOfInts : Array&amp;lt;Int&amp;gt; = arrayOf(1, 2, 3, 4, 5)   Iterable vs. Sequence   Usage
 Iterable:  getPeople() .filter { it.age &amp;gt;= 18 } .map { it.name } .take(5)  Sequence: start with asSequence() and end with toList() or toSet()&amp;hellip;  getPeople().</description>
    </item>
    
    <item>
      <title>Intro to Build System</title>
      <link>https://zacash.cn/posts/intro-to-build-system/</link>
      <pubDate>Fri, 05 Jun 2020 14:49:15 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/intro-to-build-system/</guid>
      <description>构建流程（Build process） 简单来说构建流程就是涉及一系列工具和步骤将项目转换成 Android Application Package(APK)。典型的流程如下图所示：
图中所示有4个步骤：
 编译器将源码转换为 DEX 文件(Dalvik 可执行文件，包括运行在 Android 设备的字节码)，并将其他所有内容转换成编译后的资源文件。 APK Packager 将 DEX 文件和编译后的资源文件合并到一个 APK 里。 APK Packager 使用 keystore 为 APK 签名。 在生成最终的 APK 文件之前，Packager 会使用 zipalign 工具  自定义构建配置 Gradle 和 Android 插件可以帮助我们修改 build.gradle 中的这些配置：
构建类型 Build Types 构建类型定义 Gradle 在构建(building)和打包(packaging) App 时使用的某些属性，通常针对开发周期的不同阶段(different stages of development)进行配置。比如：
 debug 构建类型支持 debug 选项，并使用 debug key 为 APK 签名。 release 构建类型则会压缩(shrink)和混淆(obfuscate) APK，并使用 release key 为 APK 签名。  构建 App 时必须指定一个构建类型。可以参考 BuildType DSL，了解配置构建类型属性。</description>
    </item>
    
    <item>
      <title>Fragment in ViewPager</title>
      <link>https://zacash.cn/posts/fragment-in-viewpager/</link>
      <pubDate>Mon, 25 May 2020 20:55:31 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/fragment-in-viewpager/</guid>
      <description>使用 ViewPager 通常我们使用 ViewPager + TabLayout 主要有这些步骤：
 页面的布局结构:  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;  xmlns:app=&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;  xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;match_parent&amp;#34;  tools:context=&amp;#34;.MainActivity&amp;#34;  &amp;gt;   &amp;lt;com.google.android.material.appbar.AppBarLayout  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;wrap_content&amp;#34;  android:theme=&amp;#34;@style/AppTheme.AppBarOverlay&amp;#34;  &amp;gt;   ...   &amp;lt;com.google.android.material.tabs.TabLayout  android:id=&amp;#34;@+id/tabs&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;wrap_content&amp;#34;  android:background=&amp;#34;?attr/colorPrimary&amp;#34;  /&amp;gt;   &amp;lt;androidx.viewpager.widget.ViewPager  android:id=&amp;#34;@+id/view_pager&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;match_parent&amp;#34;  app:layout_behavior=&amp;#34;@string/appbar_scrolling_view_behavior&amp;#34;  /&amp;gt;  &amp;lt;/com.google.android.material.appbar.AppBarLayout&amp;gt; &amp;lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&amp;gt;  在 PagerAdapter 中会指定我们使用的 Fragment:  class SectionsPagerAdapter(private val context: Context,  fm: FragmentManager ) : FragmentPagerAdapter(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {   override fun getItem(position: Int): Fragment {  return SampleFragment.</description>
    </item>
    
    <item>
      <title>Git Basic</title>
      <link>https://zacash.cn/posts/git-basic/</link>
      <pubDate>Fri, 15 May 2020 15:55:52 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/git-basic/</guid>
      <description>Problem Solving Authentication   Clear saved account &amp;amp; password
Error: fatal:Authentication failed for &#39;remote-url&#39;
git config --system --unset credential.helper
  Save account &amp;amp; password
git config --global credential.helper store
  Remote   Check remote url
git remote -v
  Update remote url
git remote set-url origin newRepoUrl
  </description>
    </item>
    
    <item>
      <title>Intro to Fragments</title>
      <link>https://zacash.cn/posts/fragments/</link>
      <pubDate>Thu, 07 May 2020 20:30:50 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/fragments/</guid>
      <description>Activity 和 Fragment 生命周期的关联    Activity 状态 Fragment 生命周期方法回调 Fragment 状态     Created onAttach(), onCreate(), onCreateView(), onActivityCreated() Fragment 添加到 Activity 且视图已初始化   Started onStart() Fragment 活跃并可见   Resumed onResume() Fragment 活跃并获取焦点   Paused onPause() Fragment 暂停   Stopped onStop() Fragment 停止并不再可见   Destroyed onDestroyView(), onDestroy(), onDetach() Fragment 销毁    Fragment 重要的生命周期方法的使用  onAttach(): Fragment 在被 attach 到宿主 Activity 时回调，可以在该方法里检查宿主 Activity 是否实现了某个接口。 onCreateView(): Fragment 的 XML 布局在这个回调方法里初始化，系统调用这个方法来绘制 Fragment 的 UI。 onPause(): 可以在 Fragment 销毁前在该回调方法保存必要数据或状态。 onActivityCreated(): 在宿主 Activity 的 onCreate() 方法调用后回调该方法。可以在该方法做最终的初始化，如检索 View getView().</description>
    </item>
    
    <item>
      <title>Coroutines Introduction</title>
      <link>https://zacash.cn/posts/coroutines-introduction/</link>
      <pubDate>Sat, 25 Apr 2020 11:40:03 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/coroutines-introduction/</guid>
      <description>协程用来解决什么问题 Kotlin 的协程提供了一种全新的并发处理方式，我们可以使用它来简化安卓异步执行的代码。
在 Android 平台上协程主要用来解决两个问题：
 处理耗时任务(Long running tasks) 保证主线程安全(Main-safety)  处理耗时任务 我们常规处理耗时任务是通过异步回调的方式，比如：
fun fetchDoc() {  get(&amp;#34;https://doc.qq.com&amp;#34;) { result -&amp;gt;  show(result)  } } 通过协程的方式是这样：
// 主线程执行 suspend fun fetchDoc() {  // 直接返回结果  val result = get(&amp;#34;https://doc.qq.com&amp;#34;)  show(result) }  // 主线程执行 suspend fun get(url: String) = withContext(Dispatchers.IO) {  /*IO 线程池执行*/ } 可以看到通过协程可以直接返回请求结果，而不用管理请求延迟和线程阻塞，这是如何实现的呢？
协程在常规的函数操作 —— invoke 和 return 之外，还新增了2项：
 suspend —— 称为挂起或暂停，用于暂停执行当前协程，并保存所有局部变量 resume —— 让暂停的协程继续执行  那么 suspend 是如何实现的呢？</description>
    </item>
    
    <item>
      <title>Activity Start</title>
      <link>https://zacash.cn/posts/activity-launch/</link>
      <pubDate>Wed, 22 Apr 2020 08:10:27 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/activity-launch/</guid>
      <description>Task and Back Stack Task 就是执行某项任务时开启的一系列 Activity 的集合，这些 Activity 会按照打开的顺序排列在回退栈 (Back Stack) 中。
Activity 的四种启动模式 (launchMode) 如通过 startActivity(Intent) 启动 Activity A
 standard 模式：标准模式，创建 Activity A 实例并 push 到当前任务栈中 singleTop 模式：栈顶复用模式，如果当前栈顶是 Activity A ，直接复用并调用 onNewIntent(Intent)方法，不会创建新的实例 singleTask 模式：栈内复用模式，如果当前栈内含有 Activity A ，直接复用并调用 onNewIntent(Intent)方法，并清除栈内 Activity A 上方的所有 Activity 实例 singleInstance 模式：在新的任务栈开启 Activity A，如果新的任务栈和 Activity A 已创建，继续开启 Activity A 会调用其 onNewIntent(Intent)方法。  三种 Intent 标记 startActivity(Intent) 方法可以添加 3 种 Intent 标记：
  FLAG_ACTIVITY_NEW_TASK
在新的任务栈中启动 Activity A，如果当前运行的任务栈中已含有 Activity A，则将任务栈内的 Activity A 恢复到前台并调用 onNewInstent(Intent) 方法，此 flag 的功能同 singleTask 启动模式相同。</description>
    </item>
    
    <item>
      <title>Handler in Depth</title>
      <link>https://zacash.cn/posts/handler-in-depth/</link>
      <pubDate>Tue, 14 Apr 2020 21:53:54 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/handler-in-depth/</guid>
      <description>Handler 在使用时常见的问题
1.Memory Leaks 1.1 背景 Handler 在使用下面这种实现方式处理消息时:
class MainActivity: Activity() {   private val mLeakedHandler = object: Handler() {  override fun handleMessage(msg: Message) {  super.handleMessage(msg)  }  } Android Lint 会发出这样的警告: This Handler class should be static or leaks might occur(anonymous android.os.Handler)
我们在 Handler 构造方法里可以看到：
public Handler(@Nullable Callback callback, boolean async) {  if (FIND_POTENTIAL_LEAKS) {  final Class&amp;lt;? extends Handler&amp;gt; klass = getClass();  if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.</description>
    </item>
    
    <item>
      <title>Handler in Details</title>
      <link>https://zacash.cn/posts/handler-in-code/</link>
      <pubDate>Sun, 12 Apr 2020 20:36:33 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/handler-in-code/</guid>
      <description>Handler 的创建  在主线程(UI Thread)中：  class MainActivity: Activity {  private val mLeakedHandler = object: Handler(Looper.getMainLooper()) {  override fun handleMessage(msg: Message) {  super.handleMessage(msg)  }  } }  在子线程中：  val thread = object: Thread() {  override fun run() {  val looper = Looper.prepare()  val handler = object: Handler(Looper.myLooper()) {  override fun handleMessage(msg: Message) {  super.handleMessage(msg)  }  }  Looper.loop()  } } 为什么在子线程创建 Handler 需要准备 Looper，而主线程却不用 因为 ActivityThread 中的 main() 方法已经为我们初始化了 Looper</description>
    </item>
    
    <item>
      <title>Hugo Basic</title>
      <link>https://zacash.cn/posts/hugo-basic/</link>
      <pubDate>Sat, 04 Apr 2020 09:25:04 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/hugo-basic/</guid>
      <description>Add new content hugo new posts/article-name.md
Article meta info --- title: &amp;#34;New Article&amp;#34; date: 2020-04-04T09:25:04+08:00 description: &amp;#34;Hugo 的简单用法&amp;#34; tags: [&amp;#34;hugo&amp;#34;, &amp;#34;pages&amp;#34;] categories: [&amp;#34;hugo&amp;#34;] draft: true --- Start server with drafts enabled hugo server -D
Customize the theme Open up config.toml in a text editor:
baseURL = &amp;#34;https://example.org/&amp;#34;languageCode = &amp;#34;en-us&amp;#34;title = &amp;#34;My New Hugo Site&amp;#34;theme = &amp;#34;ananke&amp;#34;Build static pages hugo -D output will be in ./public/ directory by default (-d/--destination flag to change it, or set publishdir in the config file)</description>
    </item>
    
    <item>
      <title>Check State Loss</title>
      <link>https://zacash.cn/posts/check-state-loss/</link>
      <pubDate>Tue, 11 Feb 2020 16:30:26 +0800</pubDate>
      
      <guid>https://zacash.cn/posts/check-state-loss/</guid>
      <description>背景 最近做的一个 DialogFragment 在少数设备上会偶发闪退，Fabric 上的 Stacktrace 信息如下：
Fatal Exception: java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState  at android.support.v4.app.FragmentManagerImpl.checkStateLoss(SourceFile)  at android.support.v4.app.FragmentManagerImpl.enqueueAction(SourceFile)  at android.support.v4.app.BackStackRecord.commitInternal(SourceFile)  at android.support.v4.app.BackStackRecord.commit(SourceFile)  at android.support.v4.app.DialogFragment.show(SourceFile） 看起来是弹窗在 show 的时候，发生了 state loss，粗略 copy 了下 StackOverflow 上的回答，做了如下修改：
fun show(manager: FragmentManager?) {  try {  val ft = manager?.beginTransaction()  ft?.add(this, &amp;#34;tag of dialog&amp;#34;)  ft?.commitAllowingStateLoss()  } catch (e: Exception) {   } } 重写了 show 方法，允许 state loss，并加了异常捕捉，后续观察 Fabric， show 的时候的确没再出现异常情况，但 dismiss 的时候还是有闪退出现，异常信息如下：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zacash.cn/posts/when-to-use-lazy-or-lateinit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zacash.cn/posts/when-to-use-lazy-or-lateinit/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
